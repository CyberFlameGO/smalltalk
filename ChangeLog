2005-08-23  Mike Anderson  <msasjf@yahoo.co.uk>

	* kernel/FileDescr.st: Fix thinkos.
  
2005-08-07  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/VFS.st: Do my math correctly.

2005-07-28  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/ClassDesc.st: Add #fileOutHeaderOn:
	* kernel/Class.st: Remove it.

2005-06-12  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/DLD.st: Restart search from the last library where
	we found a function.

2005-04-07  Mike Anderson  <msasjf@yahoo.co.ul>

	* kernel/PosStream.st: Fix bug in #peekFor:.

2005-02-02  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/PkgLoader.st: Add comments to undocumented methods.

2005-02-02  Paolo Bonzini  <bonzini@gnu.org>

	* examples/gdbm.c: Do not include malloc.h.

2004-11-13  Paolo Bonzini  <bonzini@gnu.org>

        * kernel/Directory.st: support passing an absolute path as the
        file name in Directory>>#append:to:.
        * kernel/PkgLoader.st: support source files in multiple directories.

2004-09-06  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/CObject.st: implement #narrow for UndefinedObject.

2003-10-21  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/PkgLoader.st: fix bug in recognizing already loaded
	packages.
	* kernel/SysDict.st: accept a String in #hasFeatures:

2003-10-17  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/ContextPart.st: correctly find exception handlers
	when unwinding, as in
	[ [^self] ensure: [ self halt ] ] on: Halt do: [ :ex | ]

2003-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/CompildMeth.st: print correctly if descriptor
	is nil.

2003-09-05  Paolo Bonzini  <bonzini@gnu.org>

	* compiler/STLoaderObjs.st: create link from namespace
	to itself.

2003-08-25  Paolo Bonzini  <bonzini@gnu.org>

	* examples/Sync.st: fix #forSeconds: --> #forMilliseconds:
	in Watchdog.

2003-07-22  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/Behavior.st: call #narrow in C call-outs
	* kernel/CObject.st: implement #narrow.

2003-07-14  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/FileStream.st: only check `access' when filling
	the buffer or starting a write operation.

2003-07-13  Paolo Bonzini  <bonzini@gnu.org>

        * kernel/LookupTable.st: implement #hash.
	* kernel/Character.st: use compile-time constants.
	* kernel/Stream.st: replace #| with #or:
	* kernel/FileStream.st: signal EndOfStream appropriately,
	reimplement #nextLine more efficiently, inline some tests.
	* kernel/FileDescr.st: signal EndOfStream appropriately

2003-07-10  Paolo Bonzini  <bonzini@gnu.org>

	* tests/compiler.st: add a test case

2003-07-09  Paolo Bonzini  <bonzini@gnu.org>

        * kernel/SeqCollect.st: do some optimization

        * kernel/BindingDict.st: inline hash lookup into #findIndex:
        * kernel/Dictionary.st: inline hash lookup into #findIndex:
        * kernel/HashedColl.st: make #findIndex: an abstract method
        * kernel/IdentDict.st: inline hash lookup into #findIndex:
        * kernel/IdentitySet.st: inline hash lookup into #findIndex:
        * kernel/LookupTable.st: inline hash lookup into #findIndex:
        * kernel/Set.st: inline hash lookup into #findIndex:
        * kernel/WeakObjects.st: inline hash lookup into #findIndex:

2003-07-08  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/ObjMemory.st: initialize Processor.
	* kernel/Processor.st: fire GC process.

2003-06-28  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.1.3 released.

2003-06-21  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/LargeInt.st: fixed bug in #bitAt:

2003-06-08  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/Collection.st: fix typo in the comment for
	Collection>>#inject:into:; added #fold:

2003-06-05  Paolo Bonzini  <bonzini@gnu.org>

        * kernel/CompildCode.st: no need to special case
        Associations in the method printing code, because
        methods don't own Association anymore (they have
        VariableBindings, but they print differently also
        to avoid this kind of special casing).

2003-06-04  Paolo Bonzini  <bonzini@gnu.org>

        * kernel/ExcHandling.st: death to CoreException class>>
        #unwindTo:

2003-05-27  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/Builtins.st: add Object>>#allOwners
	* kernel/CallinProcess.st: point out that CallinProcesses
	do not survive across image saves.

2003-05-16  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/Bag.st: don't leave items with zero
	occurrences in the dictionary.

2003-05-09  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.1.2 released.

	* kernel/Stream.st: define #isExternalStream.
	* kernel/FileDescr.st: ditto.

2003-05-06  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/CompildCode.st: omit # when outputting a
	literal in short form (a ClassName).
	* kernel/Builtins.st: possibly raise a FileError
	exception in ObjectMemory class>>#snapshot:

2003-04-29  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/Behavior.st: make recompiles more silent in
	regression testing mode.

	* kernel/Behavior.st: don't update instanceSpec in
	#addInstVarName: and #removeInstVarName:.  Possibly
	recompile subclasses when adding variables.  Move
	#validateIdentifier: here from Metaclass.st, and use it.
	* kernel/Class.st: possibly recompile subclasses when
	removing class variables.
	* kernel/Metaclass.st: moved #validateIdentifier: to
	Behavior.
	* kernel/Object.st: fix thinko in class mutation.

2003-04-27  Paolo Bonzini  <bonzini@gnu.org>

	* kernel/File.st: #extensionFor: should include the leading
	dot.  Reported by nicolas.pelletier3@wanadoo.fr.

2003-04-17  Paolo Bonzini  <bonzini@gnu.org>

        *** Version 2.1.1 (stable) released.

2003-04-12  Paolo Bonzini  <bonzini@gnu.org>

        *** Version 2.1 (stable) released.

2003-03-22  Paolo Bonzini  (bonzini@gnu.org)

	* sunit/SUnitPreload.st: upgrade to SUnit 3.1RC2.
	* sunit/SUnitTests.st: upgrade to SUnit 3.1RC2.
	* sunit/SUnitLog.st: included into SUnit.st.
	* sunit/SUnit.st: upgrade to SUnit 3.1RC2, include SUnitLog.st

2003-03-20  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileDescr.st: ensure that the whole data is
	written on the file (for #write:... methods) -- previously
	done in the VM.

2003-03-04  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/VFS.st: wrap loading of filesystems with
	exception handlers.

2003-03-02  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: implement #printOn:in:
	* kernel/BindingDict.st: implement #printOn:in:
	* kernel/ClassDesc.st: implement #printOn:in:
	* kernel/Metaclass.st: implement #printOn:in:
	* kernel/Namespace.st: implement #printOn:in:
	* kernel/RootNamespc.st: implement #printOn:in:
	* kernel/SysDict.st: implement #printOn:in:
	* kernel/CompildMeth.st: use #printOn:in: when printing

2003-02-08  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/DLD.st: do not relink DLD functions at startup
	* kernel/CFuncs.st: do that here on demand

	* kernel/CFuncs.st: use #printStringRadix: instead of #radix:
	* kernel/CObject.st: ditto

2003-02-07  Paolo Bonzini  (bonzini@gnu.org)

	* tests/processes.st: add process names and a few other
	simplifications.

	* kernel/URL.st: add comments.

2003-01-17  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ExcHandling.st: fix off-by-one error in #resetHandler

	* kernel/CompildCode.st: also send #postCopy to super
	* kernel/ExcHandling.st: override #postCopy rather than #copy

2003-01-16  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Process.st: don't suspend an interrupted process if
	the interruption has caused it to terminate (!)

2003-01-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PkgLoader.st: support dynamically loaded libraries.

2003-01-02  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkClosure.st: remove workaround for JIT bug.

2002-12-31  Paolo Bonzini  (bonzini@gnu.org)

	* tests/processes.st: fix for expected change in behavior.

	* examples/RandomInt.st: add 2002 copyright year
	* examples/StreamFilter.st: likewise
	* examples/shell: likewise
	* kernel/Autoload.st: likewise
	* kernel/ByteStream.st: likewise
	* kernel/Character.st: likewise
	* kernel/Class.st: likewise
	* kernel/ClassDesc.st: likewise
	* kernel/CStruct.st: likewise
	* kernel/Date.st: likewise
	* kernel/DLD.st: likewise
	* kernel/Delay.st: likewise
	* kernel/DirMessage.st: likewise
	* kernel/FileSegment.st: likewise
	* kernel/Interval.st: likewise
	* kernel/LookupKey.st: likewise
	* kernel/MappedColl.st: likewise
	* kernel/Metaclass.st: likewise
	* kernel/MethodInfo.st: likewise
	* kernel/MthContext.st: likewise
	* kernel/Point.st: likewise
	* kernel/OtherArrays.st: likewise
	* kernel/Rectangle.st: likewise
	* kernel/ScaledDec.st: likewise
	* kernel/Semaphore.st: likewise
	* kernel/SharedQueue.st: likewise
	* kernel/Symbol.st: likewise
	* kernel/Time.st: likewise

        * kernel/Stream.st: remove duplicate implementation of #upToAll:
        * kernel/LargeInt.st: fix bugs in Smalltalk implementation
        of LargeIntegers.

2002-12-27  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ContextPart.st: implement #isInternalExceptionHandlingContext
	* kernel/ExcHandling.st: hide internal aspects of exception handling
	from backtraces 
	* examples/MiniDebugger.st: terminate internal exception handling
	contexts when entering the debugger.

2002-12-24  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: raise an error when the #addressOf:
	and #addressOfOOP: primitives fail.
	* kernel/ByteArray.st: send #addressOf: to ObjectMemory

2002-12-20  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Debugger.st: removed

2002-12-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: implement ObjectMemory>>#abort
	* kernel/CompildCode.st: if a method does not have
	source code line information, don't fail in #sourceCodeMap
	* kernel/Behavior.st: implement #debuggerClass
	* kernel/Metaclass.st: implement #debuggerClass
	* kernel/ContextPart.st: implement #debuggerClass
	* kernel/Process.st: implement #suspendedContext
	* kernel/ExcHandling.st: added support for starting a
	debugger.

	* examples/MiniDebugger.st: new file

2002-12-12  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ArrayColl.st: implement #copyEmpty using #size
	for the size of the new collection (instead of #basicSize).

2002-11-25  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: implement asyncronous call-outs
	* kernel/CFuncs.st: implement asyncronous call-out primitive

2002-11-20  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Class.st: look in the current namespace for
	a class to redefine (#metaclassFor:) instead of looking
	in Smalltalk
	* kernel/UndefObject.st: likewise

2002-11-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: use compile-time constant to
	define call-outs
	* kernel/DLD.st: get rid of CFunctionDescs

	* kernel/Class.st: use identity to look for shared
	pools.  Avoids autoloading classes when there are
	any in the same environment as the shared pools'.

2002-11-14  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CFuncs.st: define new call-out primitive
	* kernel/Behavior.st: use it

2002-11-12  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: added Semaphore>>#lock

2002-11-09  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Delay.st: ensure that the idle process is
	started and placed on the process lists.
	* kernel/DirMessage.st: add process creation methods
	* kernel/Process.st: add method to add an handler
	for ProcessTerminated into every call-in from C.

2002-10-21  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ObjMemory.st: adjusted for new memory manager

2002-10-18  Paolo Bonzini  (bonzini@gnu.org)

        * kernel/FileDescr.st: don't call #initialize
        * kernel/Object.st: don't do anything if self ~~ Object
        in #initialize.

2002-10-17  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: adjusted for new memory manager

2002-10-13  Paolo Bonzini  (bonzini@gnu.org)

        * kernel/Stream.st: use Knuth-Morris-Pratt algorithm to
        implement #skipToAll: and #upToAll:.

2002-10-08  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Autoload.st: rewritten

        * kernel/ArrayColl.st: don't implement #new:
	* kernel/Behavior.st: "new: 0" -> "new"
	* kernel/ClassDesc.st: likewise
	* kernel/Object.st: likewise
	* kernel/Symbol.st: likewise
	* kernel/Builtins.st: send #new: or #basicNew: if #new or
	#basicNew fail because the class is fixed.

2002-10-07  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Bag.st: replace Dictionary with LookupTable,
	#associationsDo: with #keysAndValuesDo:
	* kernel/CStruct.st: replace Dictionary with IdentityDictionary
	* kernel/Date.st: replace Dictionary with IdentityDictionary
	* kernel/PkgLoader.st: replace Dictionary with LookupTable
	* kernel/URL.st: replace Dictionary with LookupTable

2002-10-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Namespace.st: inherit from AbstractNamespace
	* kernel/RootNamespc.st: moved parts to AbstractNamespace
	and BindingDictionary
	* kernel/AbstNamespc.st: create from RootNamespc.st
	* kernel/BindingDict.st: create from RootNamespc.st
	* kernel/Class.st: create BindingDictionaries for
	class pools.

	* kernel/CompildCode.st: show line number bytecodes;
	added #sourceCodeMap.

2002-10-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PkgLoader.st: check the availability of
	call-outs after modules have been loaded.

2002-10-02  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PkgLoader.st: adopted XML input format

2002-09-29  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/OrderColl.st: shrink

2002-09-28  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Association.st: don't hardcode the class in
	#storeOn:
	* kernel/LookupKey.st: add brackets around the key
	in #printOn:, and don't hardcode the class

	* kernel/Behavior.st: don't print a sharp in front of
	the name of a lightweight class.

	* kernel/Builtins.st: replace finalization primitives
	with ephemeron primitive
	* kernel/Collection.st: add #mourn:
	* kernel/HomedAssoc.st: new file from part of VarBinding.st
	* kernel/ObjMemory.st: call Object class>>#initialize
	* kernel/Object.st: add class variable and their accessors,
	and finalization methods
	* kernel/VarBinding.st: change superclass to be
	HomedAssociation
	* kernel/WeakObjects.st: reimplement parts to use
	ephemerons

	* kernel/RecursionLock.st: doc fixes
	* kernel/Semaphore.st: doc fixes
	* kernel/VFS.st: doc fixes

2002-09-26  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: revert to #basicAt:/#basicAt:put:
	to access indexed instance variables in #instVarAt:
	and #instVarAt:put:

2002-09-22  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkContext.st: changed printing of block contexts

2002-09-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CompildCode.st: rewritten printing to adopt
	parameterized dispatch.
	* kernel/Process.st: added interruptLock and revamped
	#queueInterrupt: so that it interrupts suspended processes
	as well.

2002-09-18  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SharedQueue.st: added #isEmpty
	* kernel/Delay.st: solved a race condition

	* kernel/BlkClosure.st: move process termination upon falling
	off the #fork-ed block from here...
	* kernel/Process.st: ...to here, where I also rewrote
	some parts so that #terminate uses the ProcessBeingTerminated
	notification...
	* kernel/AnsiExcept.st: ...that's defined here

	* kernel/ExcHandling.st: move declaration of #on:do: from
	here...
	* kernel/BlkClosure.st: ...to here, as it is needed to start
	the delay and idle processes.

2002-09-16  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CharArray.st: add support for %<string1|string2>n.
	* kernel/Semaphore.st: demonstrate %<string1|string2>n.

2002-09-13  Paolo Bonzini  (bonzini@gnu.org)

	*** Versions 2.0c (development) and 2.0.6 (stable) released

	* kernel/SeqCollect.st: added #copyUpTo:
	* kernel/Stream.st: added #next:putAll:startingAt:
	* kernel/Builtins.st: allow specifying a class as the
	current namespace

2002-09-12  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ClassDesc.st: answer dot-separated names in #nameIn:
	* kernel/RootNamespc.st: likewise
	* kernel/VarBinding.st: don't replace spaces with
	periods

2002-09-11  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: add interrupt handling methods
	* kernel/BlkClosure.st: implement #valueWithoutPreemption,
	possible now to do it with correct semantics
	* kernel/Process.st: added `interrupts' variable
	* kernel/ValueAdapt.st: use #valueWithoutPreemption

	* kernel/Semaphore.st: fix comment, give 'em a name
	and a nice #printOn: method.
	* kernel/RecursionLock.st: new file

2002-09-10  Paolo Bonzini  (bonzini@gnu.org)

	* numerics/Approximation.st: new file
	* numerics/Basic.st: new file
	* numerics/Distributions.st: new file
	* numerics/Functions.st: new file
	* numerics/Integration.st: new file
	* numerics/Load.st: new file
	* numerics/Matrixes.st: new file
	* numerics/NumericsAdds.st: new file
	* numerics/NumericsTests.st: new file
	* numerics/Optimization.st: new file
	* numerics/RNG.st: new file
	* numerics/Statistics.st: new file

2002-09-09  Paolo Bonzini  (bonzini@gnu.org)

	* sunit/SUnitLog.st: new file

	* kernel/Class.st: various additions to support RBEnvironments
	* kernel/CompildCode.st: various additions to support RBEnvironments

	* kernel/Association.st: achieve polymorphism with VariableBindings
	* kernel/RootNamespc.st: add VariableBindings, not Associations
	* kernel/VarBinding.st: new file

2002-09-08  Paolo Bonzini  (bonzini@gnu.org)

	* sunit/SUnit.st: made logging less verbose
	* kernel/RootNamespc.st: remove duplicates in #allBehaviorsDo:
	* kernel/Class.st: store classes as how they are found in the
	current namespace.

2002-09-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CompildCode.st: remove references to the Debugger
	symbol

	* kernel/Behavior.st: add missing return in #sourceCodeAt:
	and #selectorsAndMethodsDo:.  Added pluggable behavior (as
	a provision only) through #...Class methods.

	* kernel/ClassDict.st: use #remove: instead of #removeAssociation:
	* kernel/Dictionary.st: implement #remove: and #remove:ifAbsent:
	* kernel/IdentDict.st: implement #remove:
	* kernel/MethodDict.st: implement #remove:
	* kernel/Namespace.st: use #remove: instead of #removeAssociation:

2002-09-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CompildCode.st: print 8-bit push bytecodes.

	* kernel/Builtins.st: support single-step mode
	* kernel/Process.st: ditto

	* sunit/SUnit.st: upgraded to 3.1
	* sunit/SUnitTests.st: ditto
	* sunit/SUnitPreload.st: ditto
	
2002-08-22  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: reimplement #allSubinstancesDo:
	to scan the OOP table just once.
	* kernel/SeqCollect.st: reimplement #includes:
	and #identityIncludes: to avoid creating a full block.

2002-08-21  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileDescr.st: raise events through #changed:
	before and after closing
	* kernel/VFS.st: use this mechanism

2002-08-20  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Association.st: make sure that hash values are
	SmallIntegers.
	* kernel/CompildMeth.st: likewise
	* kernel/FileSegment.st: likewise
	* kernel/MethodInfo.st: likewise
	* kernel/Point.st: likewise
	* kernel/Rectangle.st: likewise

	* kernel/FileDescr.st: don't do unnecessary polls before
	invoking the asynchronous file polling service.
	* kernel/Stream.st: check for end-of-stream condition
	in #nextLine.
	* kernel/Time.st: delimit the parsed time by a space
	in #readFrom:

2002-08-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Directory.st: accessor methods rely on VFSHandler>>#at:
	* kernel/File.st: added #on:
	* kernel/VFS.st: implemented ExternalArchiveFileHandler.
	Created ArchiveMemberHandler and added abstract methods to
	VFSHandler.

2002-08-17  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ValueAdapt.st: add Object>>#asValue.
	* kernel/PosStream.st: add the #pastEnd hook.
	* kernel/AnsiExcept.st: make EndOfStream a subclass of
	Notification.

2002-08-14  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 2.0.5 (stable) released

        * kernel/Builtins.st: implement ByteArray>>
        #replaceFrom:to:with:startingAt: as a primitive

2002-08-12  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 2.0b (development) released

2002-08-07  Paolo Bonzini  (bonzini@gnu.org)

	*** Versions 2.0a (development) and 2.0.4 (stable) released

	* kernel/CharArray.st: 'abc' startsWith: 'abc'
	is now true.
        * kernel/VFS.st: added method to open a file with specified class
        * kernel/FileDescr.st: use it; added #peek.
        * kernel/FileStream.st: added #peek.

2002-07-24  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: use the correct type when
	storing a CObject into another CObject
	* kernel/CObject.st: rework things
	* examples/modules/gdbm-c.st: fix memory leak

2002-07-22  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Browser.st: removed

2002-07-17  Paolo Bonzini  (bonzini@gnu.org)

        *** Version 2.0.3 released

2002-07-15  Paolo Bonzini  (bonzini@gnu.org)

	* examples/StreamFilter.st: implement ConcatenatedStream>>#peek
	* kernel/URL.st: moved here from net/URL.st
	* kernel/FileStream.st: support opening URLs

2002-07-11  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 2.0.2 released
	
2002-07-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ExcHandling.st: moved definition of #ifCurtailed:
	* kernel/BlkClosure.st: here (and fixed the method comment)

2002-07-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ContextPart.st: skip disabled contexts on
	backtraces.
	* kernel/BlkContext.st: provide informational methods
	* kernel/MthContext.st: likewise

	* kernel/Behavior.st: use free methods to do evaluations

2002-07-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Class.st: file out declaration of classes
	derived from nil correctly.
	* kernel/ExcHandling.st: moved definition of #ensure:
	* kernel/BlkClosure.st: here.

	* kernel/Object.st: moved definition of #shallowCopy
	* kernel/Builtins.st: here.
	* kernel/ByteArray.st: remove redefinition of #shallowCopy,
	not needed with a primitive
	* kernel/CharArray.st: likewise
	* kernel/ContextPart.st: likewise

2002-07-04  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: define ContextPart>>#continue:
	and BlockClosure>>#valueAndResumeOnUnwind
	* kernel/ExcHandling.st: simplify the unwinding logic
	through the new primitives.
	* kernel/ContextPart.st: likewise

2002-07-03  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PkgLoader.st: store absolute paths

2002-07-02  Paolo Bonzini  (bonzini@gnu.org)

        * kernel/ScaledDec.st: define #ceiling, compare only to
	the lowest scale in equality and inequality
        * kernel/Number.st: use #integerPart to round and truncate,
	so that Floats still answer Floats.
	* kernel/Float.st: modified #hash to return the correct value
	when compared to LargeIntegers.
        * kernel/Fraction.st: fix comparisons of negative fractions,
	print without parentheses, return Integers if possible;
	modified #hash to return the correct value when compared to
	Floats.
        * kernel/Integer.st: force #asScaledDecimal: to generate
	decimals with scale 0.
        * kernel/LargeInt.st: fix <= and >= comparisons with zero,
	divisions by zero on #/, and corrected the order of computations
	and generality comparisons on most division methods

2002-06-28  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: Float -> FloatD
	* kernel/Float.st: moved some parts into
	* kernel/FloatD.st: this new file
	* kernel/FloatE.st: created from FloatD.st
	* kernel/FloatQ.st: created from FloatD.st

	* kernel/Number.st: provide conversions to various flavors
	of Floats
	* kernel/Fraction.st: likewise
	* kernel/LargeInt.st: likewise
	* kernel/ScaledDec.st: likewise

	* kernel/Integer.st: use #asFloatD
	* kernel/SortCollect.st: use #asFloatD

2002-06-29  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 2.0.1 released
	
2002-06-25  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 2.0 released
	
2002-06-21  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PkgLoader.st: fixes for vpath builds.  Always compute
	directories relative to the package file they are found in.

2002-06-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/AnsiExcept.st: added the #goodness: method
	* kernel/ExcHandling.st: use best-fit rather than first-fit
	to pick an exception handler when more than one is specified.
	Work decently (i.e. without performing correct unwinding of
	#ensure:/#ifCurtailed: blocks, but without incorrect data
	structure contents) if there are returns in exception handlers.
	* kernel/Process.st: removed the exceptionHandlers variable

2002-06-14  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ValueAdapt.st: fixed race condition
	* kernel/CharArray.st: added #match:ignoreCase:
	* kernel/CObject.st: initialize the new object's type in
	#address:, new method #new to provide an instance initialized
	to NULL.

2002-06-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/UndefObject.st: removed references to CFunctionDescs
	* kernel/Behavior.st: use full path to refer to CFunctionsDescs
	* kernel/AnsiExcept.st: don't show ArgumentOutOfRange limits
	in regression testing mode

2002-05-30  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Fraction.st: small bug fix, sometimes subtraction
	actually summed...

2002-05-28  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Class.st: file out the superclass' name *in the context
	of the filed out class*.
	* kernel/Date.st: return DateTimes with a Duration as an offset,
	not a number
	* kernel/Dictionary.st: add inspect method
	
2002-05-26  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileSegment.st: use #ensure: in #withFileDo:,
	add a map of original file names to modified file names in
	the relocation code.

2002-05-23  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: declare a primitive to scramble the bits
	of a SmallInteger
	* kernel/Dictionary.st: scramble the hash values
	* kernel/WeakObjects.st: ditto
	* kernel/HashedColl.st: ditto, and keep the size a power of two
	
2002-05-12  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileDescr.st: trap #afterEvaluation and flush the standard
	handles

2002-05-11  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.96.6 released
	
2002-05-11  Paolo Bonzini  (bonzini@gnu.org)

        * kernel/Integer.st: add binomial coefficient computation
        * kernel/RunArray.st: fix category to be "Collections-Sequenceable"
        * kernel/WriteStream.st: fix category to be "Streams-Collections"
        * kernel/ScaledDec.st: fix category to be "Language-Data types"
        * kernel/ByteArray.st: fix category to be "Collections-Sequenceable"

2002-05-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SeqCollect.st: don't raise an error if replacing
	with an empty collection

2002-05-05  Paolo Bonzini  (bonzini@gnu.org)

        * kernel/HashedColl.st: don't use #copy when rehashing, since
        namespaces are identity objects
        * kernel/LookupTable.st: don't do that here as well, just in case

2002-05-05  Paolo Bonzini  (bonzini@gnu.org)

	* examples/MemUsage.st: removed stale reference to WordMemory
	(eliminated in Sep 2000...)
	
	* kernel/ObjDumper.st: call #postLoad only the first time
	an object is found in the stream; once the object got its
	definitive shape it makes no sense to lose time (or do harm)
	with post-load fixups.

2002-05-02  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: add primitives to tune allocation
	of big objects outside the main heap.
	
2002-05-01  Paolo Bonzini  (bonzini@gnu.org)

        * kernel/ByteArray.st: add CSymbols pool dictionary
        * kernel/CObject.st: add CSymbols pool dictionary
        * kernel/Float.st: add CSymbols pool dictionary, modified
	printing code to use them.  Changed name of "characterization"
	methods to comply to the ANSI standard.  Defined Float[DEQ]
	as synonyms of Float (for now).
        * kernel/Integer.st: add CSymbols pool dictionary, added
	#bitAt:put:, the private method #signedStringBase:radix:on:
	now is called #printOn:base:showRadix: and is public

	* kernel/Fraction.st: use the new characterization methods
	in Float.

2002-04-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/VFS.st: added #openDescriptor:ifFail:	
	* kernel/File.st: added #openDescriptor:ifFail:, #open:ifFail:,
	#openDescriptor:
	* kernel/FileDescr.st: open files with #openDescriptor:ifFail:
	* kernel/FileStream.st: open files with #open:ifFail:

2002-04-18  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/VFS.st: fix bug in mkdir
	* examples/shell: replace with nice script by Alexander
	Lazarevic.
	
2002-04-16  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ArrayColl.st: move implementation of copying methods
	from SequenceableCollection to here.
	* kernel/Bag.st: fail when adding nil
	* kernel/Dictionary.st: correct #keyAtValue: to return nil if
	the value is not found.  Added #rehash.
	* kernel/AnsiDates.st: removed call to missing #isDuration method.
	* kernel/Float.st: strip trailing zeros from the #printString
	* kernel/HashedColl.st: whileGrowingAdd: -> addWhileGrowing:
	* kernel/LargeInteger.st: removed primitive in LargeInteger>>#/
	* kernel/OrderColl.st: raise errors for indices out of bounds
	in #add:afterIndex: & co.
	* kernel/PosStream.st: make #position answer ptr - 1 and adjust
	callers.  #next returns nil at end of stream.
	* kernel/SeqCollect.st: use #copyEmptyForCollect in #reverse;
	implement copying methods in terms of #add:
	* kernel/SortCollect.st: #occurrencesOf: result was off by one
	* kernel/WriteStream.st: allow extending the stream to previous
	values of the collection, truncate when answering the #contents
	instead.

2002-04-14  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.96.5 released
	
2002-04-13  Paolo Bonzini  (bonzini@gnu.org)

	* sunit/SUnit.st: show assertion results
	* kernel/SeqCollect.st: correct #replaceFrom:to:with: to accept
	only collections of the exact specified size, added #at:ifAbsent:
	* kernel/CharArray.st: added #startsWith:
	* kernel/ExcHandling.st: bug fixes
	
2002-04-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: implemented #negated to behave correctly
	with respect to negative zeros.  Print minus sign in front
	of negative zero.  Rewritten printing logic.
	* kernel/Number.st: added tests for NaNs and infinities;
	added #withSignOf:  Implemented #min: and #max:
	to behave correctly with respect to NaNs.  Added remarks
	on negative zeros
	
2002-04-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Fraction.st: skip GCDs when computing squared
	fractions, do them on lower numbers when adding and
	subtracting; try to avoid multiplications on comparisons.
	
	* kernel/SmallInt.st: implemented #highBit with a binary
	search, fixed result for negative powers of two (-4, -8, etc)
	* kernel/LargeInt.st: implemented #highBit separately for
	LargeNegativeIntegers and LargePositiveIntegers, fixed
	result for negative powers of two
	* kernel/Integer.st: removed generic implementation of #highBit

2002-04-01  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/LargeInt.st: define / in terms of GCD
	* kernel/Fraction.st: fix typo in #estimatedLog; compute
	cross GCDs for multiplication and exact division; implement
	#floor and #ceiling in terms of operations on the numerator
	and denominator.
	
2002-03-27  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/LargeInt.st: added support for primitives

2002-03-23  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Integer.st: implemented better factorial algorithm
	* examples/Publish.st: add `writing documentation for' in
	front of class names
	
2002-03-21  Paolo Bonzini  (bonzini@gnu.org)

        * compiler/STTok.st: skip _ inside numeric literals

2002-03-17  Paolo Bonzini  (bonzini@gnu.org)

        * kernel/VFS.st: created from File.st and Directory.st
        * kernel/FileStream.st: put in some VFS hooks
        * kernel/File.st: demand operations to a vfsHandler
        * kernel/Directory.st: demand operations to a vfsHandler

        * kernel/MethodDict.st: added class comment
        * kernel/SmallInt.st: added class comment
        * kernel/File.st: added class comment
        * kernel/Directory.st: added class comment
        * kernel/Browser.st: added class comment
        * kernel/AnsiDates.st: added missing class comments
        * kernel/AnsiExcept.st: added missing class comments
        * kernel/ValueAdapt.st: added missing class comments
        * kernel/ObjDumper.st: added missing class comments

2002-03-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PkgLoader.st: support a system-wide package file

2002-03-12  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.96.4 released
	
	* kernel/File.st: fix some misbehavior (not bugs, simply
	it was not very predictable) in the filename-manipulation
	methods.

2002-02-26  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Object.st: removed calls to #debug
	* kernel/CObject.st: removed calls to #debug

	* kernel/Behavior.st: switch to primitive names
	* kernel/Builtins.st: switch to primitive name
	* kernel/CFuncs.st: switch to primitive names
	* kernel/CObject.st: switch to primitive names
	* kernel/CompildMeth.st: print the primitive name
	in #inspect
	* compiler/STParser.st: parse primitive names
	* compiler/STParseNodes.st: include primitive names
	in STMethodBodyNodes

	* kernel/Behavior.st: instead of the progressive
	number CFunctionGensym, use the OOP to build keys
	for the CFunctionDescs dictionary.  Also use #{...}
	syntax to avoid namespace clashes
	* kernel/Builtins.st: removed CFunctionGensym
	* kernel/Object.st: removed CFunctionDescs from the
	pool dictionary list
	
2002-02-07  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileDescr.st: was not assigning to `count' in
	#read:numBytes:
	
	* kernel/FileDescr.st: commented out the code in #ensureWriteable
	because not all devices support sending SIGIO's when they
	become writeable -- notably, tty's under Linux :-(

2002-02-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PkgLoader.st: fix imprecise error message

2002-01-29  Paolo Bonzini  (bonzini@gnu.org)

        *** Version 1.96.3 released.

2002-01-22  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: added a missing period
	* kernel/ExcHandling.st: added a missing period
	* kernel/RootNamespc.st: added a missing period

2002-01-18  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: removed duplicated methods in
	ObjectMemory and SystemDictionary.
	* kernel/SysDict.st: removed initialization blocks
	* tests/low-level/objects.st: adapt

2002-01-17  Nigel Williams  (nigelw@wizardis.com.au)

	* kernel/FileDescr.st: use exact rather than conservative
	implementations of #isPipe and of end-of-file detection
	for pipes.
	* kernel/ProcSched.st: added timeSlice instance variable
	
2002-01-09  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SortCollect.st: to #beConsistent, use quicksort if
	nothing in the collection is sorted.

2002-01-04  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.96.2 released
	
2002-01-03  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Namespace.st: #associationAt: was returning
	the value.
	* kernel/Collection.st: use #copyEmptyForCollect
	to create the result collection

2002-01-02  Paolo Bonzini  (bonzini@gnu.org)

	* examples/RandomInt.st: removed
	* kernel/Random.st: merged examples/RandomInt.st's features.

2001-12-11  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: process correctly methods whose source
	code starts with whitespace (the compiler does not generate
	them, but STLoader does).
	* examples/StreamFilter.st: new file
	* kernel/HashedColl.st: use #copyEmpty: while growing

2001-11-29  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: use #asMetaclass to retrieve class methods
	since #class is inlined by the VM and cannot be overriden by
	proxies.

	* kernel/Metaclass.st: accept dot notation to indicate nested
	namespaces in the pool dictionaries string

2001-11-20  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.96.1 released
	
	* kernel/SysDict.st: Smalltalk usually contains a
	reference to itself, avoid infinite loops in #hash

2001-11-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: wrap #recompile: in an exception
	handler

2001-11-19  Nigel Williams  (nigelw@wizardis.com.au)

	* kernel/WriteStream.st: don't do #become: when growing
	a collection.
	
2001-11-13  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Debugger.st: prefixed # to symbols in arrays
	* examples/Lisp.st: prefixed # to symbols in arrays
	* examples/blox/Man.st: prefixed # to symbols in arrays
	* examples/blox/Tetris.st: prefixed # to symbols in arrays
	* examples/modules/gdbm-c.st: prefixed # to symbols in arrays
	* examples/modules/md5.st: prefixed # to symbols in arrays
	* examples/modules/regex.st: prefixed # to symbols in arrays
	* kernel/CFuncs.st: prefixed # to symbols in arrays
	* kernel/CStruct.st: prefixed # to symbols in arrays
	* kernel/CompildCode.st: prefixed # to symbols in arrays
	* kernel/DLD.st: prefixed # to symbols in arrays
	* kernel/Date.st: prefixed # to symbols in arrays
	* kernel/Directory.st: prefixed # to symbols in arrays
	* kernel/ExcHandling.st: prefixed # to symbols in arrays
	* kernel/File.st: prefixed # to symbols in arrays

2001-11-04  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileStream.st: adjust position after #next:
	
2001-10-31  Paolo Bonzini  <bonzini@amoia3.elet.polimi.it>

	* kernel/ValueAdapt.st: implemented Promise
	* kernel/BlkClosure.st: added #forkWithoutPreemption and
	deprecated #valueWithoutPreemption.

	* kernel/Date.st: implemented #readFrom:
	* kernel/Time.st: likewise
	* kernel/AnsiDates.st: likewise

	* kernel/Stream.st: implemented #skip:...
	* kernel/SeqCollect.st: implemented #identityIndexOf:...
	* kernel/Collection.st: implemented #identityIncludes:
	* kernel/IdentitySet.st: implemented #identityIncludes:
	as a synonym of #includes:

2001-10-26  Paolo Bonzini  <bonzini@amoia3.elet.polimi.it>

	* kernel/AnsiExcept.st: implemented EndOfStream.

2001-10-16  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/RootNamespc.st: added #nameIn:
	* kernel/Namespace.st: added #nameIn:
	* kernel/SysDict.st: added #nameIn:
	* kernel/ClassDesc.st: use the environment's #nameIn: method
	in ClassDescription>>#nameIn:
	* examples/Publish.st: support publication of entire namespaces

2001-09-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/AnsiExcept.st: implement system exceptions

2001-08-28  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CharArray.st: allow one to specify numbers
	or other objects as parameters to #bindWith:
	
2001-06-20  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Bench.st: modified results to those obtained
	with GCC 3.0's new back end (+15%!!!).
	
2001-06-12  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/MappedColl.st: doc fixes.
	
2001-06-07  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/AnsiDates.st: use exception handling instead of #error:
	* kernel/AnsiExcept.st: likewise
	* kernel/ArrayColl.st: likewise
	* kernel/Behavior.st: likewise
	* kernel/Builtins.st: likewise
	* kernel/ByteArray.st: likewise
	* kernel/ByteStream.st: likewise
	* kernel/CObject.st: likewise
	* kernel/Character.st: likewise
	* kernel/Class.st: likewise
	* kernel/ClassDesc.st: likewise
	* kernel/Collection.st: likewise
	* kernel/ContextPart.st: likewise
	* kernel/DLD.st: likewise
	* kernel/Dictionary.st: likewise
	* kernel/File.st: likewise
	* kernel/FileDescr.st: likewise
	* kernel/FileStream.st: likewise
	* kernel/Float.st: likewise
	* kernel/Integer.st: likewise
	* kernel/Interval.st: likewise
	* kernel/LargeInt.st: likewise
	* kernel/Link.st: likewise
	* kernel/LinkedList.st: likewise
	* kernel/MappedColl.st: likewise
	* kernel/Metaclass.st: likewise
	* kernel/MethodDict.st: likewise
	* kernel/Namespace.st: likewise
	* kernel/Number.st: likewise
	* kernel/OrderColl.st: likewise
	* kernel/OtherArrays.st: likewise
	* kernel/PkgLoader.st: likewise
	* kernel/PosStream.st: likewise
	* kernel/ProcSched.st: likewise
	* kernel/Process.st: likewise
	* kernel/Rectangle.st: likewise
	* kernel/RootNamespc.st: likewise
	* kernel/RunArray.st: likewise
	* kernel/SeqCollect.st: likewise
	* kernel/SortCollect.st: likewise
	* kernel/UndefObject.st: likewise
	* kernel/WriteStream.st: likewise

2001-06-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SortCollect.st: fix methods whose parameters
	need not be sortable so that they do not fail.  Fix
	#binarySearchFor:low:high: to handle sort-block that
	do not establish a total sort (a sorts before b, and
	vice versa, does not imply a = b).
	
2001-05-22  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Bench.st: adjusted for the new great
	performance improvements (inlined primitives).
	
2001-05-20  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/DLD.st: show failed linkages without duplicates.
	
2001-05-17  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Number.st: fixed bug in inequality (2 ~= 1.0).
	* kernel/FileStream.st: fixed bug in positioning the
	file pointer before flushing the write buffer.
	* kernel/Delay.st: removed a couple of debug printNls.

2001-05-17  Pahi Andras  (pahi@info-m.hu)

	* kernel/Builtins.st: return correct value for #perform:...
	if #doesNotUnderstand: is called.
	
2001-05-15  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.96 (alpha) released

2001-05-04  Paolo Bonzini  (bonzini@gnu.org)

	* examples/modules/regex.st: added a Regex class
	and declared reh_make_cacheable
	
2001-05-02  Dragomir Milivojevic  (dmilivoj@bigfoot.com)

	* examples/modules/regex.st: added more juice...

2001-04-28  Simon Britnell  (ughbash@yahoo.com)

	* kernel/DLD.st: ensure that each library and
	module is included in the DLD lists only once.

2001-04-24  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SharedQueue.st: add support for priority queues
	and #peek.
	* kernel/Delay.st: use SharedQueues.
	* kernel/BlkClosure.st: implement #ensure: (it does not
	ensure anything, but has correct semantics if no exception
	occurs)
	* kernel/Semaphore.st: use #ensure: in #critical:

2001-04-16  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileDescr.st: created from part of FileStream.st
	* kernel/FileStream.st: partially moved to FileDescr.st
	
2001-04-15  Paolo Bonzini  (bonzini@gnu.org)

	* examples/modules/md5.st: created

	* kernel/ObjMemory.st: removed the call to enableGC:.
	* kernel/Builtins.st: removed the definition of
	ObjectMemory>>#enableGC:.
	
2001-04-02  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: copied a few builtins to ObjectMemory,
	marked them as deprecated for SystemDictionary.
	* kernel/initialize.st: removed
	* kernel/ObjMemory.st: new file, created from initialize.st
	* kernel/SysDict.st: marked a few methods as deprecated	

	* kernel/Browser.st: send #gcMessage: to ObjectMemory
	instead of Smalltalk
	* kernel/Time.st: use ObjectMemory instead of init blocks
	* kernel/FileStream.st: use ObjectMemory to close files
	* Load.st: use ObjectMemory class>>#snapshot
	* Reload.st: use ObjectMemory class>>#snapshot
	
2001-03-28  Paolo Bonzini  (bonzini@gnu.org)

	* tests/ansi/AnsiProtos.st: removed
	* tests/ansi/AnsiSUnit.st: removed
	* tests/ansi/AnsiTests.st: upgraded
	* tests/ansi/load-tests.st: updated for new structure
	* examples/pepe.sed: added
	* examples/xml.sed: added

2001-03-20  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: removed the file-in primitives, added
	three-argument #fileOp: variants.
	* kernel/FileStream.st: rewritten for new buffering scheme,
	use #fileOp:... to file-in too.
	
2001-03-14  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CStruct.st: factored most of CStruct into CCompound.
	Added CUnion.
	
2001-02-23  Paolo Bonzini  (bonzini@gnu.org)

	*** Released version 1.95.3

2001-02-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: documented the ability of #perform: &
	friends to receive a CompiledMethod as their first parameter.
	* kernel/CStruct.st: made CStruct accept #{...} literals
	in the declaration.
	
2001-02-15   Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: raise an error on invalid C call-outs
	
2001-02-14   Paolo Bonzini  (bonzini@gnu.org)

	* gdbm/gdbm-c.st: new file (old gdbm.st)
	* gdbm/gdbm.st: new file
	
	* kernel/CStruct.st: allow subclasses of CStruct to be
	generated.
	* kernel/File.st: use new syntax for generating CStructs
	
2001-02-13   Paolo Bonzini  (bonzini@gnu.org)

	* sunit/SUnitTests.st: upgraded to version 3.0
	* sunit/SUnitPreload.st: ditto
	* sunit/SUnit.st: ditto
	* sunit/SUnitScript.st: restored from SUnit 2.7 (it is not in 3.0)
	
	* kernel/SortCollect.st: fixed bug in #indexOf:startingAt:ifAbsent:
	which raised an error if the collection was empty.
	* kernel/SeqCollect.st: raise an error if the starting index in
	#indexOf:startingAt:ifAbsent: is out of range.
	
2001-02-09   Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PosStream.st: added #isExternalStream
	* kernel/FileStream.st: added #isExternalStream

	* kernel/MthContext.st: print namespaces in backtraces

	* kernel/AnsiExcept.st: Exception's coreException is
	now a child of ExAll, rather than ExAll
	* kernel/ContextPart.st: use Process-wide unwindPoints.
	* kernel/ExcHandling.st: rewritten to use marked contexts
	instead of separate Dictionaries (faster, neater & less buggy).
	* kernel/Process.st: defined unwindPoints and its accessors.

2001-02-08   Paolo Bonzini  (bonzini@gnu.org)

	* kernel/HashedColl.st: keep the size of the collection
	a prime number (stolen from GLib).

2001-02-06   Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SeqCollect.st: correct #copyReplaceAll:with: which
	created wrong-sized collections.

2001-02-05   Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: avoid overfull hboxes due to missing
	hyphenation.  Also emit indexes.
	* kernel/AnsiDates.st: added missing comments.
	* kernel/AnsiExcept.st: added missing comments.
	* kernel/CObject.st: added missing comments.
	* kernel/Date.st: added missing comments.
	* kernel/DirMessage.st: added missing comments.
	* kernel/ExcHandling.st: added missing comments.
	* kernel/Number.st: added missing comments.
	* kernel/ObjDumper.st: added missing comments.
	* kernel/OtherArrays.st: added missing comments.
	* kernel/PosStream.st: added missing comments.
	* kernel/ProcSched.st: added missing comments.
	* kernel/ScaledDec.st: added missing comments
	* kernel/SortCollect.st: added missing comments.
	* kernel/SymLink.st: added missing comments.
	* kernel/Symbol.st: added missing comments.
	* kernel/Time.st: added missing comments.

2001-02-01   Paolo Bonzini  (bonzini@gnu.org)

	* kernel/DLD.st: added support for dynamically-loaded modules,
	removed the need for the ExternalFunctions variable.
	* kernel/PkgLoader.st: added support for dynamically-loaded modules
	* kernel/Directory.st: added class method #module

2001-01-31   Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: moved Set builtins to HashedCollection
	* kernel/File.st: added #isExecutable/#isAccessible
	* kernel/HashedColl.st: new file
	* kernel/OtherArrays.st: new file
	* kernel/Set.st: moved lots of it to HashedColl.st;
	added methods to do arithmetic.
	
2001-01-30   Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Directory.st: added #systemKernel
	* kernel/Time.st: fixed one-second skews in the millisecond clock

2001-01-30   Paolo Bonzini  (bonzini@gnu.org)

	*** Released version 1.95.1
	
2001-01-14  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/LargeInt.st: fixed bugs in GCD computation which
	caused it to be underestimated (bugs were in #bytesLeftShift:big:
	and #bytesRightShift:big:)
	* kernel/Set.st: recompute index when adding causes a Set to
	grow.
	* kernel/Dictionary.st: likewise.
	* kernel/LookupTable.st: likewise.

2001-01-11  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileStream.st: removed declaration of #species
	* kernel/ByteStream.st: declared #species to return String

2000-11-11  Jens Bjerrehuus (j.bjerrehuus@acm.org)

	* examples/Timer.st: fixed missing bang
	* kernel/Class.st: #addClassVarName: works even if no class variables
	were defined.
	* kernel/Object.st: #ifNotNil:ifNotNil: --> #ifNotNil:ifNil:
	* kernel/UndefObject.st: #ifNotNil:ifNotNil: --> #ifNotNil:ifNil:

2000-11-01  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Quine.st: new file -- sorry for lack of updates (the
	longest since I picked up maintenance), but I really had no free
	time anymore!

	* kernel/BlkClosure.st: define #valueWithoutPreemption
	* kernel/ProcSched.st: define (and print correctly) the names
	for the two extreme priorities, #rockBottomPriority and
	#unpreemptedPriority.
	* kernel/Symbol.st: define #rebuildTable, to rebuild and
	garbage collect the symbol table.
	* kernel/SymLink.st: define a creation method, #symbol:nextLink:
	-- this is probably the least modified file in GNU Smalltalk!!!

2000-09-11  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Dictionary.st: tried to lessen usage of dirty blocks
	* kernel/LookupTable.st: same as above
	* kernel/MethodDict.st: same as above
	* kernel/Set.st: same as above; plus, added #postLoad/#postStore
	* kernel/WeakObjects.st: same as above

2000-09-09  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: new meaning of primitive 90, so the name
	of the method that invokes it has changed to discardTranslation
	* kernel/MethodDict.st: use CompiledCode>>#discardTranslation
	* kernel/Point.st: fixed bug in #=

2000-09-09  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CharArray.st: use {} syntax.
	* kernel/Class.st: use {} syntax.
	* kernel/Date.st: use {} syntax.
	* kernel/Dictionary.st: use {} syntax.
	* kernel/ExcHandling.st: use {} syntax.
	* kernel/Symbol.st: use {} syntax.
	* kernel/Rectangle.st: use {} syntax.
	* kernel/PkgLoader.st: use {} syntax.

2000-09-07  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.8.3 released

	* kernel/ByteArray.st: added various shortcut methods
	(#uintAt: for #unsignedIntAt: etc.)
	* kernel/Builtins.st: removed ByteMemory methods.
	* kernel/ByteMemory.st: removed
	* kernel/Memory.st: added #bigEndian and various shortcut methods
	(#uintAt: for #unsignedIntAt: etc.)
	* kernel/WordMemory.st: removed

2000-09-01  Nigel Williams  (nigelw@wizardis.com.au)

	* kernel/DLD.st: fixed typo

2000-08-13  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ArrayColl.st: moved here old SequenceableCollection>>#copyFrom:to:
	* kernel/Collection.st: added #beConsistent
	* kernel/SeqCollect.st: reimplemented #copyFrom:to: to use #add:
	* kernel/OrderColl.st: added support for #beConsistent, added
	#basicRemoveFirst and #basicRemoveLast.
	* kernel/SortCollect.st: modified to use #beConsistent, fixed several
	buglets.

2000-08-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: added #basicNewInFixedSpace, #basicNewInFixedSpace:
	and #makeFixed.  Also added error handling to #become:
	* kernel/Behavior.st: added #newInFixedSpace and #newInFixedSpace:.

2000-07-18  Nigel Williams  (nigelw@wizardis.com.au)

	* kernel/CFuncs.st: added #address:
	* kernel/DLD.st: re-link and reset the addresses of
	all the externally defined functions.

2000-07-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: since usage of Undeclared in the kernel's
	source is now allowed, I removed the forward declarations.
	* kernel/Class.st: added support for versionable schemas.
	* kernel/CompildBlk.st: support usage of PluggableProxy.
	* kernel/CompildCode.st: implemented #blockAt:.
	* kernel/CompildMeth.st: support usage of PluggableProxy.
	* kernel/ObjDumper.st: implemented SingletonProxy and
	VersionableObjectProxy.  Declare usage of proxies for
	CompiledMethods, CompiledBlocks and Processor.  Rewritten
	parts to avoid non-local returns.
	* kernel/Processor.st: implemented #printOn: and #storeOn:

2000-07-09  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/DirMessage.st: added methods for PluggableProxy support.
	* kernel/ObjDumper.st: implemented AlternativeObjectProxy,
	PluggableProxy.  Added support for #postStore and used exception
	handling to ensure that it is always called.  Don't use #perform:
	which is slow with the JIT compiler and less flexible than blocks.
	* kernel/Object.st: added #postStore and methods for PluggableProxy
	support.

2000-07-04  Paolo Bonzini  (bonzini@gnu.org)
 
	* kernel/File.st: use the new DateTime and Duration classes
	* kernel/PkgLoader.st: use the new DateTime class
	* test/ansi/SUnitANSI.st: fixed a few false negatives

	* kernel/SeqCollect.st: implemented #keysAndValuesDo:
	* kernel/RunArray.st: use #keysAndValuesDo: instead of #doWithIndex:
	* kernel/CharArray.st: use #keysAndValuesDo: instead of #doWithIndex:
	* kernel/ObjDumper.st: use #keysAndValuesDo: instead of #doWithIndex:
	* kernel/Date.st: use #keysAndValuesDo: instead of #doWithIndex:
	* kernel/OrderColl.st: allow one to pass non-sequenceable collections
	to #addAll:


2000-07-03  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/AnsiExcept.st: new file
	* kernel/Bag.st: added #new: (incredible that it was not here)
	* kernel/ExcHandling.st: added BlockClosure>>#ifError: and more
	changes for ANSI conformance
	* kernel/Builtins.st: use Number>>#zeroDivide and #arithmeticError:
	to raise numeric exceptions.
	* kernel/Fraction.st: likewise
	* kernel/LargeInt.st: likewise
	* kernel/Number.st: added #zeroDivide and #arithmeticError:

	* test/ansi/Protos.st: new file
	* test/ansi/ProtosDB.st: new file
	* test/ansi/ProtosInit.st: new file
	* test/ansi/SUnit.st: new file
	* test/ansi/SUnitANSI.st: new file
	* test/ansi/SUnitCamp.st: new file
	* test/ansi/SUnitPreload.st: new file
	* test/ansi/SUnitTests.st: new file
	* test/ansi/run-tests.st: new file

2000-07-02  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Number.st: implemented additional #retry... methods
	because the JIT does not like #perform:, which is used in
	#retry:coercing:
	* kernel/Builtins.st: use the new retrying-coercion methods
	* kernel/Fraction.st: use the new retrying-coercion methods
	* kernel/LargeInt.st: use the new retrying-coercion methods

	* kernel/Number.st: #asInteger now uses #rounded for ANSI
	compatibility; #integerPart and #fractionPart added.

	* kernel/Date.st: some changes for ANSI compliance
	* kernel/PosStream.st: #close is not a stub anymore.
	* kernel/Time.st: some changes for ANSI compliance

	* kernel/AnsiDates.st: new file
	* kernel/ScaledDec.st: new file

2000-06-21  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkClosure.st: adjust #asContext: because of the
	change below.
	* kernel/BlkContext.st: removed the BlockContext>>#initBlock:
	method, replaced with a more JIT-friendly (and involute)
	class method called #fromClosure:parent:
	* test/intmath.st: fixed a couple of "must return..." comments
	which were actually wrong.

2000-06-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Collection.st: rewritten #as... methods to use cascading
	and to use the change to #replaceFrom:to:with: below.
	* kernel/SeqCollect.st: allow usage of #replaceFrom:to:with: with
	unordered collections 
	* kernel/SortCollect.st: to leave no holes at the front of the
	collection, set firstIndex to 1 in #initIndices and #makeRoomLastFor:
	(new method).  Implemented heap algorithms.

2000-06-18  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Collection.st: no need to call #firstIndex:lastIndex:
	in #asSortedCollection: because of the change in SortCollect.st
	(see below)
	* kernel/Delay.st: reversed the ordering of the Queue's sortBlock
	because #removeLast is faster then #removeFirst (it saves memory
	because slots freed by #removeLast are reused by #add:, unlike
	slots freed by #removeFirst).
	* kernel/OrderColl.st: when removing the last item, call
	#initIndices

2000-06-17  Paolo Bonzini  (bonzini@gnu.org)

	*** Released versions 1.95 (development) and 1.7.5 (stable)

2000-06-03  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Bench.st: do one more iteration (9 instead of 8) if the
	JIT compiler is detected (eh eh eh...)
	* kernel/ContextPart.st: added methods to detect the presence of the
	JIT compiler

2000-06-03  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Array.st: #isArray returned false instead of true
	* kernel/BlkContext.st: initialize returnIP in #initBlock:, using
	the new CompiledCode>>#compileToNativeCodeFor: method
	* kernel/Builtins.st: declare CompiledCode>>#compileToNativeCodeFor:
	(primitive 90)

2000-05-28  Paolo Bonzini (bonzini@gnu.org)

	* examples/Publish.st: output to docs/classes.texi instead of
	docs/classes.txi

2000-05-12  Paolo Bonzini (bonzini@gnu.org)

	* kernel/ByteStream.st: avoid creating LargeIntegers to retrieve
	negative 32-bit numbers.  This sped up the loading of collation
	data by 10 times!

2000-05-09  Paolo Bonzini (bonzini@gnu.org)

	* kernel/RootNamespc.st: #addSubspace: is now a no-op
	if a subspace with the given name already exists.
	 
2000-05-04  Paolo Bonzini (bonzini@gnu.org)

	*** Version 1.94.90 released

2000-04-27  Paolo Bonzini (bonzini@gnu.org)

	* kernel/LargeInt.st: fixed bug in #~=

2000-04-23  Paolo Bonzini (bonzini@gnu.org)
 
	* kernel/FileSegment.st: changed length variable to size, added
	#withFileDo:
	* kernel/SortCollect.st: removed a few non-local returns

2000-04-12  Paolo Bonzini (bonzini@gnu.org)

	*** Version 1.7.4 released

	* kernel/Behavior.st: added private method #sharedPoolDictionaries
	* kernel/Class.st: added private method #sharedPoolDictionaries
	* kernel/Metaclass.st: added private method #sharedPoolDictionaries,
	used it to fix bug with redefinition of classes with pool dictionaries

2000-04-10  Paolo Bonzini (bonzini@gnu.org)

	* examples/CStream.st: moved to compiler/STFormatter.st
	* examples/IndStream.st: moved to compiler/STFormatter.st
	* kernel/Symbol.st: perfected #printOn: (to be perused by formatter...)

2000-03-23  Paolo Bonzini (bonzini@gnu.org)
 
	*** Version 1.7.3 released

2000-03-11  Paolo Bonzini (bonzini@gnu.org)
 
	*** Version 1.7.2 released

2000-02-24  Paolo Bonzini (bonzini@gnu.org)

	* kernel/Delay.st: fixed race condition when garbage collection
	suspended the interpreter and Delay class>>#timeout: was called
	when the process should have been already resumed.

2000-02-22  Paolo Bonzini (bonzini@gnu.org)

	*** Version 1.7.1 released

2000-02-22  Paolo Bonzini (bonzini@gnu.org)

	* kernel/File.st: added methods to test file accessing modes.

2000-02-21  Paolo Bonzini (bonzini@gnu.org)

	* kernel/Builtins.st: added a few time-zone related methods.
	* kernel/Time.st: added a few time-zone related methods.

2000-02-15  Paolo Bonzini (bonzini@gnu.org)

	*** Version 1.7 released

Tue 02 01  09:17:43 2000  Paolo Bonzini (bonzini@gnu.org)

	* kernel/CompildCode.st: print bytecode 132 according to the new
	coding

2000-01-31  Paolo Bonzini (bonzini@gnu.org)

	*** Sixth beta of 1.7 (labeled 1.6.85) released

1999-12-31  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: use identity for RootNamespaces' equality
	and the #identityHash for hashing
	* kernel/Symbol.st: sending #copy, #shallowCopy or #deepCopy to
	a symbol was actually answering a String!!

2000-01-28  Paolo Bonzini (bonzini@gnu.org)

	* kernel/BlkContext.st: fixed #initBlock: for CompiledBlocks
	* kernel/Builtins.st: removed declarations of #adjPtrBy: and
	#ptrDiff:... as primitives
	* kernel/CObject.st: implemented #adjPtrBy: and #ptrDiff:... in
	Smalltalk

2000-01-24  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkClosure.st: access lots of things through CompiledBlocks.
	* kernel/CompiledBlk.st: created.
	* kernel/CompildCode.st: created from CompildMeth.st.
	* kernel/CompildMeth.st: removed `class' and `selector'
	variables, which are now accessed indirectly through the
	descriptor (`MethodInfo') object.  Moved lots of code to
	kernel/CompildCode.st
	* kernel/MethodInfo.st: added `class' and `selector' variables

2000-01-20  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: Integer primitives now defined in
	SmallInteger.
	* kernel/Integer.st: moved part to SmallInt.st
	* kernel/LargeInt.st: removed #isIdentity and #isSmallInteger
	(now they are not defined anymore in Integer, but rather in
	SmallInteger which is not a superclass of LargeInteger).
	* kernel/Number.st: added abstract #asFloat method.
	* kernel/SmallInt.st: created from Integer.st
	* test/intmath.st: `Integer largest' --> `SmallInteger largest';
	`Integer smallest' --> `SmallInteger smallest';

2000-01-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ByteArray.st: C-like accessors (e.g. #intAt:) had
	sizeof(long) hardcoded as 4. Fixed.
	* kernel/Behavior.st: fixed problem with #allInstances, when
	instances of the class are created during its execution.
	* kernel/CompildMeth.st: use ByteArray literal in #accesses:
	just to show that it is possible.
	* kernel/Date.st: use ByteArray literal in
	#daysInMonthIndex:forYear: just to show that it is possible.

2000-01-08  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkContext.st: added #isEnvironment
	* kernel/ContextPart.st: use #isEnvironment in #environment,
	added #isEnvironment as an abstract method
	* kernel/MthContext.st: added #isEnvironment

	* kernel/CompildMeth.st: print new bytecode 143

1999-12-29  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ContextPart.st: set to nil the stack slots that become
	accessible because of sending #sp: to a context.
	* kernel/FileStream.st: added #stdin/#stdout/#stderr accessors
	for global variables.
	* kernel/Transcript.st: class name changed to TextCollector
	for consistency with other environments

1999-12-28  Paolo Bonzini  (bonzini@gnu.org)

	*** Fifth beta of 1.7 (labeled 1.6.84) released

1999-12-27  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Debugger.st: new implementation of #blockCopy: (bytecode
	200).
	* kernel/Builtins.st: primitive 80 (blockCopy:) is now used by
	BlockClosure.

1999-12-27  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkClosure.st: new `method' instance variable
	* kernel/ContextPart.st: removed methodClass variable,
	replaced implementation of the accessor to retrieve the class
	from the method.
	* kernel/MthContext.st: new implementation of #selector.

1999-12-26  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: support for the new `class' and `selector'
	variables in CompiledMethods.
	* kernel/ClassDesc.st: support for the new `class' and `selector'
	variables in CompiledMethods.
	* kernel/CompildMeth.st: new `class' and `selector' variables in
	CompiledMethods.
	* kernel/MethodDict.st: encapsulated #removeAssociation: which
	can be dangerous just like #removeKey:ifAbsent:.

1999-12-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkContext.st: removed home, moved receiver to ContextPart.
	* kernel/ContextPart.st: removed hasBlock, made the structure of
	contexts more uniform (only two variables lie in the subclasses)
	* kernel/MthContext.st: moved method, methodClass, receiver to
	ContextPart.

1999-12-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: hacked Float>>#hash so that '2 hash = 2.0 hash'
	* kernel/CompildMeth.st: bit 30 is now part of the method flags.

1999-12-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/WordMemory.st: added accessor for the `Bigendian' global
	variable.

1999-12-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: ANSI asks for 65535 instance variables, so I
	shifted the instance specification's `number of instance vars' field
	right by three bits (now 262143 variables are possible).
	* kernel/Directory.st: added methods to manage file names.
	* kernel/ExcHandling.st: neater implementation of #pass and
	#signalWithArguments:, more encapsulation in the
	ExceptionHandler class.
	* kernel/File.st: added methods to manage file names; plus,
	use the strerror C function.

1999-11-26  Paolo Bonzini  (bonzini@gnu.org)

	*** Fourth beta of 1.7 (labeled 1.6.83) released

1999-11-23  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: fixes for Texinfo 4.0 (which produces
	HTML too, not just TeX and Info).
	* kernel/Class.st: GNU Smalltalk's #variableWordSubclasses:
	are actually IBM Smalltalk's #variableLongSubclasses: (fix
	to the compatibility methods).

1999-11-21  Paolo Bonzini  (bonzini@gnu.org)

	* examples/bench.st: fixes to make measurements more constant.
	See `e)' in the discussion of the results at the top of the
	file.
	* kernel/ClassDesc.st: #fileOutCategory:toStream: was ending
	a category with `!!' instead of `! !'
	* kernel/FileStream.st: added #nextPutAllFlush:
	* kernel/Transcript.st: use #nextPutAllFlush: when stdout is
	the transcript.

1999-11-19  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Prolog.st: added

1999-11-18  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: better handling of mutation -- create
	a lightweight class with the old representation, change the
	object to it and forget #specialBasicAt:.
	* kernel/Object.st: better handling of mutation -- see above.

1999-11-17  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Lisp.st: added
	* kernel/CharArray.st: moved implementation of #asNumber to
	Number>>#readFrom:
	* kernel/Number.st: #readFrom: reads a Number from the current
	stream position, not from its start (correct semantics)

1999-11-14  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Bench.st: more comparisons added
	* kernel/CompildMeth.h: move flag bits to high end, so that there is
	place for two additional bits if needed
	* kernel/BlkContext.c: BlockContexts now hold the receiver and the
	BlockClosure instead of the number of arguments and temporaries.

1999-11-06  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: support for namespaces

1999-11-01  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ClassDesc.st: moved #nameIn: from Class.
	* kernel/Class.st: moved #nameIn: to ClassDescription.

1999-10-31  Paolo Bonzini  (bonzini@gnu.org)

	*** Third beta of 1.7 (labeled 1.6.82) released

1999-10-25  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SeqCollect.st: added optimized version of #anyOne

1999-10-22  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: use the last decimal digit as a guard digit
	when printing
	* kernel/SeqCollect.st: added #do:separatedBy:

1999-10-21  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: moved a few String primitives to CharacterArray
	* kernel/Object.st: added #isCharacterArray
	* kernel/String.st: moved most code to CharArray.st
	* kernel/CharArray.st: created by refactoring of String.

1999-10-20  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Object.st: added #display* methods.
	* kernel/String.st: added #displayOn: and #displayString methods.
	* kernel/Symbol.st: added #displayOn: and #displayString methods.
	* kernel/Character.st: added #displayOn: methods.

1999-10-13  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Buffers.st: created from tcp/ReadBuffer.st and
	tcp/WriteBuffer.st

	* kernel/Builtins.st: Set's #primXXX methods moved here
	* kernel/Float.st: #hash was not always returning integers
	* kernel/Set.st: removed #primXXX

1999-10-11  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: added missing #integerPart (`num := self
	integerPart' was `num := self') in code to print the Float's
	integer part -- the solution to the printing bug that I had
	tried on Oct 2nd was wrong.
	* kernel/WeakObjects.st: added #postLoad to WeakArray to make
	the array weak again.

1999-10-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Association.st: parts moved to kernel/LookupKey.st.
	* kernel/Builtins.st: added comment for the new behavior of file-ins
	regarding undeclared globals (usage of the `Undeclared' dictionary).
	* kernel/FileStream.st: same as above.
	* kernel/LookupKey.st: recreated from parts of kernel/Association.st.
	* kernel/PkgLoader.st: added ability to ignore undeclared call-outs
	(useful for producing documentation without recompiling the VM).

1999-10-09  Paolo Bonzini  (bonzini@gnu.org)

	*** Second beta of 1.7 (labeled 1.6.81) released

	* kernel/Builtins.st: added primitive to flush the dynamic
	translator's code cache. Fail on `anInteger asOop'.
	* kernel/CompildMeth.st: use the primitive above.

1999-10-07  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: use MethodDictionaries; removed calls to
	#flushCache since they are in MethodDict.st
	* kernel/Builtins.st: removed definition of primitives in
	Array that were there to minimize the possibility that removals
	inside the MethodDictionary of a class crashed the system.
	* kernel/MethodDict.st: created

1999-10-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ExcHandling.st: added helper class ActiveHandlersList
	to avoid messy usage of ReadStreams and #copy.
	* kernel/Float.st: added #ln10 class method to answer 2.302...
	* kernel/Number.st: added #log.
	* kernel/ObjDumper.st: fixed bugs in namespace handling.

1999-10-04  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: remove subclasses of CStruct from
	the manual.
	* kernel/CompildMeth.st: #literals was erroneously going
	into an infinite loop (^self literals).

1999-10-02  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: fixed \\ (was returning the floor of
	the result) and printing (the last integer digit of numbers
	with a large decimal part, such as 4.999, was misprinted --
	5.999 in this case)
	* kernel/Number.st: fixed rounded (was using `truncated'
	instead of `floor')
	* test/intmath.st: added more // and \\ tests.
	* test/floatmath.st: added // and \\ tests.

1999-09-30  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkClosure.st: added #repeat
	* kernel/Date.st: added #shortNameOfMonth
	* kernel/Stream.st: moved methods that traditionally were in
	PositionableStream, but which I implemented without using
	PositionableStream protocol, here; added #splitAt:
	* kernel/PosStream.st: opposite of above

1999-09-25  Paolo Bonzini  (bonzini@gnu.org)

	*** First beta of 1.7 (labeled 1.6.80) released

1999-09-23  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Set.st: initialize in new method #initialize:
	* kernel/LookupTbl.st: initialize in #initialize:
	* kernel/WeakObjs.st: initialize hashed collections in #initialize:
	* kernel/RootNamespc.st: initialize #Super key in #setSuperspace:

1999-09-19  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: use a WeakArray in #allInstances
	* kernel/Builtins.st: moved all `Smalltalk at: #... put: nil' declarations
	here.  Fixed missing dot in Behavior>>#basicNew:
	* kernel/CType.st: CArrayCType subclass of CPtrCType
	* kernel/LookupTbl.st: created from IdentDict.st
	* kernel/IdentDict.st: mostly moved to LookupTbl.st
	* kernel/SeqCollect.st: moved #swap:with: to SortedCollection -- it was
	used just there, and meant to be used just there.
	* kernel/SortCollect.st: #swap:with: moved here.
	* kernel/WeakObjects.st: created

1999-09-18  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Bag.st: added #sortedByCount.
	* kernel/BlockClosure.st: don't make copies (answer the original object)
	* kernel/Character.st: added #isPunctuation
	* kernel/UndefObj.st: nil should not have dependents

1999-09-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Directory.st: added #create:
	* kernel/Object.st: added #broadcast:with:with:
	* oodb/*: added
	* test/chars.st: made more comprehensive
	* test/exceptions.st: added
	* test/sets.st: added
	* test/*.base: renamed to *.ok for easier life on 14-char systems.

1999-09-14  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Case.st: added #ifEqualTo:do:
	* examples/SortCriter.st: added
	* kernel/ObjDumper.st: uses preStore and postLoad.
	* kernel/Object.st: definition of preStore and postLoad.
	* kernel/SortCollect.st: Added DefaultSortBlock to SortedCollection;
	uses preStore and postLoad.

1999-09-12  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: variable instanceVariables came here from
	ClassDescription.
	* kernel/Class.st: variables name/comment/category/environment
	moved to Class (they make no sense in Metaclass, so why were they
	in ClassDescription?)
	* kernel/ClassDesc.st: combination of the two above.

1999-09-11  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ClassDesc.st: implementation of namespaces
	* kernel/Class.st: implementation of namespaces
	* kernel/Namespace.st: created from Behavior.st and SysDict.st
	* kernel/Object.st: Smalltalk is no longer a pool dictionary.
	* kernel/RootNamespc.st: created from Behavior.st and SysDict.st
	* kernel/SysDict.st: moved something to Namespace.st and RootNamespc.st
	* kernel/UndefObject.st: implementation of namespaces

1999-09-10  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Queens.st: added #do: to NullQueen.
	* kernel/BlkClosure.st: BlockClosures are now variableWordSubclasses
	since the previous encoding was incompatible with the code to switch
	the endianness in a saved image.
	* kernel/PosStream.st: added support for Cr/Lf terminators in #nextLine.

1999-09-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Delay.st: #idle method now lies in ProcessorScheduler.
	* kernel/ProcSched.st: added support for idle block registration.

1999-08-31  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Collection.st: added #with:collect:
	* kernel/ArrayColl.st: added #with:collect:, removed duplicate definition
	of #copyWith:

1999-08-29  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.6.2 released.

1999-08-26  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: finally got hierarchy tree formatting to work.
	* kernel/DLD.st: don't define the `DLD' feature since DLD.st is always
	loaded now.  The feature is defined in lib/dict.c if the DLD functions
	are not stubs.
	* kernel/Float.st: use CDoubleMin and CDoubleMax.
	* kernel/PkgLoader.st: more meaningful error messages (`package
	not available' instead of `key not found').

1999-08-08  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: `Smalltalk snapshot' primitive (250) removed
	-- the new ImageFileName global makes it redundant.
	* kernel/File.st: added polite accessor to the ImageFileName global
	(File class>>#image).
	* kernel/SysDict.st: `Smalltalk snapshot' primitive (250) is now
	implemented in terms of the new ImageFileName global.

1999-08-07  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/File.st: declare `unlink' (valid only for files) instead of
	`remove' (which works for directories too) to be used to implement
	File class>>#primRemove:

1999-08-07  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Case.st: provided by Ulf Dambacher.
	* examples/EditStream.st: provided by Ulf Dambacher.
	* examples/Watchdog.st: provided by Ulf Dambacher.
	* kernel/Date.st: handle dates like 0-Feb-1989.
	* kernel/MappedColl.st: added `domain' and `map' accessors.
	* kernel/Transcript.st: in #next:put:, #new:withAllPut: (which does not
	exist) was sent to String instead of #new:withAll:
	* kernel/ValueAdapt.st: added NullValueHolder.

1999-07-14  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: removed conditional code so that images produced
	by computers with different endianness can be used.
	* test/delays.st: created from test/processes.st since it is the
	only part that fails under some architectures (e.g. SunOS)

1999-06-25  Paolo Bonzini  (bonzini@gnu.org)

	*** Bug-fixing version 1.6.1 released.

1999-06-17  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.6 released.

Wed 06 09  12:48:21 1999  Pahi Andras  (pahi@mozart.eet.bme.hu)

	* kernel/DLD.st: fixed lots of stupid bugs (misspelled method names
	and more)
	* test/arrays.st: renamed (used to be array.st) so that it works
	in case-insensitive filesystems.
	* test/classes.st: renamed (used to be class.st) for same reason.
	* test/processes.st: renamed (used to be process.st) for same reason.

1999-06-03  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: #at:put: for C strings and aggregates
	(arrays/ptrs) can take both a smalltalk object and a CObject.
	* kernel/CObject.st: moved some primitives to Builtins.st
	* kernel/CompildMeth.st: #storeOn: stored bytecodes as an
	Array (not a ByteArray).
	* kernel/Object.st: #storeOn: now uses the Object's validSize.

1999-05-31  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CompildMeth.st: added #stripSourceCode.
	* kernel/Date.st: some bug fixes.
	* kernel/MethodInfo.st: added #stripSourceCode.

1999-05-24  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Date.st: Removed iterative algorithms, replaced with numerical
	ones proposed by Jeff Rosenwald (JeffRose@acm.org).

1999-05-23  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Debugger.st: Added new bytecodes

1999-05-13  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: Finished revamped Floats -- added #hash

1999-05-08  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Transcript.st: Moved here from blox. Modified to initially
	set up a Transcript on stdout.
	* kernel/Object.st: Changed #print and #store to work with the Transcript
	object.

1999-05-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ExcHandling.st: exception handlers are now per process.
	* kernel/Fraction.st: added code to test for NaNs in #asFloat.  Also, now
	I use #quo: in #reduced.
	* kernel/LargeInt.st: misc bug fixes.
	* kernel/Process.st: added exceptionHandlers variable.
	* kernel/Object.st: added #ifNil:, #ifNotNil: and companions.
	* kernel/UndefObject.st: added #ifNil:, #ifNotNil: and companions.

1999-05-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: added stuff to print/store infinite values and NaNs
	* kernel/LargeInt.st: changed divide:using: and reverseStringBase:on:
	to special case divisions by small (< 256) divisors.
	* kernel/WriteStream.st: fixed #size -- was returning 1 more than the
	correct value. For example, "String new writeStream size" returned 1.

1999-05-03  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: changed the system message #booleanRequired to
	#mustBeBoolean for coherence with the Blue Book (I had not noted
	that passage).

1999-05-02  Luciano Esteban Notarfrancesco  (lnotarfr@dc.uba.ar)

	* kernel/SortCollect.st: new algorithm for includes: and
	occurrencesOf:
	* kernel/Number.st: new algorithm for raisedToInteger: and
	raisedTo:.  Added isRational.
	* kernel/Fraction.st: added isRational.  Generality multiplied by 100.
	* kernel/Integer.st: gcd: and lcm: always return positive numbers.
	Added isRational.  Generality multiplied by 100.
	* kernel/Float.st: generality multiplied by 100.
	* kernel/LargeInt.st: generality multiplied by 100.

1999-04-29  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CompildMeth.st: added code to handle the 142 (replace stack
	top) bytecode in the #accesses: method.

1999-04-27  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.5.beta3 released.

1999-04-22  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ArrayColl.st: added #new:withAll: .
	* kernel/Builtins.st: added #at:/#at:put:/#basicAt:/#basicAt:put: to
	Array.  They are needed so that, when updating method dictionaries,
	GST doesn't look for methods inherited by Array and defined in
	method dictionaries that are still in a semi-updated state (e.g.
	this happens when removing Collection's #inspect method, during Blox's
	load).  Thanks to Christopher Painter-Wakefield for signaling this.

1999-04-20  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CompildMeth.st: added code to print the nop bytecode (139)

1999-04-16  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ContextPart.st: added hasBlock instance variable, moved
	its accessor here (used to be in the subclasses)
	* kernel/MthContext.st: removed hasBlock instance variable and
	its accessor
	* kernel/BlkContext.st: same as above
	* kernel/Builtins.st: moved in (as methods in SystemDictionary) the
	two primitives that were in examples/PerfMonitor.st
	* examples/PerfMonitor.st: nuked; its contents are now part of
	Builtins.st
	* cxtnsn/DLD.st: Modified so that if you use defineCFunc:... and
	DLD is used, unresolved functions are searched in dynamically linked
	libraries.  One day I'll make it use dlopen and dlsym.

1999-04-10  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.5.beta2 released.
	* kernel/Time.st: remove GMT from printOn: (see changes in sysdep.c).

1999-04-08  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: added some comment guessing.
	* kernel/CObject.st: merged CPtr and CArray into CAggregate at last.
	* kernel/SortCollect.st: fixed implementation of pivot selection.
	* kernel/File.st: fixed file times to be returned relative to 1/1/2000
	to avoid possible overflows (which would have happened around 2004
	on 32-bit machine, and around 8.000.000.000 AD on 64-bit ones...).

1999-03-15  Paolo Bonzini  (bonzini@gnu.org)

	*** Version 1.5.beta1 released.
	* examples/Publish.st: some bug fixes now that we use it to generate
	GST's manual.

1999-03-13  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: added DocumentationClassPublisher (refactored
	from HTMLClassPublisher) and TexinfoClassPublisher.

1999-02-27  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: Added ProcessorScheduler>>#isTimeoutProgrammed
	as part of the changes below for Delay.
	* kernel/Delay.st: Added backgroundProcess in Delay's
	#startDelayLoop class method, and added #idle class method.
	Fixed so that delays across two evaluations (i.e. an evalua-
	tion starts, a delay is pending when it ends, and then another
	evaluation starts which must discard that delay and accept
	new ones) works.
	* examples/Dinner.st: ditto

1999-02-26  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Class.st: #removeClassVarName: referred to non-
	existent method #classVariables (instead of #classPool)

1999-02-23  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Symbol.st: Changed storeOn: to properly handle #'ab cd'
	symbols and printOn: to use the version inherited from String

1999-02-22  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Bag.st: printOn: sent `print: ($ )' instead of `space'
	* examples/Dinner.st: created.
	* kernel/Process.st: Added various accessors for the regression
	tests, changed many things because of changes in the VM,
	new experimental interrupt mechanism.
	* kernel/ProcSched.st: Added various accessors to account for the
	changes in Process.
	* kernel/Builtins.st: Moved #blockCopy:... to ContextPart

1999-02-19  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Queens.st: created.

1999-02-17  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SysDict.st: Added class accessors (eg allBehaviorsDo:)

1999-02-16  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CompildMeth.st: Changed for new representation of
	literals

1999-02-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/PosStream.st: Fixed #reset to use #position:
	* kernel/FileStream.st: Added selectors for new style opening
	modes (FileStream open: 'foo' mode: FileStream read)

1999-02-14  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ContextPart.st: finally got the unwinding system to
	work.

1999-02-13  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Symbol.st: Added isSymbolString:
	* kernel/CType.st: Great! Factored out everything in CScalarCType!
	C*Type are now instances of CScalarCType. So we save a source of
	confusion (is it CByteCType or CByteType?!?) and ten classes which
	were carbon copies.

1999-02-12  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: added HTML output

1999-02-09  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Tokenizer.st: Removed recording, which was way too
	slow and in fact not even needed by the compiler.
	* kernel/Behavior.st: Fixed bug in #extractEvalChunk: not
	handling unterminated string literals.
	* kernel/Collection.st: Added #removeAll:ifAbsent:

1999-02-08  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ExcHandling.st: fixed bug with unwind mechanism: in
	code like [ [ 1/0 ] valueWithUnwind ] on: ExAll do: [ :sig | ... ]
	the exception handler must NOT be used - in other words, if we
	are inside a #valueWithUnwind, outer exception handlers are
	momentarily disabled.
	* kernel/PkgLoader.st: created.
	* Load.st: created.
	* Reload.st: created.

1999-02-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ExcHandling.st: added ExUserBreak.
	* kernel/LinkedList.st: Fixed missing dot problem - probably I
	had introduced it earlier.

1999-02-04  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ContextPart.st: fixed bug in the unwinding system
	(using SystemDictionary>>#halt did not work properly)

1999-02-01  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: 'self perform: <a Message>' now acts
	like '<a Message> sendTo: self' - stole from Dolphin Smalltalk:
	not particularly useful, but makes GST more `universal'
	* kernel/Symbol.st: Added with:...
	* kernel/ObjDumper.st: Changed superclass to Stream. Added proxy
	feature.
	* kernel/IdentDict.st: Created a separate version of growBy:
	which does not involve Associations (which are not used by
	IdentityDictionaries).  This halved the execution time for
	Andreas Klimas' little torture test (examples/mixed/torture.st),
	performing half the GCs.
	* kernel/FileStream.st: Fixed open and popen to use basicNew
	instead of new. new is now disabled.

1999-01-31  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Switched FileStream to returning nil on
	failure only if errno = 0. If not, it is probably better to check
	the errno. Things like search paths, etc, can be still implemented
	(from the highest level to the lowest)
	a) by using methods like open:mode:ifFail:
	b) by using new exception handling mechanisms
	c) by using methods like fileOp:ifFail: - see open:mode:ifFail:

1999-01-29  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CObject.st: Added CBoolean.
	* kernel/CType.st: Added CBooleanCType
	* kernel/Boolean.st: Added `self subclassResponsibility' methods
	* kernel/True.st: Added asCBooleanValue
	* kernel/Browser.st: Changed the BrowserClassesValid global
	(brrr!!!!) to a more sedate-sounding class variable.

1999-01-28  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/FileStream.st: #close now sets the `file' instance variable
	to nil, to prevent multiple closes of the same file. At least under
	Win32 this does not usually cause SIGSEGV or similar: however you
	might end up closing the file descriptor for some other open file,
	resulting in difficult to catch bugs
	* kernel/Behavior.st: Added a few goodies needed to make lightweight
	classes work a little better (#new class method, #name instance method)
	* kernel/LargeInt.st: Added ~=

1999-01-27  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Date.st: Changed now that assignment to argument is invalid.
	Fixed asSeconds to answer seconds from 1/1/1901 - with LargeIntegers,
	there's no reason to answer seconds from 1/1/1970.

1999-01-26  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/File.st: Changed now that assignment to argument is invalid
	* kernel/CompildMeth.st: also
	* kernel/Integer.st: also
	* kernel/ObjDumper.st: also
	* kernel/OrderColl.st: also
	* kernel/Point.st: also
	* kernel/Rectangle.st: also
	* kernel/SeqCollect.st: also
	* kernel/Set.st: also
	* kernel/String.st: also
	* kernel/LargeInt.st: also
	* kernel/Collection.st: Changed now that assignment to argument is
	invalid. Switched to quicksort for implementing #asSortedCollection:.
	* kernel/SortCollect.st: Changed now that assignment to argument is
	invalid. Switched to quicksort for implementing #asSortedCollection:.

1999-01-18  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: Fixed up floating point printing to round
	correctly. It should work now...
	* kernel/LargeInt.st: Implemented a faster way to print
	LargeIntegers: I split them into small parts which stay into a
	small integer: this usually results in executing a lot fewer
	bytecodes (650,000 instead of 5,500,000 to print 1e36)!!
	* kernel/Integer.st: Added special floorLog: implementation. Added
	largest/smallest.

1999-01-16  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Tokenizer.st: Added line counting
	* kernel/ByteStream.st: Created.
	* kernel/ByteArray.st: Added Memory-style accessors. Very
	interesting!!

1999-01-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/WriteStream.st: Removed maxSize instance variable

1999-01-13  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/SysDict.st: Added access to the command line arguments.
	* kernel/CFuncs.st: Added getArgc and getArgv

1998-12-15  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Publish.st: added class hierarchy (previously methods
	laid in ClassDescription).

1998-12-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ObjDumper.st: Added support for byte objects with fixed
	instance variables.

1998-12-09  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/File.st: Changed struct Stat format for portability.
	* kernel/LargeInt.st: fixed bug in basicRightShift:

1998-12-01  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Object.st: Added postCopy

1998-11-29  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Metaclass.st: Finished integration of class-instance
	variables

1998-11-27  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Character.st: Added lookup table for speed

1998-11-25  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Rectangle.st: Changed #intersect to make it work ;-)
	* kernel/Builtins.st: Added String>>hash and ByteArray>>hash

1998-11-24  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ExcHandling.st: now uses ContextPart class>>#unwind
	mechanism
	* examples/PushBack.st: Added #position and #position:
	* kernel/Metaclass.st: Added methods for class pool/shared pools,
	which delegate their work to Class

1998-11-23  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkContext.st: switched superclass to ContextPart.
	* kernel/MthContext.st: switched superclass to ContextPart.
	* kernel/ContextPart.st: created.

1998-11-18  Paolo Bonzini  (bonzini@gnu.org)

	* examples/Debugger.st: added experimental bytecode simulator.

1998-11-14  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CStruct.st: Changed to subclass of CObject and changed
	implementation of inspection for easier port to Blox.

1998-11-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/UndefObject.st: Added class creation methods.
	* kernel/Object.st: Added class declaration now that nil defines
	class creation statements
	* kernel/Autoload.st: Class directly created as subclass of nil.

1998-11-05  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Metaclass.st: Added instanceVariableNames: for class-instance
	variables. Modified mutation policy to be a bit more restrictive but
	logical.

1998-10-21  Paolo Bonzini  (bonzini@gnu.org)

	* examples/CompFileSeg.st: created.

1998-10-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/CObject.st: Added CSmalltalk.  Turned to a variable word
	subclass to make access to the address simpler and not cause SIGSEGVs
	on trying to access the address instance variable as an object
	* kernel/CType.st: Added various storeOn: methods, and classes
	CScalarCType and CSmalltalkCType

1998-10-13  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Float.st: Changed to a variable byte subclass.
	* kernel/Number.st: Added #zero and #unity

1998-10-12  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkClosure.st: created from BlkContext.st.
	* kernel/SeqCollect.st: Switched to copyEmpty: about a week ago.
	Now tried to change to:do: to whileTrue: in a desperate attempt
	at gaining more speed ;-)
	* kernel/BlkContext.st: Changed to support blocks as closures

1998-10-11  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Collection.st: Added copyEmpty:, copyEmpty now uses it.
	* kernel/Dictionary.st: Changed growing mechanism and other methods
	to use #copyEmpty: Also, now #keyAtValue:ifAbsent: uses	identity
	to compare objects. This was marked as a 'questionable' change in
	Brad Diller's extras.st file, but it turns out that most Smalltalks
	implement this method this way.
	* kernel/OrderColl.st: Switched to using copyEmpty: when growing.
	* kernel/Set.st: Switched to using copyEmpty: when growing.

1998-10-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/LargeInt.st: removed 'self sign = 0' tests, replaced
	with overridden methods in LargeZeroInteger.

1998-10-08  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ArrayColl.st: Moved here the growing methods that used to
	be in SequenceableCollection. Why weren't they
	here? OrderedCollection has a different growing
	system...

1998-10-04  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Behavior.st: Fixed symbol that was being printed instead of
	nextPutAll:'d in definition of C functions.

1998-09-30  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Rectangle.st: Made #origin, #corner, #bottomRight and
	#topLeft return copies of the origin and corner. This is for
	consistency with #bottomLeft, #topCenter, etc.
	* kernel/TokenStream.st: Removed a few methods whose implementation
	was the same as Stream's.

1998-09-29  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Object.st: Switched dependancy mechanism to use IdentitySets.
	Also declared Dependencies as part of Smalltalk.

1998-09-28  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Set.st: Changed storeOn: to avoid hard coding Set as the
	class name.
	* kernel/CStruct.st: Changed to a fixed subclass. Added 'put'
	methods.
	* kernel/IdentitySet.st: Created.
	* kernel/Directory.st: Promoted to kernel from cxtnsn.
	* kernel/File.st: Promoted to kernel from cxtnsn.

1998-09-25  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ValueAdapt.st: created.

1998-09-18  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Time.st: Fixed possible secondClock overflow.
	Added #asSeconds
	* kernel/Date.st: Fixed possible secondClock overflow. Now it
	will overflow somewhen in 2038. Hope 64-bit machines are
	widespread enough by that time... I'll be 58.

1998-09-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: Added CObject>>free, String>>valueAt:,
	String>>valueAt:put:
	* kernel/Random.st: Changed algorithm.  Needed because, with new
	LargeInteger support, the old algorithm created a lot of temporary
	objects and caused a lot of GCs. This algorithm uses Floats; it
	has approximately the same chisquare as the old one. The performance
	is not as good as when it used small Integers, but better than
	LargeIntegers. There are algorithms which use small Integers without
	overflowing; I know about one of them, but it only works with 32 bit
	words and ours only have 30 bits.  Tell me if you can find one!

1998-09-14  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/BlkContext.st: Added accessr functions; there didn't seem to be a
	good reason why they weren't there in the first place.
	* kernel/MthContext.st: oops... methodClass instance variable was missing!
	* kernel/BlkContext.st: Added printOn: and backtrace methods
	* kernel/PosStream.st: Modified so that upTo:, upToAll:, skipTo:, upToEnd,
	skipToAll: operate unidirectionally on the receiver.  This is needed to
	make them work with special streams such as stdin.
	* kernel/MthContext.st: added printOn:, home and backtrace methods

1998-09-10  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: Added support for LargeIntegers. This
	included adding a 'fail' section to Integer>>asFloat. Also changed
	asObjectNoFail to return nil if bad OOP index.
	* kernel/WordMemory.st: Added LargeInteger support (well, actually
	just removed 'sorry, no LargeIntegers yet' errors); shifted to
	to bitShift: instead of * and // (which are slow with LargeIntegers).
	Also now #at:put: returns the stored value (which is what it was
	always supposed to do, like any other #at:put:).  Finally, the size
	of a word is now CLongSize instead of always 4 bytes.
	* kernel/Time.st: Fixed secondClock to use LargeIntegers.

1998-09-09  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/initialize.st: modified to initialize LargeInteger.

1998-09-08  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Builtins.st: Added Behavior>>#flushCache.
	* examples/Tokenizer.st: Created from Tok
	* examples/PushBack.st: Removed recording capability, which was too
	expensive in terms of performance, and moved it to Tokenizer.
	* kernel/LargeInt.st: created.

1998-09-07  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/WriteStream.st: Changed the growing policy so that
	WriteStreams are more efficient at concatenating data.

1998-09-06  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/MethodInfo.st: Added setSourceCode: to support compiler.

1998-09-03  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Set.st: Merged changes by Brad Diller to solve rehash bug.
	Added primAt:/primAt:put: to support subclasses that for example
	store data on disk or on a separate instance variable.
	* kernel/Float.st: Added #asFraction using a continued fractions
	algorithm (ugh!)
	* kernel/Date.st: Extended to make it more flexible.
	* kernel/Interval.st: Fixed bug in #size, returning negative sizes
	if step < 0.  Changed superclass to ArrayedCollection.
	* kernel/Fraction.st: Integrated changes.st
	* kernel/Behavior.st: Merged changes by Brad Diller
	* kernel/Builtins.st: Merged changes by Brad Diller
	* kernel/ClassDesc.st: Merged changes by Brad Diller
	* kernel/Metaclass.st: Merged changes by Brad Diller
	* kernel/Object.st: Merged changes by Brad Diller
	* kernel/IdentDict.st: Merged changes by Brad Diller to solve rehash
	bug
	* kernel/Dictionary.st: Merged changes by Brad Diller to solve rehash
	bug.  Also modified add: to resuse the existing Association if there
	is one, rather than always using the parameter.  Changed hashing so
	that hashing a dictionary that contains itself is not a problem.
	* kernel/Class.st: Merged corrections by Brad Diller
	* kernel/Association.st: Switched superclass to be Magnitude.  Added
	class equality test to Association>>#=
	* kernel/RunArray.st: created around January 97.
	* kernel/DirMessage.st: created.
	* kernel/ObjDumper.st: created around March 97.
	* kernel/ExcHandling.st: now uses SystemDictionary>>#halt. Thanks
	Brad Diller

1998-09-02  Paolo Bonzini  (bonzini@gnu.org)

	*** Began development of version 1.6

1997-07-23  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/ExcHandling.st: created.

1996-04-15  Paolo Bonzini  (bonzini@gnu.org)

	* kernel/Set.st: Refactored to reduce duplicated code
	in Dictionary and IdentityDictionary.

1995-09-30  Steve Byrne  (sbb@gnu.org)

	*** Version 1.1.5 released.

1995-09-16  Steve Byrne  (sbb@gnu.org)

	* kernel/CType.st: Removed separate valueType defintion for
	pointers and arrays (returning eltCType); using the inherited
	version instead.
	* kernel/Fraction.st: Added storeOn:, cleaned up formatting a bit.
	* kernel/Class.st: Fixed a bug in subClass:... was saying 'words: true',
	which means that the object consists of non-gc'ed words.  subClass is
	pointers which are GC'ed, and saying word: true was just plain 100%
	wrong.

1995-09-09  Steve Byrne  (sbb@gnu.org)

	* kernel/CType.st: Adjusted sizes of scalar types to use actual
	values for the platform instead of constant values that	Smalltalk
	made up.

1995-09-04  Steve Byrne  (sbb@gnu.org)

	* kernel/Class.st: Incorporated (finally) Jim Fulton's fix to the =
	operator.
	* kernel/Object.st: Incorporated (finally) Jim Fulton's fixes to
	removeDependent:

1995-08-26  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Modified Behavior #new & friends (primitives
	70 & 71) to issue errors when they are used inappropriately
	(such as sending #new to an indexable class).

1995-07-23  Steve Byrne  (sbb@gnu.org)

	* kernel/CStruct.st: Added struct datatypes int and uInt.

1995-07-16  Steve Byrne  (sbb@gnu.org)

	* kernel/Behavior.st: Fixed instsize to correctly shift by 4, now
	that bit 0 (st) is reserved for the hasFinalize flag.

1995-07-14  Steve Byrne  (sbb@gnu.org)

	* kernel/Metaclass.st: Fixed so that invalid variable names cannot
	be declared.

1995-05-29  Steve Byrne  (sbb@gnu.org)

	* kernel/Boolean.st: Fixed to have a simple deep copy and shallow
	copy.

1995-05-07  Steve Byrne  (sbb@gnu.org)

	* kernel/CObject.st: Added usage of more machine size constants
	(float,long, ptr, double).

1995-05-06  Steve Byrne  (sbb@gnu.org)

	* kernel/CStruct.st: Updated for new C type system.

1995-05-01  Steve Byrne  (sbb@gnu.org)

	* kernel/CType.st: Changed CType>>cObjectType to return CObject
	instead of subclass responsibility.

1995-04-29  Steve Byrne  (sbb@gnu.org)

	* kernel/CType.st: Added cObjectType -- may be replacing
	what the baseType method was, but this is more
	descriptive. Also added a new operation on CType
	instances to create a new CObject subclass from the
	CType instance.
	* kernel/CObject.st: Moved the creation of CType instances into
	CType. Removed forward declaring of CType instances from this
	file and changed the load order to load CObject first
	since it now has no dependencies on the CType symbols.
	* kernel/CType.st: Moved the creation of the instances of CType
	subclasses into this file -- makes more sense here.
	* kernel/CType.st: Removed baseType -- it appears to have no function
	now.

1995-01-08  Steve Byrne  (sbb@gnu.org)

	* kernel/CObject.st: Converted to new types.
	* kernel/CObject.st: Fixed some bugs with pointer subtraction.

1995-01-02  Steve Byrne  (sbb@gnu.org)

	* kernel/CType.st: Hacked for new type architecture.

1994-10-08  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added SystemDictionary>>growTo:

1994-09-15  Steve Byrne  (sbb@gnu.org)

	*** Version 1.2.alpha1 released.

1994-08-30  Steve Byrne  (sbb@gnu.org)

	* examples/MemUsage.st: added header stuff
	* examples/PrtHier.st: added header stuff.

1994-08-21  Steve Byrne  (sbb@gnu.org)

	* kernel/Behavior.st: Adjusted tests for low bit int marking.
	* kernel/CompildMeth.st: Fixed for low bit int marking

1994-08-14  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Fixed ~~ on integers to return true (the
	objects did not match) if the primitve failed.

1994-07-24  Steve Byrne  (sbb@gnu.org)

	* kernel/FileStream.st: Added class>>require:

1994-07-10  Steve Byrne  (sbb@gnu.org)

	* kernel/ClassDesc.st: Fixed instVarNames to deal properly with
	classes which have no instance variables.
	* kernel/MthContext.st: Added accessr functions; there didn't seem
	to be a good reason why they weren't there in the first place.
	* kernel/Class.st: Fixed allClassVarNames and allSharedPools to
	properly deal with nil collections of class variables or
	pool dictionaries.

1994-07-02  Steve Byrne  (sbb@gnu.org)

	* kernel/SysDict.st: Fixed dependenciesAt: to return nil if there
	was no dependency already present.

1994-06-12  Steve Byrne  (sbb@gnu.org)

	* kernel/CObject.st: added adjPtrBy:, derefAt:, etc. (finally).

1994-04-30  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added incrBy:

1994-04-09  Steve Byrne  (sbb@gnu.org)

	* kernel/CObject.st: Added CScalar, value: methods on scalar
	instances as a shorthand notation for instance creation, started
	folding in the effects of the CType new method.
	* kernel/CType.st: Added alloc:type:

1994-04-05  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added CObject>>alloc:type:

1994-03-26  Steve Byrne  (sbb@gnu.org)

	* kernel/WordMemory.st: Added little endian support.

1994-02-06  Steve Byrne  (sbb@gnu.org)

	* kernel/ProcSched.st: Fixed the 'symbolic constants' for priority to
	actually return their values, instead of returning
	self (duh!).

1993-10-17  Steve Byrne  (sbb@gnu.org)

	* kernel/Message.st: Added accessors for the components.

1993-10-16  Steve Byrne  (sbb@gnu.org)

	* kernel/ProcSched.st: Fixed yield to operate correctly in the
	presence of repeated higher priority interrupts.
	* kernel/ClassDesc.st: Fixed addInstVarName: specially treat meta
	classes and grow their single class instances when new instance
	variables are added to the class.

1993-10-03  Steve Byrne  (sbb@gnu.org)

	* kernel/ArrayColl.st: Put in #copy, to use replace from to get the
	nice efficient copy that we can have if we are an array.

1993-10-01  Steve Byrne  (sbb@gnu.org)

	* kernel/Dictionary.st: Fixed removeKey:ifAbsent: to evaluate the
	ifAbsent block if the key actually was absent.  Previously,
	this was being evaludated only if the entire dictionary was full
	and the key was not found.

1993-09-26  Steve Byrne  (sbb@gnu.org)

	* kernel/Collection.st: Made exceptionBlock's value in
	detect:ifNone: be returned, so the exception handler could just
	yield a value if it wanted.
	* kernel/String.st: fixed some methods to check its second
	operand's type before calling into primitives which don't check type.

1992-11-27  Steve Byrne  (sbb@gnu.org)

	* kernel/Class.st: Fixed variableSubclass:... to correctly mark new
	subclasses as being pointers and indexable, but not words (words
	implies unscanned raw data).
	* cxtnsn/DLD.st: Added support to DLD for searching through a list of
	libraries to resolve references, with the default being libc.

1992-05-25  Steve Byrne  (sbb@gnu.org)

	* kernel/Browser.st: Added support for Emacs caching class names

1992-02-23  Steve Byrne  (sbb@gnu.org)

	* kernel/String.st: Added asInteger and asByteArray.

1992-02-16  Steve Byrne  (sbb@gnu.org)

	* kernel/Autoload.st: Created in the 1.1 timeframe
	* kernel/Fraction.st: Created in the 1.1 timeframe
	* examples/Publish.st: created  02  92.
	* kernel/Browser.st: created a while ago
	* kernel/CType.st: created summer 90
	* kernel/CObject.st: created summer 90.
	* kernel/CStruct.st: created summer 90.

1992-02-15  Steve Byrne  (sbb@gnu.org)

	* kernel/Collection.st: Switched the collection creating enumerators
	to use the copyEmpty message, so it can be overridden by subclasses
	(like SortedCollection) when copying empty involves more than
	just doing a new.

1991-12-14  Steve Byrne  (sbb@gnu.org)

	* kernel/ByteArray.st: Added asString -- generally useful functionality,
	but especially for STIX.

1991-11-28  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added SystemDictionary byteCodeCounter.
	* kernel/ByteArray.st: Added growSize method -- 10 wasn't right, and
	we should probably base the grow size on the size of the object in
	question.
	* kernel/ByteArray.st: Switched shallowCopy to use faster primitives.

1991-11-02  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Fixed == and ~~ definitions for Integer to fail
	if the integers aren't = (including the case where they aren't both
	integers).  Used to retry:coercing: which lost badly.

1991-10-20  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added support for user level control of GC growth
	rate flags.

1991-09-22  Steve Byrne  (sbb@gnu.org)

	* kernel/FileStream.st: Added #popen:dir:ifFail: and #open:mode:ifFail:
	so that open failures can be explicitly handled.
	Thanks to Michael Richardson for the brilliant idea!
	* kernel/Builtins.st: Switched FileStream to returning nil on failure,
	so that higher level methods can chose to deal with failure.  This was
	due to a brilliant observation by Michael Richardson.  Now that higher
	level functions can handle failure, things like search paths, etc,
	can be trivially implemented.

1991-09-15  Steve Byrne  (sbb@gnu.org)

	* kernel/CompildMeth.st: Adjusted to account for larger numbers of
	primitives, literals, and temporaries.

1991-07-28  Steve Byrne  (sbb@gnu.org)

	* kernel/Dictionary.st: Fixed #= to check argument class.  Also
	fixed printing and storing to use cascaded messages.
	* kernel/Set.st: checks argument type better.
	* kernel/Bag.st: now checks args better.
	* kernel/IdentDict.st: Fixed #= to check argument class.  Converted
	to use cascaded printing.

1991-07-19  Steve Byrne  (sbb@gnu.org)

	* cxtnsn/DLD.st: created

1991-07-12  Steve Byrne  (sbb@gnu.org)

	* kernel/Date.st: Added methods for comparing, and for hashing
	dates. Also fixed storing to use cascaded messages.
	* kernel/Time.st: Added methods for comparing, including #= and #hash.

1991-07-10  Steve Byrne  (sbb@gnu.org)

	* kernel/Rectangle.st: Added #= and #hash methods.
	* kernel/Point.st: Added = for Points (= from Object isn't right)
	* kernel/Stream.st: Added store: for streams (can't imagine why it
	wasn't here before).
	* kernel/Rectangle.st: Altered the printing and storing to use
	cascaded messages.

1991-07-05  Steve Byrne  (sbb@gnu.org)

	* kernel/FileStream.st: Added fileIn:line:from:at: so that when
	Emacs sends out an expression or a method definition to Smalltalk
	the error messages accurately report the line number.
	* kernel/Builtins.st: Added fileInLine:fileName:at: to improve error
	reporting and recording of file position information for later
	browsing.

1991-06-26  Steve Byrne  (sbb@gnu.org)

	* kernel/False.st: Fixed ifFalse: to send value to falseBlock

1991-06-06  Steve Byrne  (sbb@gnu.org)

	* kernel/FileStream.st: Fixed open and popen to use self new instead
	of FileStream explicitly.
	* kernel/Builtins.st: Switched declare and execution tracing from
	being direct primitives to a more general primitive mechanism.

1991-05-18  Steve Byrne  (sbb@gnu.org)

	* kernel/Delay.st: Actually implemented the thing.

1991-04-20  Steve Byrne  (sbb@gnu.org)

	* kernel/SysDict.st: Added some methods for testing and modifying
	implementation specific features.
	* kernel/Behavior.st: added methodsFor:ifFeatures:

1991-03-25  Steve Byrne  (sbb@gnu.org)

	* kernel/Object.st: Added -> operator.

1991-03-24  Steve Byrne  (sbb@gnu.org)

	* kernel/Float.st: Fixed up floating point printing to take
	account of the number of digits printed in the integer part
	when printing the fractional part.

1991-03-23  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added Integer primitives == and ~~ for more
	efficient operation.

1991-03-16  Steve Byrne  (sbb@gnu.org)

	* kernel/Array.st: Fixed class creation to be separate statement from
	class commenting.
	* kernel/ArrayColl.st: Class creation now separate statement.
	* kernel/Association.st: Class creation now separate statement.
	* kernel/Bag.st: Class creation now separate statement.
	* kernel/Behavior.st: Class creation now separate statement.
	* kernel/BlkContext.st: Class creation now separate statement.
	* kernel/Boolean.st: Class creation now separate statement.
	* kernel/ByteArray.st: Class creation now separate statement.
	* kernel/ByteMemory.st: Class creation now separate statement.
	* kernel/Character.st: Class creation now separate statement.
	* kernel/Class.st: Class creation now separate statement.
	* kernel/ClassDesc.st: Class creation now separate statement.
	* kernel/Collection.st: Class creation now separate statement.
	* kernel/CompildMeth.st: Class creation now separate statement.
	* kernel/Date.st: Class creation now separate statement.
	* kernel/Dictionary.st: Class creation now separate statement.
	* kernel/False.st: Class creation now separate statement.
	* kernel/FileSegment.st: Class creation now separate statement.
	* kernel/Float.st: Class creation now separate statement.
	* kernel/IdentDict.st: Class creation now separate statement.
	* kernel/Integer.st: Class creation now separate statement.
	* kernel/Interval.st: Class creation now separate statement.
	* kernel/Link.st: Class creation now separate statement.
	* kernel/LinkedList.st: Class creation now separate statement.
	* kernel/Magnitude.st: Class creation now separate statement.
	* kernel/MappedColl.st: Class creation now separate statement.
	* kernel/Memory.st: Class creation now separate statement.
	* kernel/Message.st: Class creation now separate statement.
	* kernel/MethodInfo.st: Class creation now separate statement.
	* kernel/MthContext.st: Class creation now separate statement.
	* kernel/Number.st: Class creation now separate statement.
	* kernel/PosStream.st: Class creation now separate statement.
	* kernel/ProcSched.st: Class creation now separate statement.
	* kernel/Process.st: Class creation now separate statement.
	* kernel/RWStream.st: Class creation now separate statement.
	* kernel/Random.st: Class creation now separate statement.
	* kernel/ReadStream.st: Class creation now separate statement.
	* kernel/Semaphore.st: Class creation now separate statement.
	* kernel/SeqCollect.st: Class creation now separate statement.
	* kernel/Set.st: Class creation now separate statement.
	* kernel/SortCollect.st: Class creation now separate statement.
	* kernel/Stream.st: Class creation now separate statement.
	* kernel/String.st: Class creation now separate statement.
	* kernel/SymLink.st: Class creation now separate statement.
	* kernel/Symbol.st: Class creation now separate statement.
	* kernel/SysDict.st: Class creation now separate statement.
	* kernel/Time.st: Class creation now separate statement.
	* kernel/TokenStream.st: Class creation now separate statement.
	* kernel/True.st: Class creation now separate statement.
	* kernel/UndefObject.st: Class creation now separate statement.
	* kernel/WordMemory.st: Class creation now separate statement.
	* kernel/WriteStream.st: Class creation now separate statement.

1991-03-04  Steve Byrne  (sbb@gnu.org)

	* kernel/FileStream.st: Added verbose flag.

1991-02-16  Steve Byrne  (sbb@gnu.org)

	* kernel/Dictionary.st: Override the #new method from builtins when
	this file is loaded so that subclasses of Dictionary have a proper
	#new method instead of the built-in one that only creates Dictionary instances.

1991-02-07  Steve Byrne  (sbb@gnu.org)

	* kernel/Collection.st: Fixed detect: to return the value
	that detect:ifNone: returns.

1991-02-04  Steve Byrne  (sbb@gnu.org)

	* kernel/String.st: Fixed duplicate fileName definition to
	be filePos

1991-01-22  Steve Byrne  (sbb@gnu.org)

	* kernel/CFuncs.st: Added putenv.

1991-01-01  Steve Byrne  (sbb@gnu.org)

	* kernel/WriteStream.st: Added print: and store: so that printing
	and storing can be cascaded.

1990-12-29  Steve Byrne  (sbb@gnu.org)

	* kernel/SeqCollect.st: Added = test to check sub elements for equality.
	* kernel/SeqCollect.st: Added hash function.
	* kernel/ArrayColl.st: Removed = and hash (put them into
	SequenceableCollection).

1990-11-10  Steve Byrne  (sbb@gnu.org)

	* kernel/ClassDesc.st: Implemented compile:classified: and
	compile:classified:notifying:.
	* kernel/Behavior.st: Implemented compile:notifying:

1990-11-09  Steve Byrne  (sbb@gnu.org)

	* kernel/Integer.st: Converted to use fractions.
	* kernel/Number.st: Put in changes for fractions.

1990-11-05  Steve Byrne  (sbb@gnu.org)

	* kernel/Object.st: Fixed bug with addDependent: -- syntax error.

1990-11-01  Steve Byrne  (sbb@gnu.org)

	* kernel/Behavior.st: Fixed isBytes to return true only if the
	object is not pointers and not words.

1990-09-22  Steve Byrne  (sbb@gnu.org)

	* kernel/False.st: Changed printOn: to reflect changes in
	String>>#printOn:.
	* kernel/True.st: Changed printOn: to reflect new String printOn:
	(so we can't use it any more).
	* kernel/Date.st: Changed to reflect the changes required by
	String>>#printOn:.
	* kernel/Character.st: Changed character to always print with a
	leading $.
	* kernel/CompildMeth.st: Fixed printOn method to account for change to
	String printOn:.
	* kernel/Class.st: Implemented classVarNames and allClassVarNames.
	Implemented sharedPools and allSharedPools.

1990-09-21  Steve Byrne  (sbb@gnu.org)

	* kernel/Bag.st: Removed printOn: method; the one from Collection does
	the right thing.
	* kernel/Set.st: Removed printOn: method; the one from Collection
	is fine.
	* kernel/LinkedList.st: Removed printOn: method; the one from
	Collection should be ok.  Also, the storeOn: method from Collection
	should be ok.
	* kernel/ArrayColl.st: Removed storeOn: method; doesn't seem to be the
	right thing.
	* kernel/Integer.st: Fixed printOn: to reflect the fact that String
	printOn: no longer "does the right thing".
	* kernel/Collection.st: Fixed store: to be storeOn:
	* kernel/ClassDesc.st: Fixed the implementation of instVarNames to just
	return the variables defined by the current class,
	and added implementatinos of allInstVarNames and
	subclassInstVarNames.
	* kernel/Array.st: Added printOn: and storeOn: methods.
	* kernel/Symbol.st: Added printOn: to print the un-sharped version of
	the symbol, since string printOn: changed.
	* kernel/Behavior.st: Changed allSubclassesDo: to use ALL subclasses,
	both direct and indirect.
	* kernel/Dictionary.st: Changed printOn: to print the associations directly.
	* kernel/String.st: Changed printOn: to print with quote marks.
	On re-reading the documentation it appears as if this
	is the proper behavior (sigh).
	* kernel/UndefObject.st: Fixed due to String printOn: change.

1990-09-20  Steve Byrne  (sbb@gnu.org)

	* kernel/SeqCollect.st: Fixed indexOfSubCollection (it was off by one and
	did too much computation.
	* kernel/Float.st: Fixed storeOn: to not be recursive.

1990-09-16  Steve Byrne  (sbb@gnu.org)

	* kernel/Behavior.st: Implemented whichSelectorsReferTo: and
	scopeHas:ifTrue:.

1990-08-03  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added definition of CObject class alloc:.

1990-05-22  Steve Byrne  (sbb@gnu.org)

	*** Version 1.1.1 released (I think. I added this on 05 10th, 1999... --- pb)

1990-05-20  Steve Byrne  (sbb@gnu.org)

	* kernel/WriteStream.st: Fixed semantics of write streams so that they return
	only the characters that have been written to them.
	* kernel/RWStream.st: Fixed to accomodate changes in WriteStream.

1990-05-19  Steve Byrne  (sbb@gnu.org)

	* kernel/FileStream.st: Rewrite contents to take advantage of the new
	FileStream>>size method.
	* kernel/Stream.st: Added print: for streams.

1990-05-16  Steve Byrne  (sbb@gnu.org)

	* kernel/Character.st: Changed from being variableSubclass to
	variableWordSubclass.
	* kernel/Metaclass.st: Changed the implementation of name:... to
	try to preserve an existing class (if possible).
	The original code exists in newMeta:...
	* kernel/Class.st: Improved error checking: you now cannot create a
	subclass of a class whose type is not compatible
	(i.e. non-variable subclass of a variable byte class).
	* kernel/Class.st: Minor changes to support preserving class
	definitions as long as possible (i.e. if you re-invoke the class
	definition method, it tries to re-use the existing class if
	possible).

1990-05-14  Steve Byrne  (sbb@gnu.org)

	* kernel/TokenStream.st: removed isWhiteSpace:;replaced uses with
	Character isSeparator.

1990-04-07  Steve Byrne  (sbb@gnu.org)

	* kernel/Dictionary.st: Modified at:put: to resuse the existing
	Association if there is one, rather than create a new one all
	the time.  This was causing lossage when setting global variables
	in Smalltalk that previous usages weren't being changed.

1990-05-06  Steve Byrne  (sbb@gnu.org)

	* kernel/Dictionary.st: Fixed grow method to preserve associations
	in use in the dictionary instead of making new ones.  This should
	be faster, and doesn't break compiled methods that reference global
	variables when Smalltalk grows.

1990-04-26  Steve Byrne  (sbb@gnu.org)

	* kernel/Object.st: Fixed shallowCopy to send new messages to the
	object's class instead of the object itself.

1990-04-25  Steve Byrne  (sbb@gnu.org)

	* kernel/Integer.st: Fixed (oh...happy birthday, Integer.st!)
	bitInvert.  After fixing the lexer to be pickier about integer
	literals that were too large to be represented as Smalltalk
	literals, the previous code (which xored with 7fffffff) broke,
	so we xor -1.

1990-04-24  Steve Byrne  (sbb@gnu.org)

	* kernel/Dictionary.st: Fix at:ifAbsent: to deal with failure
	better (and be a tad more efficient).  Kudos (or BarNone's,
	depending on preference) to Andy Valencia.

1990-04-22  Steve Byrne  (sbb@gnu.org)

	* kernel/SysDict.st: Fixed Dependencies to be an IdentityDictionary
	instead of a regular Dictionary.  This has better semantics and
	is faster.

1990-04-19  dougm

	* kernel/Rectangle.st: Initial definitions for Rectangle
	class (needs Point)

1990-04-16  dougm

	* kernel/Point.st: Created basic Point class.

1990-04-15  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added sqrt primitive (I'm sure this was here
	before) must have got lost during breaking out from builtins.

1990-04-07  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added declare tracing primitive.

1990-04-15  Steve Byrne  (sbb@gnu.org)

	* kernel/Float.st: Added asFloat...I could have sworn this was
	already here...must have been lost in an edit.

1990-04-20  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added SystemDictionary debug to help out
	with DBX level debugging.

1990-02-11  Steve Byrne  (sbb@gnu.org)

	* kernel/Boolean.st: Converted to printOn: representation.

1990-01-13  Steve Byrne  (sbb@gnu.org)

	* kernel/Class.st: Began experimental addition of actual class
	definitions.
	* kernel/Builtins.st: Experimental Class self-definition.

1989-12-27  Steve Byrne  (sbb@gnu.org)

	* kernel/CompildMeth.st: Added real print method for compiled
	methods.

1989-12-25  Steve Byrne  (sbb@gnu.org)

	* examples/Debugger.st: created.

1989-12-22  Steve Byrne  (sbb@gnu.org)

	* kernel/SymLink.st: Created.

1989-12-19  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added filein primitive.
	* kernel/FileStream.st: added fileIn: and primitive file in.

1989-09-23  Steve Byrne  (sbb@gnu.org)

	* kernel/ClassDesc.st: fileOutCategory: is dangerous, so I make it
	write to a subdirectory called './categories'.

1989-09-19  Steve Byrne  (sbb@gnu.org)

	* kernel/SortCollect.st: Changed to use real method categories.
	* kernel/Stream.st: Changed to use real method categories.
	* kernel/Symbol.st: Changed to use real method categories.
	* kernel/Time.st: Changed to use real method categories.
	* kernel/TokenStream.st: Changed to use real method categories.
	* kernel/True.st: Changed to use real method categories.
	* kernel/UndefObject.st: Changed to use real method categories.
	* kernel/WriteStream.st: Changed to use real method categories.
	* kernel/Number.st: Converted to use real category strings.
	* kernel/PosStream.st: Converted to use real method categories
	* kernel/Process.st: Converted to use real method categories
	* kernel/Object.st: Converted to use real method categories.
	* kernel/OrderColl.st: Converted to use real method categories.
	* kernel/Random.st: Converted to use real method categories.
	* kernel/ReadStream.st: Converted to use real method categories.
	* kernel/Semaphore.st: Converted to use real method categories.
	* kernel/SeqCollect.st: Converted to use real method categories.
	* kernel/Set.st: Converted to use real method categories.

1989-09-06  Steve Byrne  (sbb@gnu.org)

	* kernel/CompildMeth.st: Added lots of methods: inspect, =, hash,
	methodCateogry, methodSourceCode, methodSourceString,
	and some private accessors such as bytecodeAt:.

1989-09-03  Steve Byrne  (sbb@gnu.org)

	* kernel/String.st: added asString for method source package
	* kernel/FileSegment.st: created.
	* kernel/MethodInfo.st: created.

1989-08-12  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Added process and semaphore builtins.
	* kernel/Time.st: Implemented many methods.  The book is
	exceptionally vague here, so please feel free to change the behavior
	to something which is more correct.

1989-07-12  Steve Byrne  (sbb@gnu.org)

	* kernel/TokenStream.st: created.

1989-07-08  Steve Byrne  (sbb@gnu.org)

	* kernel/CFuncs.st: Created.

1989-07-04  Steve Byrne  (sbb@gnu.org)

	* kernel/Object.st: Added support for dependence relationships. (-:
	how appropriate: on INdependence day :-)
	* kernel/SysDict.st: added initBlocks methods.

1989-07-03  Steve Byrne  (sbb@gnu.org)

	* kernel/Random.st: created.

1989-06-04  Steve Byrne  (sbb@gnu.org)

	* kernel/Stream.st: Made more of the methods defined here, but the
	class itself stays abstract; no implementations are given
	for next, nextPut:, etc.

1989-05-29  Steve Byrne  (sbb@gnu.org)

	* kernel/ByteMemory.st: created.
	* kernel/Memory.st: created.
	* kernel/WordMemory.st: created.

1989-05-24  Steve Byrne  (sbb@gnu.org)

	* kernel/initialize.st: created.

1989-05-21  Steve Byrne  (sbb@gnu.org)

	* kernel/FileStream.st: created.

1989-04-25  Steve Byrne  (sbb@gnu.org)

	* kernel/Array.st: created.
	* kernel/ArrayColl.st: created.
	* kernel/Association.st: created.
	* kernel/Bag.st: created.
	* kernel/Behavior.st: created.
	* kernel/BlkContext.st: created.
	* kernel/Boolean.st: created.
	* kernel/ByteArray.st: created.
	* kernel/Character.st: created.
	* kernel/Class.st: created.
	* kernel/ClassDesc.st: created.
	* kernel/Collection.st: created.
	* kernel/CompildMeth.st: created.
	* kernel/Date.st: created.
	* kernel/Delay.st: created.
	* kernel/Dictionary.st: created.
	* kernel/False.st: created.
	* kernel/Float.st: created.
	* kernel/IdentDict.st: created.
	* kernel/Integer.st: created.
	* kernel/Interval.st: created.
	* kernel/Link.st: created.
	* kernel/LinkedList.st: created.
	* kernel/Magnitude.st: created.
	* kernel/MappedColl.st: created.
	* kernel/Message.st: created.
	* kernel/Metaclass.st: created.
	* kernel/MthContext.st: created.
	* kernel/Number.st: created.
	* kernel/Object.st: created.
	* kernel/OrderColl.st: created.
	* kernel/PosStream.st: created.
	* kernel/ProcSched.st: created.
	* kernel/Process.st: created.
	* kernel/RWStream.st: created.
	* kernel/ReadStream.st: created.
	* kernel/Semaphore.st: created.
	* kernel/SeqCollect.st: created.
	* kernel/Set.st: created.
	* kernel/SharedQueue.st: created.
	* kernel/SortCollect.st: created.
	* kernel/Stream.st: created.
	* kernel/String.st: created.
	* kernel/Symbol.st: created.
	* kernel/SysDict.st: created.
	* kernel/Time.st: created.
	* kernel/True.st: created.
	* kernel/UndefObject.st: created.
	* kernel/WriteStream.st: created.

1989-02-06  Steve Byrne  (sbb@gnu.org)

	* kernel/Builtins.st: Created.

