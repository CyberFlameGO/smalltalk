#! /bin/sh
# Generated from ../../tests/testsuite.at by GNU Autoconf 2.63.
#
# Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
# Free Software Foundation, Inc.
# This test suite is free software; the Free Software Foundation gives
# unlimited permission to copy, distribute and modify it.
## --------------------- ##
## M4sh Initialization.  ##
## --------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi




# PATH needs CR
# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
if (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi

# Support unset when possible.
if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then
  as_unset=unset
else
  as_unset=false
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
case $0 in
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  { (exit 1); exit 1; }
fi

# Work around bugs in pre-3.0 UWIN ksh.
for as_var in ENV MAIL MAILPATH
do ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# Required to use basename.
if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi


# Name of the executable.
as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# CDPATH.
$as_unset CDPATH


if test "x$CONFIG_SHELL" = x; then
  if (eval ":") 2>/dev/null; then
  as_have_required=yes
else
  as_have_required=no
fi

  if test $as_have_required = yes &&	 (eval ":
(as_func_return () {
  (exit \$1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = \"\$1\" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test \$exitcode = 0) || { (exit 1); exit 1; }

(
  as_lineno_1=\$LINENO
  as_lineno_2=\$LINENO
  test \"x\$as_lineno_1\" != \"x\$as_lineno_2\" &&
  test \"x\`expr \$as_lineno_1 + 1\`\" = \"x\$as_lineno_2\") || { (exit 1); exit 1; }
") 2> /dev/null; then
  :
else
  as_candidate_shells=
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  case $as_dir in
	 /*)
	   for as_base in sh bash ksh sh5; do
	     as_candidate_shells="$as_candidate_shells $as_dir/$as_base"
	   done;;
       esac
done
IFS=$as_save_IFS


      for as_shell in $as_candidate_shells $SHELL; do
	 # Try only shells that exist, to save several forks.
	 if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		{ ("$as_shell") 2> /dev/null <<\_ASEOF
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi


:
_ASEOF
}; then
  CONFIG_SHELL=$as_shell
	       as_have_required=yes
	       if { "$as_shell" 2> /dev/null <<\_ASEOF
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi


:
(as_func_return () {
  (exit $1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = "$1" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test $exitcode = 0) || { (exit 1); exit 1; }

(
  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x`expr $as_lineno_1 + 1`" = "x$as_lineno_2") || { (exit 1); exit 1; }

_ASEOF
}; then
  break
fi

fi

      done

      if test "x$CONFIG_SHELL" != x; then
  for as_var in BASH_ENV ENV
	do ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
	done
	export CONFIG_SHELL
	exec "$CONFIG_SHELL" "$as_myself" ${1+"$@"}
fi


    if test $as_have_required = no; then
  echo This script requires a shell more modern than all the
      echo shells that I found on your system.  Please install a
      echo modern shell, or manually run the script under such a
      echo shell if you do have one.
      { (exit 1); exit 1; }
fi


fi

fi



(eval "as_func_return () {
  (exit \$1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = \"\$1\" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test \$exitcode = 0") || {
  echo No shell found that supports shell functions.
  echo Please tell bug-autoconf@gnu.org about your system,
  echo including any error possibly output before this message.
  echo This can help us improve future autoconf versions.
  echo Configuration will now proceed without shell functions.
}



  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x`expr $as_lineno_1 + 1`" = "x$as_lineno_2" || {

  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
  # uniformly replaced by the line number.  The first 'sed' inserts a
  # line-number line after each line using $LINENO; the second 'sed'
  # does the real work.  The second script uses 'N' to pair each
  # line-number line with the line containing $LINENO, and appends
  # trailing '-' during substitution so that $LINENO is not a special
  # case at line end.
  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
  # scripts with optimization help from Paolo Bonzini.  Blame Lee
  # E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { { $as_echo "$as_me:$LINENO: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&5
$as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2;}
   { (exit 1); exit 1; }; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}


if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in
-n*)
  case `echo 'x\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  *)   ECHO_C='\c';;
  esac;;
*)
  ECHO_N='-n';;
esac
if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -p'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -p'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -p'
  fi
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p=:
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

if test -x / >/dev/null 2>&1; then
  as_test_x='test -x'
else
  if ls -dL / >/dev/null 2>&1; then
    as_ls_L_option=L
  else
    as_ls_L_option=
  fi
  as_test_x='
    eval sh -c '\''
      if test -d "$1"; then
	test -d "$1/.";
      else
	case $1 in
	-*)set "./$1";;
	esac;
	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in
	???[sx]*):;;*)false;;esac;fi
    '\'' sh
  '
fi
as_executable_p=$as_test_x

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"





SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"


# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?  ':' means no, empty means yes.
at_verbose=:
at_quiet=

# Shall we keep the debug scripts?  Must be `:' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# Display the version message?
at_version_p=false
# List test groups?
at_list_p=false
# --clean
at_clean=false
# Test groups to run
at_groups=
# Whether a write failure occurred
at_write_fail=0

# The directory we run the suite in.  Default to . if no -C option.
at_dir=`pwd`
# An absolute reference to this testsuite script.
case $as_myself in
  [\\/]* | ?:[\\/]* ) at_myself=$as_myself ;;
  * ) at_myself=$at_dir/$as_myself ;;
esac
# Whether -C is in effect.
at_change_dir=false

# List of the tested programs.
at_tested='gst'
# List of the all the test groups.
at_groups_all=' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123'
# As many question marks as there are digits in the last test group number.
# Used to normalize the test group numbers so that `ls' lists them in
# numerical order.
at_format='???'
# Description of all the test groups.
at_help_all="1;testsuite.at:27;arrays.st;base;
2;testsuite.at:28;classes.st;base;
3;testsuite.at:29;blocks.st;base;
4;testsuite.at:30;sets.st;base;
5;testsuite.at:31;processes.st;base;
6;testsuite.at:32;exceptions.st;base;
7;testsuite.at:33;intmath.st;base;
8;testsuite.at:34;floatmath.st;base;
9;testsuite.at:39;dates.st;base;
10;testsuite.at:40;objects.st;base;
11;testsuite.at:41;strings.st;base;
12;testsuite.at:42;chars.st;base;
13;testsuite.at:43;objdump.st;base;
14;testsuite.at:44;delays.st;base;
15;testsuite.at:45;geometry.st;base;
16;testsuite.at:46;cobjects.st;base;
17;testsuite.at:47;compiler.st;base;
18;testsuite.at:48;fileext.st;base;
19;testsuite.at:49;mutate.st;base;
20;testsuite.at:50;untrusted.st;base;
21;testsuite.at:51;getopt.st;base;
22;testsuite.at:52;quit.st;base;
23;testsuite.at:53;pools.st;base;
24;testsuite.at:56;ackermann.st;base;
25;testsuite.at:57;ary3.st;base;
26;testsuite.at:58;except.st;base;
27;testsuite.at:59;fibo.st;base;
28;testsuite.at:60;hash.st;base;
29;testsuite.at:61;hash2.st;base;
30;testsuite.at:62;heapsort.st;base;
31;testsuite.at:63;lists.st;base;
32;testsuite.at:64;lists1.st;base;
33;testsuite.at:65;lists2.st;base;
34;testsuite.at:66;matrix.st;base;
35;testsuite.at:67;methcall.st;base;
36;testsuite.at:68;nestedloop.st;base;
37;testsuite.at:69;objinst.st;base;
38;testsuite.at:70;prodcons.st;base;
39;testsuite.at:71;random-bench.st;base;
40;testsuite.at:72;sieve.st;base;
41;testsuite.at:73;strcat.st;base;
42;testsuite.at:76;SUnit;sunit;
43;testsuite.at:77;Parser;parser sunit;
44;testsuite.at:80;ArrayANSITest;ansi sunit;
45;testsuite.at:81;ArrayFactoryANSITest;ansi sunit;
46;testsuite.at:82;BagANSITest;ansi sunit;
47;testsuite.at:83;BagFactoryANSITest;ansi sunit;
48;testsuite.at:84;BooleanANSITest;ansi sunit;
49;testsuite.at:85;ByteArrayANSITest;ansi sunit;
50;testsuite.at:86;ByteArrayFactoryANSITest;ansi sunit;
51;testsuite.at:87;CharacterANSITest;ansi sunit;
52;testsuite.at:88;CharacterFactoryANSITest;ansi sunit;
53;testsuite.at:89;DateAndTimeANSITest;ansi sunit;
54;testsuite.at:90;DateAndTimeFactoryANSITest;ansi sunit;
55;testsuite.at:91;DictionaryANSITest;ansi sunit;
56;testsuite.at:92;DictionaryFactoryANSITest;ansi sunit;
57;testsuite.at:93;DurationANSITest;ansi sunit;
58;testsuite.at:94;DurationFactoryANSITest;ansi sunit;
59;testsuite.at:95;DyadicValuableANSITest;ansi sunit;
60;testsuite.at:96;ErrorANSITest;ansi sunit;
61;testsuite.at:97;ErrorClassANSITest;ansi sunit;
62;testsuite.at:98;ExceptionANSITest;ansi sunit;
63;testsuite.at:99;ExceptionClassANSITest;ansi sunit;
64;testsuite.at:100;ExceptionSetANSITest;ansi sunit;
65;testsuite.at:101;FailedMessageANSITest;ansi sunit;
66;testsuite.at:102;FileStreamFactoryANSITest;ansi sunit;
67;testsuite.at:103;FloatANSITest;ansi sunit;
68;testsuite.at:104;FloatCharacterizationANSITest;ansi sunit;
69;testsuite.at:105;FractionANSITest;ansi sunit;
70;testsuite.at:106;FractionFactoryANSITest;ansi sunit;
71;testsuite.at:107;IdentityDictionaryANSITest;ansi sunit;
72;testsuite.at:108;IdentityDictionaryFactoryANSITest;ansi sunit;
73;testsuite.at:109;IntegerANSITest;ansi sunit;
74;testsuite.at:110;IntervalANSITest;ansi sunit;
75;testsuite.at:111;IntervalFactoryANSITest;ansi sunit;
76;testsuite.at:112;MessageNotUnderstoodANSITest;ansi sunit;
77;testsuite.at:113;MessageNotUnderstoodSelectorANSITest;ansi sunit;
78;testsuite.at:114;MonadicBlockANSITest;ansi sunit;
79;testsuite.at:115;NilANSITest;ansi sunit;
80;testsuite.at:116;NiladicBlockANSITest;ansi sunit;
81;testsuite.at:117;NotificationANSITest;ansi sunit;
82;testsuite.at:118;NotificationClassANSITest;ansi sunit;
83;testsuite.at:119;ObjectANSITest;ansi sunit;
84;testsuite.at:120;ObjectClassANSITest;ansi sunit;
85;testsuite.at:121;OrderedCollectionANSITest;ansi sunit;
86;testsuite.at:122;OrderedCollectionFactoryANSITest;ansi sunit;
87;testsuite.at:123;ReadFileStreamANSITest;ansi sunit;
88;testsuite.at:124;ReadStreamANSITest;ansi sunit;
89;testsuite.at:125;ReadStreamFactoryANSITest;ansi sunit;
90;testsuite.at:126;ReadWriteStreamANSITest;ansi sunit;
91;testsuite.at:127;ReadWriteStreamFactoryANSITest;ansi sunit;
92;testsuite.at:128;ScaledDecimalANSITest;ansi sunit;
93;testsuite.at:129;SelectorANSITest;ansi sunit;
94;testsuite.at:130;SetANSITest;ansi sunit;
95;testsuite.at:131;SetFactoryANSITest;ansi sunit;
96;testsuite.at:132;SortedCollectionANSITest;ansi sunit;
97;testsuite.at:133;SortedCollectionFactoryANSITest;ansi sunit;
98;testsuite.at:134;StringANSITest;ansi sunit;
99;testsuite.at:135;StringFactoryANSITest;ansi sunit;
100;testsuite.at:136;SymbolANSITest;ansi sunit;
101;testsuite.at:137;TranscriptANSITest;ansi sunit;
102;testsuite.at:138;WarningANSITest;ansi sunit;
103;testsuite.at:139;WarningClassANSITest;ansi sunit;
104;testsuite.at:140;WriteFileStreamANSITest;ansi sunit;
105;testsuite.at:141;WriteStreamANSITest;ansi sunit;
106;testsuite.at:142;WriteStreamFactoryANSITest;ansi sunit;
107;testsuite.at:143;ZeroDivideANSITest;ansi sunit;
108;testsuite.at:144;ZeroDivideFactoryANSITest;ansi sunit;
109;testsuite.at:147;Complex;complex sunit;
110;testsuite.at:148;Continuations;continuations sunit;
111;testsuite.at:149;DBD-MySQL;dbd-mysql sunit;
112;testsuite.at:150;DBD-SQLite;dbd-sqlite sunit;
113;testsuite.at:151;DebugTools;debugtools sunit;
114;testsuite.at:152;DhbNumericalMethods;dhbnumericalmethods sunit;
115;testsuite.at:153;Digest;digest sunit;
116;testsuite.at:154;GDBM;gdbm sunit;
117;testsuite.at:155;Iconv;iconv sunit;
118;testsuite.at:156;Magritte;magritte sunit;
119;testsuite.at:157;ROE;roe sunit;
120;testsuite.at:158;Seaside-Core;seaside-core sunit;
121;testsuite.at:159;Sport;sport sunit;
122;testsuite.at:160;Swazoo;swazoo sunit;
123;testsuite.at:161;ZLib;zlib sunit;
"

# at_func_validate_ranges [NAME...]
# ---------------------------------
# Validate and normalize the test group number contained in each
# variable NAME.  Leading zeroes are treated as decimal.
at_func_validate_ranges ()
{
  for at_grp
  do
    eval at_value=\$$at_grp
    if test $at_value -lt 1 || test $at_value -gt 123; then
      $as_echo "invalid test group: $at_value" >&2
      exit 1
    fi
    case $at_value in
      0*) # We want to treat leading 0 as decimal, like expr and test, but
	  # at_func_arith treats it as octal if it uses $(( )).
	  # With XSI shells, ${at_value#${at_value%%[1-9]*}} avoids the
	  # expr fork, but it is not worth the effort to determine if the
	  # shell supports XSI when the user can just avoid leading 0.
	  eval $at_grp='`expr $at_value + 0`' ;;
    esac
  done
}

at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  case $at_option in
  *=*) at_optarg=`expr "x$at_option" : 'x[^=]*=\(.*\)'` ;;
  *)   at_optarg= ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	at_version_p=:
	;;

    --clean | -c )
	at_clean=:
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -x'; at_traceoff='set +x'
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_func_validate_ranges at_option
	at_groups="$at_groups$at_option "
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d X-`
	at_func_validate_ranges at_range_start
	at_range=`$as_echo " $at_groups_all " | \
	  sed -e 's/^.* \('$at_range_start' \)/\1/'`
	at_groups="$at_groups$at_range "
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d X-`
	at_func_validate_ranges at_range_end
	at_range=`$as_echo " $at_groups_all " | \
	  sed -e 's/\( '$at_range_end'\) .*$/\1/'`
	at_groups="$at_groups$at_range "
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`expr $at_option : '\(.*\)-'`
	at_range_end=`expr $at_option : '.*-\(.*\)'`
	if test $at_range_start -gt $at_range_end; then
	  at_tmp=$at_range_end
	  at_range_end=$at_range_start
	  at_range_start=$at_tmp
	fi
	at_func_validate_ranges at_range_start at_range_end
	at_range=`$as_echo " $at_groups_all " | \
	  sed -e 's/^.*\( '$at_range_start' \)/\1/' \
	      -e 's/\( '$at_range_end'\) .*$/\1/'`
	at_groups="$at_groups$at_range "
	;;

    # Directory selection.
    --directory | -C )
	at_prev=--directory
	;;
    --directory=* )
	at_change_dir=:
	at_dir=$at_optarg
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_groups_selected=$at_help_all
	at_save_IFS=$IFS
	IFS=,
	set X $at_optarg
	shift
	IFS=$at_save_IFS
	for at_keyword
	do
	  at_invert=
	  case $at_keyword in
	  '!'*)
	    at_invert="-v"
	    at_keyword=`expr "X$at_keyword" : 'X!\(.*\)'`
	    ;;
	  esac
	  # It is on purpose that we match the test group titles too.
	  at_groups_selected=`$as_echo "$at_groups_selected" |
	      grep -i $at_invert "^[1-9][^;]*;.*[; ]$at_keyword[ ;]"`
	done
	# Smash the newlines.
	at_groups_selected=`$as_echo "$at_groups_selected" | sed 's/;.*//' |
	  tr "$as_nl" ' '
	`
	at_groups="$at_groups$at_groups_selected "
	;;

    *=*)
	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
	# Reject names that are not valid shell variable names.
	case $at_envvar in
	  '' | [0-9]* | *[!_$as_cr_alnum]* )
	    { { $as_echo "$as_me:$LINENO: error: invalid variable name: $at_envvar" >&5
$as_echo "$as_me: error: invalid variable name: $at_envvar" >&2;}
   { (exit 1); exit 1; }; } ;;
	esac
	at_value=`$as_echo "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
	# Export now, but save eval for later and for debug scripts.
	export $at_envvar
	at_debug_args="$at_debug_args $at_envvar='$at_value'"
	;;

     *) $as_echo "$as_me: invalid option: $at_option" >&2
	$as_echo "Try \`$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Verify our last option didn't require an argument
if test -n "$at_prev"; then
  { { $as_echo "$as_me:$LINENO: error: \`$at_prev' requires an argument." >&5
$as_echo "$as_me: error: \`$at_prev' requires an argument." >&2;}
   { (exit 1); exit 1; }; }
fi


# Selected test groups.
if test -z "$at_groups"; then
  at_groups=$at_groups_all
else
  # Sort the tests, removing duplicates.
  at_groups=`$as_echo "$at_groups" | tr ' ' "$as_nl" | sort -nu`
fi

# Help message.
if $at_help_p; then
  cat <<_ATEOF || at_write_fail=1
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, given by numeric ranges, and
save a detailed log file.  Upon failure, create debugging scripts.

You should not change environment variables unless explicitly passed
as command line arguments.  Set \`AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relatively to the top level of this distribution.  E.g.,

  $ $0 AUTOTEST_PATH=bin

possibly amounts into

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH
_ATEOF
cat <<_ATEOF || at_write_fail=1

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF || at_write_fail=1

Execution tuning:
  -C, --directory=DIR
                 change to directory DIR before starting
  -k, --keywords=KEYWORDS
                 select the tests matching all the comma-separated KEYWORDS
                 multiple \`-k' accumulate; prefixed \`!' negates a KEYWORD
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
                 default for debugging scripts
  -d, --debug    inhibit clean up and top-level logging
                 default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF || at_write_fail=1

Report bugs to <help-smalltalk@gnu.org>.
_ATEOF
  exit $at_write_fail
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF || at_write_fail=1
GNU Smalltalk 3.1 test suite test groups:

 NUM: FILE-NAME:LINE     TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # Passing at_groups is tricky.  We cannot use it to form a literal string
  # or regexp because of the limitation of AIX awk.  And Solaris' awk
  # doesn't grok more than 99 fields in a record, so we have to use `split'.
  # at_groups needs to be space-separated for this script to work.
  case $at_groups in
    *"$as_nl"* )
      at_groups=`$as_echo "$at_groups" | tr "$as_nl" ' '` ;;
  esac
  $as_echo "$at_groups$as_nl$at_help_all" |
    awk 'BEGIN { FS = ";" }
	 NR == 1 {
	   for (n = split($ 0, a, " "); n; n--) selected[a[n]] = 1
	   next
	 }
	 {
	   if (selected[$ 1]) {
	     printf " %3d: %-18s %s\n", $ 1, $ 2, $ 3
	     if ($ 4) printf "      %s\n", $ 4
	   }
	 }' || at_write_fail=1
  exit $at_write_fail
fi
if $at_version_p; then
  $as_echo "$as_me (GNU Smalltalk 3.1)" &&
  cat <<\_ACEOF || at_write_fail=1

Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
Free Software Foundation, Inc.
This test suite is free software; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.
_ACEOF
  exit $at_write_fail
fi

# Should we print banners?  at_groups is space-separated for entire test,
# newline-separated if only a subset of the testsuite is run.
case $at_groups in
  *' '*' '* | *"$as_nl"*"$as_nl"* )
      at_print_banners=: ;;
  * ) at_print_banners=false ;;
esac
# Text for banner N, set to empty once printed.
# Banner 1. testsuite.at:26
# Category starts at test group 1.
at_banner_text_1="Regression tests."
# Banner 2. testsuite.at:55
# Category starts at test group 24.
at_banner_text_2="Other simple tests."
# Banner 3. testsuite.at:75
# Category starts at test group 42.
at_banner_text_3="Basic packages."
# Banner 4. testsuite.at:79
# Category starts at test group 44.
at_banner_text_4="ANSI compliancy tests."
# Banner 5. testsuite.at:146
# Category starts at test group 109.
at_banner_text_5="Other packages."

# Take any -C into account.
if $at_change_dir ; then
  if test x- = "x$at_dir" ; then
    at_dir=./-
  fi
  test x != "x$at_dir" && cd "$at_dir" \
    || { { $as_echo "$as_me:$LINENO: error: unable to change directory" >&5
$as_echo "$as_me: error: unable to change directory" >&2;}
   { (exit 1); exit 1; }; }
  at_dir=`pwd`
fi

# Load the config files for any default variable assignments.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || { { $as_echo "$as_me:$LINENO: error: invalid content: $at_file" >&5
$as_echo "$as_me: error: invalid content: $at_file" >&2;}
   { (exit 1); exit 1; }; }
done

# Autoconf <=2.59b set at_top_builddir instead of at_top_build_prefix:
: ${at_top_build_prefix=$at_top_builddir}

# Perform any assignments requested during argument parsing.
eval "$at_debug_args"

# atconfig delivers names relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir_var in srcdir top_srcdir top_build_prefix
  do
    at_val=`eval 'as_val=${'at_$at_dir_var'}
		 $as_echo "$as_val"'`
    case $at_val in
      [\\/$]* | ?:[\\/]* ) at_prefix= ;;
      *) at_prefix=../../ ;;
    esac
    eval "$at_dir_var=\$at_prefix\$at_val"
  done
fi

## ------------------- ##
## Directory structure ##
## ------------------- ##

# This is the set of directories and files used by this script
# (non-literals are capitalized):
#
# TESTSUITE         - the testsuite
# TESTSUITE.log     - summarizes the complete testsuite run
# TESTSUITE.dir/    - created during a run, remains after -d or failed test
# + at-groups/      - during a run: status of all groups in run
# | + NNN/          - during a run: meta-data about test group NNN
# | | + check-line  - location (source file and line) of current AT_CHECK
# | | + status      - exit status of current AT_CHECK
# | | + stdout      - stdout of current AT_CHECK
# | | + stder1      - stderr, including trace
# | | + stderr      - stderr, with trace filtered out
# | | + test-source - portion of testsuite that defines group
# | | + times       - timestamps for computing duration
# | | + pass        - created if group passed
# | | + xpass       - created if group xpassed
# | | + fail        - created if group failed
# | | + xfail       - created if group xfailed
# | | + skip        - created if group skipped
# + at-stop         - during a run: end the run if this file exists
# + at-source-lines - during a run: cache of TESTSUITE line numbers for extraction
# + 0..NNN/         - created for each group NNN, remains after -d or failed test
# | + TESTSUITE.log - summarizes the group results
# | + ...           - files created during the group

# The directory the whole suite works in.
# Should be absolute to let the user `cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite.
at_suite_log=$at_dir/$as_me.log
# The directory containing helper files per test group.
at_helper_dir=$at_suite_dir/at-groups
# Stop file: if it exists, do not start new jobs.
at_stop_file=$at_suite_dir/at-stop

if $at_clean; then
  test -d "$at_suite_dir" &&
    find "$at_suite_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
  rm -f -r "$at_suite_dir" "$at_suite_log"
  exit $?
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites (ie. atconfig was not found),
# AUTOTEST_PATH is relative to `.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
AUTOTEST_PATH=`$as_echo "$AUTOTEST_PATH" | sed "s|:|$PATH_SEPARATOR|g"`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -n "$at_path" && at_path=$at_path$PATH_SEPARATOR
case $as_dir in
  [\\/]* | ?:[\\/]* )
    at_path=$at_path$as_dir
    ;;
  * )
    if test -z "$at_top_build_prefix"; then
      # Stand-alone test suite.
      at_path=$at_path$as_dir
    else
      # Embedded test suite.
      at_path=$at_path$at_top_build_prefix$as_dir$PATH_SEPARATOR
      at_path=$at_path$at_top_srcdir/$as_dir
    fi
    ;;
esac
done
IFS=$as_save_IFS


# Now build and simplify PATH.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
at_new_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -d "$as_dir" || continue
case $as_dir in
  [\\/]* | ?:[\\/]* ) ;;
  * ) as_dir=`(cd "$as_dir" && pwd) 2>/dev/null` ;;
esac
case $PATH_SEPARATOR$at_new_path$PATH_SEPARATOR in
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR*) ;;
  $PATH_SEPARATOR$PATH_SEPARATOR) at_new_path=$as_dir ;;
  *) at_new_path=$at_new_path$PATH_SEPARATOR$as_dir ;;
esac
done
IFS=$as_save_IFS

PATH=$at_new_path
export PATH

# Setting up the FDs.
# 5 is the log file.  Not to be overwritten if `-d'.
if $at_debug_p; then
  at_suite_log=/dev/null
else
  : >"$at_suite_log"
fi
exec 5>>"$at_suite_log"

# Banners and logs.
cat <<\_ASBOX
## ----------------------------- ##
## GNU Smalltalk 3.1 test suite. ##
## ----------------------------- ##
_ASBOX
{
  cat <<\_ASBOX
## ----------------------------- ##
## GNU Smalltalk 3.1 test suite. ##
## ----------------------------- ##
_ASBOX
  echo

  $as_echo "$as_me: command line was:"
  $as_echo "  \$ $0 $at_cli_args"
  echo

  # Try to find a few ChangeLogs in case it might help determining the
  # exact version.  Use the relative dir: if the top dir is a symlink,
  # find will not follow it (and options to follow the links are not
  # portable), which would result in no output here.  Prune directories
  # matching the package tarname, since they tend to be leftovers from
  # `make dist' or `make distcheck' and contain redundant or stale logs.
  if test -n "$at_top_srcdir"; then
    cat <<\_ASBOX
## ----------- ##
## ChangeLogs. ##
## ----------- ##
_ASBOX
    echo
    for at_file in `find "$at_top_srcdir" -name "smalltalk-*" -prune -o -name ChangeLog -print`
    do
      $as_echo "$as_me: $at_file:"
      sed 's/^/| /;10q' $at_file
      echo
    done

  fi

  {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  $as_echo "PATH: $as_dir"
done
IFS=$as_save_IFS

}
  echo

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    $as_echo "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done
} >&5


## --------------- ##
## Shell functions ##
## --------------- ##

# at_func_banner NUMBER
# ---------------------
# Output banner NUMBER, provided the testsuite is running multiple groups
# and this particular banner has not yet been printed.
at_func_banner ()
{
  $at_print_banners || return 0
  eval at_banner_text=\$at_banner_text_$1
  test "x$at_banner_text" = x && return 0
  eval at_banner_text_$1=
  $as_echo "$as_nl$at_banner_text$as_nl"
} # at_func_banner

# at_func_check_newline COMMAND
# -----------------------------
# Test if COMMAND includes a newline and, if so, print a message and return
# exit code 1
at_func_check_newline ()
{
  case "$1" in
 *'
'*) echo 'Not enabling shell tracing (command contains an embedded newline)'
    return 1 ;;
 *) return 0 ;;
  esac
}

# at_func_filter_trace EXIT-CODE
# ------------------------------
# Split the contents of file "$at_stder1" into the "set -x" trace (on stderr)
# and the other lines (on file "$at_stderr").  Return the exit code EXIT-CODE.
at_func_filter_trace ()
{
  grep '^ *+' "$at_stder1" >&2
  grep -v '^ *+' "$at_stder1" >"$at_stderr"
  return $1
}

# at_func_log_failure FILE-LIST
# -----------------------------
# Copy the files in the list on stdout with a "> " prefix, and exit the shell
# with a failure exit code.
at_func_log_failure ()
{
  for file
    do $as_echo "$file:"; sed 's/^/> /' "$file"; done
  echo 1 > "$at_status_file"
  exit 1
}

# at_func_check_skip EXIT-CODE
# ----------------------------
# Check whether EXIT-CODE is the special exit code 77, and if so exit the shell
# with that same exit code.
at_func_check_skip ()
{
  case $1 in
    77) echo 77 > "$at_status_file"; exit 77;;
  esac
}

# at_func_check_status EXPECTED EXIT-CODE LINE
# --------------------------------------------
# Check whether EXIT-CODE is the expected exit code, and if so do nothing.
# Otherwise, if it is 77 exit the shell with that same exit code; if it is
# anything else print an error message and fail the test.
at_func_check_status ()
{
  case $2 in
    $1 ) ;;
    77) echo 77 > "$at_status_file"; exit 77;;
    *) $as_echo "$3: exit code was $2, expected $1"
      at_failed=:;;
  esac
}

# at_func_diff_devnull FILE
# -------------------------
# Emit a diff between /dev/null and FILE.  Uses "test -s" to avoid useless
# diff invocations.
at_func_diff_devnull ()
{
  test -s "$1" || return 0
  $at_diff "$at_devnull" "$1"
}

# at_func_test NUMBER
# -------------------
# Parse out test NUMBER from the tail of this file.
at_func_test ()
{
  eval at_sed=\$at_sed$1
  sed "$at_sed" "$at_myself" > "$at_test_source"
}

# at_func_create_debugging_script
# -------------------------------
# Create the debugging script $at_group_dir/run which will reproduce the
# current test group.
at_func_create_debugging_script ()
{
  {
    echo "#! /bin/sh" &&
    echo 'test "${ZSH_VERSION+set}" = set && alias -g '\''${1+"$@"}'\''='\''"$@"'\''' &&
    $as_echo "cd '$at_dir'" &&
    $as_echo "exec \${CONFIG_SHELL-$SHELL} \"$at_myself\" -v -d $at_debug_args $at_group \${1+\"\$@\"}" &&
    echo 'exit 1'
  } >"$at_group_dir/run" &&
  chmod +x "$at_group_dir/run"
}

# at_func_arith
# -------------
# Arithmetic evaluation, avoids expr if the shell is sane.  The
# interpretation of leading zeroes is unspecified.
#
# subshell and eval are needed to keep Solaris sh from bailing out:
if ( eval 'test $(( 1 + 1 )) = 2' ) 2>/dev/null; then
  # With "$@", bash does not split positional parameters:
  eval 'at_func_arith ()
  {
    at_func_arith_result=$(( $* ))
  }'
else
  at_func_arith ()
  {
    at_func_arith_result=`expr "$@"`
  }
fi

## ---------------------- ##
## End of shell functions ##
## ---------------------- ##
{
  cat <<\_ASBOX
## ---------------- ##
## Tested programs. ##
## ---------------- ##
_ASBOX
  echo
} >&5

# Report what programs are being tested.
for at_program in : $at_tested
do
  test "$at_program" = : && continue
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -f "$as_dir/$at_program" && break
done
IFS=$as_save_IFS

  if test -f "$as_dir/$at_program"; then
    {
      $as_echo "$at_srcdir/testsuite.at:23: $as_dir/$at_program --version"
      "$as_dir/$at_program" --version </dev/null
      echo
    } >&5 2>&1
  else
    { { $as_echo "$as_me:$LINENO: error: cannot find $at_program" >&5
$as_echo "$as_me: error: cannot find $at_program" >&2;}
   { (exit 1); exit 1; }; }
  fi
done

{
  cat <<\_ASBOX
## ------------------ ##
## Running the tests. ##
## ------------------ ##
_ASBOX
} >&5

at_start_date=`date`
at_start_time=`date +%s 2>/dev/null`
$as_echo "$as_me: starting at: $at_start_date" >&5

# Create the master directory if it doesn't already exist.
test -d "$at_suite_dir" ||
  mkdir "$at_suite_dir" ||
  { { $as_echo "$as_me:$LINENO: error: cannot create '$at_suite_dir'" >&5
$as_echo "$as_me: error: cannot create '$at_suite_dir'" >&2;}
   { (exit 1); exit 1; }; }

# Can we diff with `/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  >"$at_devnull"
fi

# Use `diff -u' when possible.
if at_diff=`diff -u "$at_devnull" "$at_devnull" 2>&1` && test -z "$at_diff"
then
  at_diff='diff -u'
else
  at_diff=diff
fi

# Get the last needed group.
for at_group in : $at_groups; do :; done

# Extract the start and end lines of each test group at the tail
# of this file
awk '
BEGIN { FS="" }
/^#AT_START_/ {
  start = NR
}
/^#AT_STOP_/ {
  test = substr ($ 0, 10)
  print "at_sed" test "=\"1," start "d;" (NR-1) "q\""
  if (test == "'"$at_group"'") exit
}' "$at_myself" > "$at_suite_dir/at-source-lines" &&
. "$at_suite_dir/at-source-lines" ||
  { { $as_echo "$as_me:$LINENO: error: cannot create test line number cache" >&5
$as_echo "$as_me: error: cannot create test line number cache" >&2;}
   { (exit 1); exit 1; }; }
rm -f "$at_suite_dir/at-source-lines"

# Set up helper dirs.
rm -rf "$at_helper_dir" &&
mkdir "$at_helper_dir" &&
cd "$at_helper_dir" &&
{ test -z "$at_groups" || mkdir $at_groups; } ||
{ { $as_echo "$as_me:$LINENO: error: testsuite directory setup failed" >&5
$as_echo "$as_me: error: testsuite directory setup failed" >&2;}
   { (exit 1); exit 1; }; }

# Functions for running a test group.  We leave the actual
# test group execution outside of a shell function in order
# to avoid hitting zsh 4.x exit status bugs.

# at_func_group_prepare
# ---------------------
# Prepare running a test group
at_func_group_prepare ()
{
  # The directory for additional per-group helper files.
  at_job_dir=$at_helper_dir/$at_group
  # The file containing the location of the last AT_CHECK.
  at_check_line_file=$at_job_dir/check-line
  # The file containing the exit status of the last command.
  at_status_file=$at_job_dir/status
  # The files containing the output of the tested commands.
  at_stdout=$at_job_dir/stdout
  at_stder1=$at_job_dir/stder1
  at_stderr=$at_job_dir/stderr
  # The file containing the code for a test group.
  at_test_source=$at_job_dir/test-source
  # The file containing dates.
  at_times_file=$at_job_dir/times

  # Be sure to come back to the top test directory.
  cd "$at_suite_dir"

  # Clearly separate the test groups when verbose.
  $at_first || $at_verbose echo

  at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'


  # Create a fresh directory for the next test group, and enter.
  at_group_dir=$at_suite_dir/$at_group_normalized
  at_group_log=$at_group_dir/$as_me.log
  if test -d "$at_group_dir"; then
    find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
    rm -fr "$at_group_dir" ||
    { $as_echo "$as_me:$LINENO: WARNING: test directory for $at_group_normalized could not be cleaned." >&5
$as_echo "$as_me: WARNING: test directory for $at_group_normalized could not be cleaned." >&2;}
  fi
  # Be tolerant if the above `rm' was not able to remove the directory.
  { as_dir="$at_group_dir"
  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || { $as_mkdir_p && mkdir -p "$as_dir"; } || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || { { $as_echo "$as_me:$LINENO: error: cannot create directory $as_dir" >&5
$as_echo "$as_me: error: cannot create directory $as_dir" >&2;}
   { (exit 1); exit 1; }; }; }

  echo 0 > "$at_status_file"

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log.
  if test -z "$at_verbose"; then
    at_tee_pipe='tee -a "$at_group_log"'
  else
    at_tee_pipe='cat >> "$at_group_log"'
  fi
}

# at_func_group_postprocess
# -------------------------
at_func_group_postprocess ()
{
  # Be sure to come back to the suite directory, in particular
  # since below we might `rm' the group directory we are in currently.
  cd "$at_suite_dir"

  if test ! -f "$at_check_line_file"; then
    sed "s/^ */$as_me: WARNING: /" <<_ATEOF
      A failure happened in a test group before any test could be
      run. This means that test suite is improperly designed.  Please
      report this failure to <help-smalltalk@gnu.org>.
_ATEOF
    $as_echo "$at_setup_line" >"$at_check_line_file"
  fi
  $at_verbose $as_echo_n "$at_group. $at_setup_line: "
  $as_echo_n "$at_group. $at_setup_line: " >> "$at_group_log"
  case $at_xfail:$at_status in
    yes:0)
	at_msg="UNEXPECTED PASS"
	at_res=xpass
	at_errexit=$at_errexit_p
	;;
    no:0)
	at_msg="ok"
	at_res=pass
	at_errexit=false
	;;
    *:77)
	at_msg='skipped ('`cat "$at_check_line_file"`')'
	at_res=skip
	at_errexit=false
	;;
    yes:*)
	at_msg='expected failure ('`cat "$at_check_line_file"`')'
	at_res=xfail
	at_errexit=false
	;;
    no:*)
	at_msg='FAILED ('`cat "$at_check_line_file"`')'
	at_res=fail
	at_errexit=$at_errexit_p
	;;
  esac
  echo "$at_res" > "$at_job_dir/$at_res"
  # Make sure there is a separator even with long titles.
  $as_echo " $at_msg"
  at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
  case $at_status in
    0|77)
      # $at_times_file is only available if the group succeeded.
      # We're not including the group log, so the success message
      # is written in the global log separately.  But we also
      # write to the group log in case they're using -d.
      if test -f "$at_times_file"; then
	at_log_msg="$at_log_msg     ("`sed 1d "$at_times_file"`')'
	rm -f "$at_times_file"
      fi
      $as_echo "$at_log_msg" >> "$at_group_log"
      $as_echo "$at_log_msg" >&5

      # Cleanup the group directory, unless the user wants the files.
      if $at_debug_p; then
	at_func_create_debugging_script
      else
	if test -d "$at_group_dir"; then
	  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	  rm -fr "$at_group_dir"
	fi
	rm -f "$at_test_source"
      fi
      ;;
    *)
      # Upon failure, include the log into the testsuite's global
      # log.  The failure message is written in the group log.  It
      # is later included in the global log.
      $as_echo "$at_log_msg" >> "$at_group_log"

      # Upon failure, keep the group directory for autopsy, and create
      # the debugging script.  With -e, do not start any further tests.
      at_func_create_debugging_script
      if $at_errexit; then
	echo stop > "$at_stop_file"
      fi
      ;;
  esac
}


## ------------ ##
## Driver loop. ##
## ------------ ##

rm -f "$at_stop_file"
at_first=:

for at_group in $at_groups; do
  at_func_group_prepare
  if cd "$at_group_dir" &&
     at_func_test $at_group &&
     . "$at_test_source"; then :; else
    { $as_echo "$as_me:$LINENO: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
    at_failed=:
  fi
  at_func_group_postprocess
  test -f "$at_stop_file" && break
  at_first=false
done

# Wrap up the test suite with summary statistics.
cd "$at_helper_dir"

# Use ?..???? when the list must remain sorted, the faster * otherwise.
at_pass_list=`for f in */pass; do echo $f; done | sed '/\*/d; s,/pass,,'`
at_skip_list=`for f in */skip; do echo $f; done | sed '/\*/d; s,/skip,,'`
at_xfail_list=`for f in */xfail; do echo $f; done | sed '/\*/d; s,/xfail,,'`
at_xpass_list=`for f in ?/xpass ??/xpass ???/xpass ????/xpass; do
		 echo $f; done | sed '/?/d; s,/xpass,,'`
at_fail_list=`for f in ?/fail ??/fail ???/fail ????/fail; do
		echo $f; done | sed '/?/d; s,/fail,,'`

set X $at_pass_list $at_xpass_list $at_xfail_list $at_fail_list $at_skip_list
shift; at_group_count=$#
set X $at_xpass_list; shift; at_xpass_count=$#; at_xpass_list=$*
set X $at_xfail_list; shift; at_xfail_count=$#
set X $at_fail_list; shift; at_fail_count=$#; at_fail_list=$*
set X $at_skip_list; shift; at_skip_count=$#

at_func_arith $at_group_count - $at_skip_count
at_run_count=$at_func_arith_result
at_func_arith $at_xpass_count + $at_fail_count
at_unexpected_count=$at_func_arith_result
at_func_arith $at_xfail_count + $at_fail_count
at_total_fail_count=$at_func_arith_result

# Back to the top directory.
cd "$at_dir"
rm -rf "$at_helper_dir"

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`date +%s 2>/dev/null`
$as_echo "$as_me: ending at: $at_stop_date" >&5
case $at_start_time,$at_stop_time in
  [0-9]*,[0-9]*)
    at_func_arith $at_stop_time - $at_start_time
    at_duration_s=$at_func_arith_result
    at_func_arith $at_duration_s / 60
    at_duration_m=$at_func_arith_result
    at_func_arith $at_duration_m / 60
    at_duration_h=$at_func_arith_result
    at_func_arith $at_duration_s % 60
    at_duration_s=$at_func_arith_result
    at_func_arith $at_duration_m % 60
    at_duration_m=$at_func_arith_result
    at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
    $as_echo "$as_me: test suite duration: $at_duration" >&5
    ;;
esac

echo
cat <<\_ASBOX
## ------------- ##
## Test results. ##
## ------------- ##
_ASBOX
echo
{
  echo
  cat <<\_ASBOX
## ------------- ##
## Test results. ##
## ------------- ##
_ASBOX
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
else
  # Don't you just love exponential explosion of the number of cases?
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." ;;
    0:0:*) at_result="$at_result behaved as expected." ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_result"
  echo "$at_result" >&5
else
  echo "ERROR: $at_result" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    cat <<\_ASBOX
## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##
_ASBOX

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL "$at_myself" $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL "$at_myself" $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL "$at_myself" $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      cat <<\_ASBOX
## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##
_ASBOX
      echo
      for at_group in $at_fail_list
      do
	at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'

	cat "$at_suite_dir/$at_group_normalized/$as_me.log"
	echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## ${at_top_build_prefix}config.log ##
_ASBOX
      sed 's/^/| /' ${at_top_build_prefix}config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  $as_echo "Please send \`${at_testdir+${at_testdir}/}$as_me.log' and all information you think might help:

   To: <help-smalltalk@gnu.org>
   Subject: [GNU Smalltalk 3.1] $as_me: $at_fail_list${at_fail_list:+ failed${at_xpass_list:+, }}$at_xpass_list${at_xpass_list:+ passed unexpectedly}
"
  if test $at_debug_p = false; then
    echo
    echo 'You may investigate any problem if you feel able to do so, in which'
    echo 'case the test suite provides a good starting point.  Its output may'
    $as_echo "be found below \`${at_testdir+${at_testdir}/}$as_me.dir'."
    echo
  fi
    exit 1
fi

exit 0

## ------------- ##
## Actual tests. ##
## ------------- ##
#AT_START_1
# 1. testsuite.at:27: arrays.st
at_setup_line='testsuite.at:27'
at_func_banner 1
at_desc="arrays.st"
$at_quiet $as_echo_n "  1: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "1. testsuite.at:27: testing ..."
  $at_traceon



  cat $abs_srcdir/arrays.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r arrays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:27: { (cd \$abs_srcdir && gst \$image_path -r arrays.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:27 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r arrays.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r arrays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r arrays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:27"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_1
#AT_START_2
# 2. testsuite.at:28: classes.st
at_setup_line='testsuite.at:28'
at_func_banner 1
at_desc="classes.st"
$at_quiet $as_echo_n "  2: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "2. testsuite.at:28: testing ..."
  $at_traceon



  cat $abs_srcdir/classes.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r classes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:28: { (cd \$abs_srcdir && gst \$image_path -r classes.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:28 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r classes.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r classes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r classes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:28"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_2
#AT_START_3
# 3. testsuite.at:29: blocks.st
at_setup_line='testsuite.at:29'
at_func_banner 1
at_desc="blocks.st"
$at_quiet $as_echo_n "  3: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "3. testsuite.at:29: testing ..."
  $at_traceon



  cat $abs_srcdir/blocks.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r blocks.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:29: { (cd \$abs_srcdir && gst \$image_path -r blocks.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:29 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r blocks.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r blocks.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r blocks.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:29"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_3
#AT_START_4
# 4. testsuite.at:30: sets.st
at_setup_line='testsuite.at:30'
at_func_banner 1
at_desc="sets.st"
$at_quiet $as_echo_n "  4: $at_desc                                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "4. testsuite.at:30: testing ..."
  $at_traceon



  cat $abs_srcdir/sets.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r sets.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:30: { (cd \$abs_srcdir && gst \$image_path -r sets.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:30 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r sets.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r sets.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r sets.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:30"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_4
#AT_START_5
# 5. testsuite.at:31: processes.st
at_setup_line='testsuite.at:31'
at_func_banner 1
at_desc="processes.st"
$at_quiet $as_echo_n "  5: $at_desc                                   "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "5. testsuite.at:31: testing ..."
  $at_traceon



  cat $abs_srcdir/processes.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r processes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:31: { (cd \$abs_srcdir && gst \$image_path -r processes.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:31 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r processes.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r processes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r processes.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:31"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_5
#AT_START_6
# 6. testsuite.at:32: exceptions.st
at_setup_line='testsuite.at:32'
at_func_banner 1
at_desc="exceptions.st"
$at_quiet $as_echo_n "  6: $at_desc                                  "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "6. testsuite.at:32: testing ..."
  $at_traceon



  cat $abs_srcdir/exceptions.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r exceptions.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:32: { (cd \$abs_srcdir && gst \$image_path -r exceptions.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:32 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r exceptions.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r exceptions.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r exceptions.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:32"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_6
#AT_START_7
# 7. testsuite.at:33: intmath.st
at_setup_line='testsuite.at:33'
at_func_banner 1
at_desc="intmath.st"
$at_quiet $as_echo_n "  7: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "7. testsuite.at:33: testing ..."
  $at_traceon



  cat $abs_srcdir/intmath.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r intmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:33: { (cd \$abs_srcdir && gst \$image_path -r intmath.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:33 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r intmath.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r intmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r intmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:33"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_7
#AT_START_8
# 8. testsuite.at:34: floatmath.st
at_setup_line='testsuite.at:34'
at_func_banner 1
at_desc="floatmath.st"
$at_quiet $as_echo_n "  8: $at_desc                                   "
at_xfail=no

  case "$host" in
    alpha*-*-*) : ;;
    *) (exit 1) ;;
  esac && at_xfail=yes
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "8. testsuite.at:34: testing ..."
  $at_traceon



  cat $abs_srcdir/floatmath.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r floatmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:34: { (cd \$abs_srcdir && gst \$image_path -r floatmath.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:34 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r floatmath.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r floatmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r floatmath.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:34"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_8
#AT_START_9
# 9. testsuite.at:39: dates.st
at_setup_line='testsuite.at:39'
at_func_banner 1
at_desc="dates.st"
$at_quiet $as_echo_n "  9: $at_desc                                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "9. testsuite.at:39: testing ..."
  $at_traceon



  cat $abs_srcdir/dates.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r dates.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:39: { (cd \$abs_srcdir && gst \$image_path -r dates.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:39 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r dates.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r dates.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r dates.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:39"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_9
#AT_START_10
# 10. testsuite.at:40: objects.st
at_setup_line='testsuite.at:40'
at_func_banner 1
at_desc="objects.st"
$at_quiet $as_echo_n " 10: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "10. testsuite.at:40: testing ..."
  $at_traceon



  cat $abs_srcdir/objects.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r objects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:40: { (cd \$abs_srcdir && gst \$image_path -r objects.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:40 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r objects.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r objects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r objects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:40"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_10
#AT_START_11
# 11. testsuite.at:41: strings.st
at_setup_line='testsuite.at:41'
at_func_banner 1
at_desc="strings.st"
$at_quiet $as_echo_n " 11: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "11. testsuite.at:41: testing ..."
  $at_traceon



  cat $abs_srcdir/strings.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r strings.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:41: { (cd \$abs_srcdir && gst \$image_path -r strings.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:41 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r strings.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r strings.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r strings.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:41"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_11
#AT_START_12
# 12. testsuite.at:42: chars.st
at_setup_line='testsuite.at:42'
at_func_banner 1
at_desc="chars.st"
$at_quiet $as_echo_n " 12: $at_desc                                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "12. testsuite.at:42: testing ..."
  $at_traceon



  cat $abs_srcdir/chars.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r chars.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:42: { (cd \$abs_srcdir && gst \$image_path -r chars.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:42 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r chars.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r chars.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r chars.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:42"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_12
#AT_START_13
# 13. testsuite.at:43: objdump.st
at_setup_line='testsuite.at:43'
at_func_banner 1
at_desc="objdump.st"
$at_quiet $as_echo_n " 13: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "13. testsuite.at:43: testing ..."
  $at_traceon



  cat $abs_srcdir/objdump.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r objdump.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:43: { (cd \$abs_srcdir && gst \$image_path -r objdump.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:43 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r objdump.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r objdump.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r objdump.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:43"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_13
#AT_START_14
# 14. testsuite.at:44: delays.st
at_setup_line='testsuite.at:44'
at_func_banner 1
at_desc="delays.st"
$at_quiet $as_echo_n " 14: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "14. testsuite.at:44: testing ..."
  $at_traceon



  cat $abs_srcdir/delays.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r delays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:44: { (cd \$abs_srcdir && gst \$image_path -r delays.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:44 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r delays.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r delays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r delays.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:44"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_14
#AT_START_15
# 15. testsuite.at:45: geometry.st
at_setup_line='testsuite.at:45'
at_func_banner 1
at_desc="geometry.st"
$at_quiet $as_echo_n " 15: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "15. testsuite.at:45: testing ..."
  $at_traceon



  cat $abs_srcdir/geometry.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r geometry.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:45: { (cd \$abs_srcdir && gst \$image_path -r geometry.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:45 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r geometry.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r geometry.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r geometry.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:45"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_15
#AT_START_16
# 16. testsuite.at:46: cobjects.st
at_setup_line='testsuite.at:46'
at_func_banner 1
at_desc="cobjects.st"
$at_quiet $as_echo_n " 16: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "16. testsuite.at:46: testing ..."
  $at_traceon



  cat $abs_srcdir/cobjects.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r cobjects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:46: { (cd \$abs_srcdir && gst \$image_path -r cobjects.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:46 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r cobjects.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r cobjects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r cobjects.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:46"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_16
#AT_START_17
# 17. testsuite.at:47: compiler.st
at_setup_line='testsuite.at:47'
at_func_banner 1
at_desc="compiler.st"
$at_quiet $as_echo_n " 17: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "17. testsuite.at:47: testing ..."
  $at_traceon



  cat $abs_srcdir/compiler.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r compiler.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:47: { (cd \$abs_srcdir && gst \$image_path -r compiler.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:47 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r compiler.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r compiler.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r compiler.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:47"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_17
#AT_START_18
# 18. testsuite.at:48: fileext.st
at_setup_line='testsuite.at:48'
at_func_banner 1
at_desc="fileext.st"
$at_quiet $as_echo_n " 18: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "18. testsuite.at:48: testing ..."
  $at_traceon



  cat $abs_srcdir/fileext.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r fileext.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:48: { (cd \$abs_srcdir && gst \$image_path -r fileext.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:48 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r fileext.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r fileext.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r fileext.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:48"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_18
#AT_START_19
# 19. testsuite.at:49: mutate.st
at_setup_line='testsuite.at:49'
at_func_banner 1
at_desc="mutate.st"
$at_quiet $as_echo_n " 19: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "19. testsuite.at:49: testing ..."
  $at_traceon



  cat $abs_srcdir/mutate.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r mutate.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:49: { (cd \$abs_srcdir && gst \$image_path -r mutate.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:49 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r mutate.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r mutate.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r mutate.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:49"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_19
#AT_START_20
# 20. testsuite.at:50: untrusted.st
at_setup_line='testsuite.at:50'
at_func_banner 1
at_desc="untrusted.st"
$at_quiet $as_echo_n " 20: $at_desc                                   "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "20. testsuite.at:50: testing ..."
  $at_traceon



  cat $abs_srcdir/untrusted.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r untrusted.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:50: { (cd \$abs_srcdir && gst \$image_path -r untrusted.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:50 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r untrusted.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r untrusted.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r untrusted.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:50"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_20
#AT_START_21
# 21. testsuite.at:51: getopt.st
at_setup_line='testsuite.at:51'
at_func_banner 1
at_desc="getopt.st"
$at_quiet $as_echo_n " 21: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "21. testsuite.at:51: testing ..."
  $at_traceon



  cat $abs_srcdir/getopt.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r getopt.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:51: { (cd \$abs_srcdir && gst \$image_path -r getopt.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:51 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r getopt.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r getopt.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r getopt.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:51"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_21
#AT_START_22
# 22. testsuite.at:52: quit.st
at_setup_line='testsuite.at:52'
at_func_banner 1
at_desc="quit.st"
$at_quiet $as_echo_n " 22: $at_desc                                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "22. testsuite.at:52: testing ..."
  $at_traceon



  cat $abs_srcdir/quit.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r quit.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:52: { (cd \$abs_srcdir && gst \$image_path -r quit.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:52 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r quit.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r quit.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r quit.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:52"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_22
#AT_START_23
# 23. testsuite.at:53: pools.st
at_setup_line='testsuite.at:53'
at_func_banner 1
at_desc="pools.st"
$at_quiet $as_echo_n " 23: $at_desc                                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "23. testsuite.at:53: testing ..."
  $at_traceon



  cat $abs_srcdir/pools.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r pools.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:53: { (cd \$abs_srcdir && gst \$image_path -r pools.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:53 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r pools.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r pools.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r pools.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:53"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_23
#AT_START_24
# 24. testsuite.at:56: ackermann.st
at_setup_line='testsuite.at:56'
at_func_banner 2
at_desc="ackermann.st"
$at_quiet $as_echo_n " 24: $at_desc                                   "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "24. testsuite.at:56: testing ..."
  $at_traceon



  cat $abs_srcdir/ackermann.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r ackermann.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:56: { (cd \$abs_srcdir && gst \$image_path -r ackermann.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:56 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r ackermann.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r ackermann.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r ackermann.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:56"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_24
#AT_START_25
# 25. testsuite.at:57: ary3.st
at_setup_line='testsuite.at:57'
at_func_banner 2
at_desc="ary3.st"
$at_quiet $as_echo_n " 25: $at_desc                                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "25. testsuite.at:57: testing ..."
  $at_traceon



  cat $abs_srcdir/ary3.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r ary3.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:57: { (cd \$abs_srcdir && gst \$image_path -r ary3.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:57 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r ary3.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r ary3.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r ary3.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:57"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_25
#AT_START_26
# 26. testsuite.at:58: except.st
at_setup_line='testsuite.at:58'
at_func_banner 2
at_desc="except.st"
$at_quiet $as_echo_n " 26: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "26. testsuite.at:58: testing ..."
  $at_traceon



  cat $abs_srcdir/except.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r except.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:58: { (cd \$abs_srcdir && gst \$image_path -r except.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:58 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r except.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r except.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r except.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:58"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_26
#AT_START_27
# 27. testsuite.at:59: fibo.st
at_setup_line='testsuite.at:59'
at_func_banner 2
at_desc="fibo.st"
$at_quiet $as_echo_n " 27: $at_desc                                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "27. testsuite.at:59: testing ..."
  $at_traceon



  cat $abs_srcdir/fibo.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r fibo.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:59: { (cd \$abs_srcdir && gst \$image_path -r fibo.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:59 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r fibo.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r fibo.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r fibo.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:59"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_27
#AT_START_28
# 28. testsuite.at:60: hash.st
at_setup_line='testsuite.at:60'
at_func_banner 2
at_desc="hash.st"
$at_quiet $as_echo_n " 28: $at_desc                                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "28. testsuite.at:60: testing ..."
  $at_traceon



  cat $abs_srcdir/hash.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r hash.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:60: { (cd \$abs_srcdir && gst \$image_path -r hash.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:60 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r hash.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r hash.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r hash.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:60"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_28
#AT_START_29
# 29. testsuite.at:61: hash2.st
at_setup_line='testsuite.at:61'
at_func_banner 2
at_desc="hash2.st"
$at_quiet $as_echo_n " 29: $at_desc                                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "29. testsuite.at:61: testing ..."
  $at_traceon



  cat $abs_srcdir/hash2.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r hash2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:61: { (cd \$abs_srcdir && gst \$image_path -r hash2.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:61 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r hash2.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r hash2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r hash2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:61"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_29
#AT_START_30
# 30. testsuite.at:62: heapsort.st
at_setup_line='testsuite.at:62'
at_func_banner 2
at_desc="heapsort.st"
$at_quiet $as_echo_n " 30: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "30. testsuite.at:62: testing ..."
  $at_traceon



  cat $abs_srcdir/heapsort.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r heapsort.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:62: { (cd \$abs_srcdir && gst \$image_path -r heapsort.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:62 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r heapsort.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r heapsort.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r heapsort.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:62"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_30
#AT_START_31
# 31. testsuite.at:63: lists.st
at_setup_line='testsuite.at:63'
at_func_banner 2
at_desc="lists.st"
$at_quiet $as_echo_n " 31: $at_desc                                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "31. testsuite.at:63: testing ..."
  $at_traceon



  cat $abs_srcdir/lists.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r lists.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:63: { (cd \$abs_srcdir && gst \$image_path -r lists.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:63 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r lists.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r lists.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r lists.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:63"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_31
#AT_START_32
# 32. testsuite.at:64: lists1.st
at_setup_line='testsuite.at:64'
at_func_banner 2
at_desc="lists1.st"
$at_quiet $as_echo_n " 32: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "32. testsuite.at:64: testing ..."
  $at_traceon



  cat $abs_srcdir/lists1.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r lists1.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:64: { (cd \$abs_srcdir && gst \$image_path -r lists1.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:64 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r lists1.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r lists1.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r lists1.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:64"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_32
#AT_START_33
# 33. testsuite.at:65: lists2.st
at_setup_line='testsuite.at:65'
at_func_banner 2
at_desc="lists2.st"
$at_quiet $as_echo_n " 33: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "33. testsuite.at:65: testing ..."
  $at_traceon



  cat $abs_srcdir/lists2.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r lists2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:65: { (cd \$abs_srcdir && gst \$image_path -r lists2.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:65 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r lists2.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r lists2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r lists2.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:65"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_33
#AT_START_34
# 34. testsuite.at:66: matrix.st
at_setup_line='testsuite.at:66'
at_func_banner 2
at_desc="matrix.st"
$at_quiet $as_echo_n " 34: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "34. testsuite.at:66: testing ..."
  $at_traceon



  cat $abs_srcdir/matrix.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r matrix.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:66: { (cd \$abs_srcdir && gst \$image_path -r matrix.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:66 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r matrix.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r matrix.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r matrix.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:66"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_34
#AT_START_35
# 35. testsuite.at:67: methcall.st
at_setup_line='testsuite.at:67'
at_func_banner 2
at_desc="methcall.st"
$at_quiet $as_echo_n " 35: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "35. testsuite.at:67: testing ..."
  $at_traceon



  cat $abs_srcdir/methcall.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r methcall.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:67: { (cd \$abs_srcdir && gst \$image_path -r methcall.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:67 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r methcall.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r methcall.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r methcall.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:67"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_35
#AT_START_36
# 36. testsuite.at:68: nestedloop.st
at_setup_line='testsuite.at:68'
at_func_banner 2
at_desc="nestedloop.st"
$at_quiet $as_echo_n " 36: $at_desc                                  "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "36. testsuite.at:68: testing ..."
  $at_traceon



  cat $abs_srcdir/nestedloop.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r nestedloop.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:68: { (cd \$abs_srcdir && gst \$image_path -r nestedloop.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:68 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r nestedloop.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r nestedloop.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r nestedloop.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:68"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_36
#AT_START_37
# 37. testsuite.at:69: objinst.st
at_setup_line='testsuite.at:69'
at_func_banner 2
at_desc="objinst.st"
$at_quiet $as_echo_n " 37: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "37. testsuite.at:69: testing ..."
  $at_traceon



  cat $abs_srcdir/objinst.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r objinst.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:69: { (cd \$abs_srcdir && gst \$image_path -r objinst.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:69 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r objinst.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r objinst.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r objinst.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:69"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_37
#AT_START_38
# 38. testsuite.at:70: prodcons.st
at_setup_line='testsuite.at:70'
at_func_banner 2
at_desc="prodcons.st"
$at_quiet $as_echo_n " 38: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "38. testsuite.at:70: testing ..."
  $at_traceon



  cat $abs_srcdir/prodcons.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r prodcons.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:70: { (cd \$abs_srcdir && gst \$image_path -r prodcons.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:70 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r prodcons.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r prodcons.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r prodcons.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:70"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_38
#AT_START_39
# 39. testsuite.at:71: random-bench.st
at_setup_line='testsuite.at:71'
at_func_banner 2
at_desc="random-bench.st"
$at_quiet $as_echo_n " 39: $at_desc                                "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "39. testsuite.at:71: testing ..."
  $at_traceon



  cat $abs_srcdir/random-bench.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r random-bench.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:71: { (cd \$abs_srcdir && gst \$image_path -r random-bench.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:71 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r random-bench.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r random-bench.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r random-bench.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:71"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_39
#AT_START_40
# 40. testsuite.at:72: sieve.st
at_setup_line='testsuite.at:72'
at_func_banner 2
at_desc="sieve.st"
$at_quiet $as_echo_n " 40: $at_desc                                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "40. testsuite.at:72: testing ..."
  $at_traceon



  cat $abs_srcdir/sieve.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r sieve.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:72: { (cd \$abs_srcdir && gst \$image_path -r sieve.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:72 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r sieve.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r sieve.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r sieve.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:72"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_40
#AT_START_41
# 41. testsuite.at:73: strcat.st
at_setup_line='testsuite.at:73'
at_func_banner 2
at_desc="strcat.st"
$at_quiet $as_echo_n " 41: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "41. testsuite.at:73: testing ..."
  $at_traceon



  cat $abs_srcdir/strcat.ok > expout

  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_srcdir && gst $image_path -r strcat.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:73: { (cd \$abs_srcdir && gst \$image_path -r strcat.st 2>&1); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:73 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_srcdir && gst $image_path -r strcat.st 2>&1); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_srcdir && gst $image_path -r strcat.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_srcdir && gst $image_path -r strcat.st 2>&1); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
$at_diff expout "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:73"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_41
#AT_START_42
# 42. testsuite.at:76: SUnit
at_setup_line='testsuite.at:76'
at_func_banner 3
at_desc="SUnit"
$at_quiet $as_echo_n " 42: $at_desc                                          "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "42. testsuite.at:76: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:76: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:76 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p SUnit); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:76"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_42
#AT_START_43
# 43. testsuite.at:77: Parser
at_setup_line='testsuite.at:77'
at_func_banner 3
at_desc="Parser"
$at_quiet $as_echo_n " 43: $at_desc                                         "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "43. testsuite.at:77: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:77: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:77 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Parser); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:77"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_43
#AT_START_44
# 44. testsuite.at:80: ArrayANSITest
at_setup_line='testsuite.at:80'
at_func_banner 4
at_desc="ArrayANSITest"
$at_quiet $as_echo_n " 44: $at_desc                                  "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "44. testsuite.at:80: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:80: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ArrayANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:80 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:80"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_44
#AT_START_45
# 45. testsuite.at:81: ArrayFactoryANSITest
at_setup_line='testsuite.at:81'
at_func_banner 4
at_desc="ArrayFactoryANSITest"
$at_quiet $as_echo_n " 45: $at_desc                           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "45. testsuite.at:81: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:81: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:81 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:81"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_45
#AT_START_46
# 46. testsuite.at:82: BagANSITest
at_setup_line='testsuite.at:82'
at_func_banner 4
at_desc="BagANSITest"
$at_quiet $as_echo_n " 46: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "46. testsuite.at:82: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:82: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st BagANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:82 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:82"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_46
#AT_START_47
# 47. testsuite.at:83: BagFactoryANSITest
at_setup_line='testsuite.at:83'
at_func_banner 4
at_desc="BagFactoryANSITest"
$at_quiet $as_echo_n " 47: $at_desc                             "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "47. testsuite.at:83: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:83: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:83 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BagFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:83"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_47
#AT_START_48
# 48. testsuite.at:84: BooleanANSITest
at_setup_line='testsuite.at:84'
at_func_banner 4
at_desc="BooleanANSITest"
$at_quiet $as_echo_n " 48: $at_desc                                "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "48. testsuite.at:84: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BooleanANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:84: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st BooleanANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:84 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BooleanANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BooleanANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st BooleanANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:84"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_48
#AT_START_49
# 49. testsuite.at:85: ByteArrayANSITest
at_setup_line='testsuite.at:85'
at_func_banner 4
at_desc="ByteArrayANSITest"
$at_quiet $as_echo_n " 49: $at_desc                              "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "49. testsuite.at:85: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:85: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:85 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:85"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_49
#AT_START_50
# 50. testsuite.at:86: ByteArrayFactoryANSITest
at_setup_line='testsuite.at:86'
at_func_banner 4
at_desc="ByteArrayFactoryANSITest"
$at_quiet $as_echo_n " 50: $at_desc                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "50. testsuite.at:86: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:86: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:86 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ByteArrayFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:86"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_50
#AT_START_51
# 51. testsuite.at:87: CharacterANSITest
at_setup_line='testsuite.at:87'
at_func_banner 4
at_desc="CharacterANSITest"
$at_quiet $as_echo_n " 51: $at_desc                              "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "51. testsuite.at:87: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:87: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st CharacterANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:87 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:87"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_51
#AT_START_52
# 52. testsuite.at:88: CharacterFactoryANSITest
at_setup_line='testsuite.at:88'
at_func_banner 4
at_desc="CharacterFactoryANSITest"
$at_quiet $as_echo_n " 52: $at_desc                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "52. testsuite.at:88: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:88: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:88 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st CharacterFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:88"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_52
#AT_START_53
# 53. testsuite.at:89: DateAndTimeANSITest
at_setup_line='testsuite.at:89'
at_func_banner 4
at_desc="DateAndTimeANSITest"
$at_quiet $as_echo_n " 53: $at_desc                            "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "53. testsuite.at:89: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:89: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:89 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:89"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_53
#AT_START_54
# 54. testsuite.at:90: DateAndTimeFactoryANSITest
at_setup_line='testsuite.at:90'
at_func_banner 4
at_desc="DateAndTimeFactoryANSITest"
$at_quiet $as_echo_n " 54: $at_desc                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "54. testsuite.at:90: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:90: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:90 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DateAndTimeFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:90"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_54
#AT_START_55
# 55. testsuite.at:91: DictionaryANSITest
at_setup_line='testsuite.at:91'
at_func_banner 4
at_desc="DictionaryANSITest"
$at_quiet $as_echo_n " 55: $at_desc                             "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "55. testsuite.at:91: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:91: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:91 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:91"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_55
#AT_START_56
# 56. testsuite.at:92: DictionaryFactoryANSITest
at_setup_line='testsuite.at:92'
at_func_banner 4
at_desc="DictionaryFactoryANSITest"
$at_quiet $as_echo_n " 56: $at_desc                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "56. testsuite.at:92: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:92: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:92 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:92"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_56
#AT_START_57
# 57. testsuite.at:93: DurationANSITest
at_setup_line='testsuite.at:93'
at_func_banner 4
at_desc="DurationANSITest"
$at_quiet $as_echo_n " 57: $at_desc                               "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "57. testsuite.at:93: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:93: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DurationANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:93 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:93"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_57
#AT_START_58
# 58. testsuite.at:94: DurationFactoryANSITest
at_setup_line='testsuite.at:94'
at_func_banner 4
at_desc="DurationFactoryANSITest"
$at_quiet $as_echo_n " 58: $at_desc                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "58. testsuite.at:94: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:94: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:94 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DurationFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:94"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_58
#AT_START_59
# 59. testsuite.at:95: DyadicValuableANSITest
at_setup_line='testsuite.at:95'
at_func_banner 4
at_desc="DyadicValuableANSITest"
$at_quiet $as_echo_n " 59: $at_desc                         "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "59. testsuite.at:95: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:95: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:95 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st DyadicValuableANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:95"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_59
#AT_START_60
# 60. testsuite.at:96: ErrorANSITest
at_setup_line='testsuite.at:96'
at_func_banner 4
at_desc="ErrorANSITest"
$at_quiet $as_echo_n " 60: $at_desc                                  "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "60. testsuite.at:96: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:96: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ErrorANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:96 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:96"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_60
#AT_START_61
# 61. testsuite.at:97: ErrorClassANSITest
at_setup_line='testsuite.at:97'
at_func_banner 4
at_desc="ErrorClassANSITest"
$at_quiet $as_echo_n " 61: $at_desc                             "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "61. testsuite.at:97: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:97: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:97 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ErrorClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:97"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_61
#AT_START_62
# 62. testsuite.at:98: ExceptionANSITest
at_setup_line='testsuite.at:98'
at_func_banner 4
at_desc="ExceptionANSITest"
$at_quiet $as_echo_n " 62: $at_desc                              "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "62. testsuite.at:98: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:98: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:98 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:98"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_62
#AT_START_63
# 63. testsuite.at:99: ExceptionClassANSITest
at_setup_line='testsuite.at:99'
at_func_banner 4
at_desc="ExceptionClassANSITest"
$at_quiet $as_echo_n " 63: $at_desc                         "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "63. testsuite.at:99: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:99: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:99 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:99"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_63
#AT_START_64
# 64. testsuite.at:100: ExceptionSetANSITest
at_setup_line='testsuite.at:100'
at_func_banner 4
at_desc="ExceptionSetANSITest"
$at_quiet $as_echo_n " 64: $at_desc                           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "64. testsuite.at:100: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:100: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:100 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ExceptionSetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:100"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_64
#AT_START_65
# 65. testsuite.at:101: FailedMessageANSITest
at_setup_line='testsuite.at:101'
at_func_banner 4
at_desc="FailedMessageANSITest"
$at_quiet $as_echo_n " 65: $at_desc                          "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "65. testsuite.at:101: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:101: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:101 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FailedMessageANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:101"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_65
#AT_START_66
# 66. testsuite.at:102: FileStreamFactoryANSITest
at_setup_line='testsuite.at:102'
at_func_banner 4
at_desc="FileStreamFactoryANSITest"
$at_quiet $as_echo_n " 66: $at_desc                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "66. testsuite.at:102: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:102: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:102 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FileStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:102"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_66
#AT_START_67
# 67. testsuite.at:103: FloatANSITest
at_setup_line='testsuite.at:103'
at_func_banner 4
at_desc="FloatANSITest"
$at_quiet $as_echo_n " 67: $at_desc                                  "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "67. testsuite.at:103: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:103: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FloatANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:103 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:103"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_67
#AT_START_68
# 68. testsuite.at:104: FloatCharacterizationANSITest
at_setup_line='testsuite.at:104'
at_func_banner 4
at_desc="FloatCharacterizationANSITest"
$at_quiet $as_echo_n " 68: $at_desc                  "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "68. testsuite.at:104: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:104: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:104 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FloatCharacterizationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:104"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_68
#AT_START_69
# 69. testsuite.at:105: FractionANSITest
at_setup_line='testsuite.at:105'
at_func_banner 4
at_desc="FractionANSITest"
$at_quiet $as_echo_n " 69: $at_desc                               "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "69. testsuite.at:105: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:105: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FractionANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:105 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:105"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_69
#AT_START_70
# 70. testsuite.at:106: FractionFactoryANSITest
at_setup_line='testsuite.at:106'
at_func_banner 4
at_desc="FractionFactoryANSITest"
$at_quiet $as_echo_n " 70: $at_desc                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "70. testsuite.at:106: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:106: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:106 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st FractionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:106"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_70
#AT_START_71
# 71. testsuite.at:107: IdentityDictionaryANSITest
at_setup_line='testsuite.at:107'
at_func_banner 4
at_desc="IdentityDictionaryANSITest"
$at_quiet $as_echo_n " 71: $at_desc                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "71. testsuite.at:107: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:107: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:107 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:107"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_71
#AT_START_72
# 72. testsuite.at:108: IdentityDictionaryFactoryANSITest
at_setup_line='testsuite.at:108'
at_func_banner 4
at_desc="IdentityDictionaryFactoryANSITest"
$at_quiet $as_echo_n " 72: $at_desc              "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "72. testsuite.at:108: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:108: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:108 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IdentityDictionaryFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:108"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_72
#AT_START_73
# 73. testsuite.at:109: IntegerANSITest
at_setup_line='testsuite.at:109'
at_func_banner 4
at_desc="IntegerANSITest"
$at_quiet $as_echo_n " 73: $at_desc                                "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "73. testsuite.at:109: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntegerANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:109: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IntegerANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:109 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntegerANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntegerANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntegerANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:109"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_73
#AT_START_74
# 74. testsuite.at:110: IntervalANSITest
at_setup_line='testsuite.at:110'
at_func_banner 4
at_desc="IntervalANSITest"
$at_quiet $as_echo_n " 74: $at_desc                               "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "74. testsuite.at:110: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:110: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IntervalANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:110 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:110"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_74
#AT_START_75
# 75. testsuite.at:111: IntervalFactoryANSITest
at_setup_line='testsuite.at:111'
at_func_banner 4
at_desc="IntervalFactoryANSITest"
$at_quiet $as_echo_n " 75: $at_desc                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "75. testsuite.at:111: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:111: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:111 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st IntervalFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:111"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_75
#AT_START_76
# 76. testsuite.at:112: MessageNotUnderstoodANSITest
at_setup_line='testsuite.at:112'
at_func_banner 4
at_desc="MessageNotUnderstoodANSITest"
$at_quiet $as_echo_n " 76: $at_desc                   "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "76. testsuite.at:112: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:112: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:112 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:112"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_76
#AT_START_77
# 77. testsuite.at:113: MessageNotUnderstoodSelectorANSITest
at_setup_line='testsuite.at:113'
at_func_banner 4
at_desc="MessageNotUnderstoodSelectorANSITest"
$at_quiet $as_echo_n " 77: $at_desc           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "77. testsuite.at:113: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:113: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:113 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MessageNotUnderstoodSelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:113"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_77
#AT_START_78
# 78. testsuite.at:114: MonadicBlockANSITest
at_setup_line='testsuite.at:114'
at_func_banner 4
at_desc="MonadicBlockANSITest"
$at_quiet $as_echo_n " 78: $at_desc                           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "78. testsuite.at:114: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:114: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:114 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st MonadicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:114"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_78
#AT_START_79
# 79. testsuite.at:115: NilANSITest
at_setup_line='testsuite.at:115'
at_func_banner 4
at_desc="NilANSITest"
$at_quiet $as_echo_n " 79: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "79. testsuite.at:115: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NilANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:115: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st NilANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:115 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NilANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NilANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NilANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:115"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_79
#AT_START_80
# 80. testsuite.at:116: NiladicBlockANSITest
at_setup_line='testsuite.at:116'
at_func_banner 4
at_desc="NiladicBlockANSITest"
$at_quiet $as_echo_n " 80: $at_desc                           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "80. testsuite.at:116: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:116: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:116 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NiladicBlockANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:116"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_80
#AT_START_81
# 81. testsuite.at:117: NotificationANSITest
at_setup_line='testsuite.at:117'
at_func_banner 4
at_desc="NotificationANSITest"
$at_quiet $as_echo_n " 81: $at_desc                           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "81. testsuite.at:117: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:117: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st NotificationANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:117 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:117"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_81
#AT_START_82
# 82. testsuite.at:118: NotificationClassANSITest
at_setup_line='testsuite.at:118'
at_func_banner 4
at_desc="NotificationClassANSITest"
$at_quiet $as_echo_n " 82: $at_desc                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "82. testsuite.at:118: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:118: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:118 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st NotificationClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:118"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_82
#AT_START_83
# 83. testsuite.at:119: ObjectANSITest
at_setup_line='testsuite.at:119'
at_func_banner 4
at_desc="ObjectANSITest"
$at_quiet $as_echo_n " 83: $at_desc                                 "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "83. testsuite.at:119: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:119: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ObjectANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:119 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:119"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_83
#AT_START_84
# 84. testsuite.at:120: ObjectClassANSITest
at_setup_line='testsuite.at:120'
at_func_banner 4
at_desc="ObjectClassANSITest"
$at_quiet $as_echo_n " 84: $at_desc                            "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "84. testsuite.at:120: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:120: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:120 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ObjectClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:120"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_84
#AT_START_85
# 85. testsuite.at:121: OrderedCollectionANSITest
at_setup_line='testsuite.at:121'
at_func_banner 4
at_desc="OrderedCollectionANSITest"
$at_quiet $as_echo_n " 85: $at_desc                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "85. testsuite.at:121: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:121: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:121 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:121"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_85
#AT_START_86
# 86. testsuite.at:122: OrderedCollectionFactoryANSITest
at_setup_line='testsuite.at:122'
at_func_banner 4
at_desc="OrderedCollectionFactoryANSITest"
$at_quiet $as_echo_n " 86: $at_desc               "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "86. testsuite.at:122: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:122: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:122 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st OrderedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:122"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_86
#AT_START_87
# 87. testsuite.at:123: ReadFileStreamANSITest
at_setup_line='testsuite.at:123'
at_func_banner 4
at_desc="ReadFileStreamANSITest"
$at_quiet $as_echo_n " 87: $at_desc                         "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "87. testsuite.at:123: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:123: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:123 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:123"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_87
#AT_START_88
# 88. testsuite.at:124: ReadStreamANSITest
at_setup_line='testsuite.at:124'
at_func_banner 4
at_desc="ReadStreamANSITest"
$at_quiet $as_echo_n " 88: $at_desc                             "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "88. testsuite.at:124: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:124: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:124 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:124"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_88
#AT_START_89
# 89. testsuite.at:125: ReadStreamFactoryANSITest
at_setup_line='testsuite.at:125'
at_func_banner 4
at_desc="ReadStreamFactoryANSITest"
$at_quiet $as_echo_n " 89: $at_desc                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "89. testsuite.at:125: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:125: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:125 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:125"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_89
#AT_START_90
# 90. testsuite.at:126: ReadWriteStreamANSITest
at_setup_line='testsuite.at:126'
at_func_banner 4
at_desc="ReadWriteStreamANSITest"
$at_quiet $as_echo_n " 90: $at_desc                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "90. testsuite.at:126: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:126: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:126 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:126"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_90
#AT_START_91
# 91. testsuite.at:127: ReadWriteStreamFactoryANSITest
at_setup_line='testsuite.at:127'
at_func_banner 4
at_desc="ReadWriteStreamFactoryANSITest"
$at_quiet $as_echo_n " 91: $at_desc                 "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "91. testsuite.at:127: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:127: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:127 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ReadWriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:127"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_91
#AT_START_92
# 92. testsuite.at:128: ScaledDecimalANSITest
at_setup_line='testsuite.at:128'
at_func_banner 4
at_desc="ScaledDecimalANSITest"
$at_quiet $as_echo_n " 92: $at_desc                          "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "92. testsuite.at:128: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:128: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:128 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ScaledDecimalANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:128"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_92
#AT_START_93
# 93. testsuite.at:129: SelectorANSITest
at_setup_line='testsuite.at:129'
at_func_banner 4
at_desc="SelectorANSITest"
$at_quiet $as_echo_n " 93: $at_desc                               "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "93. testsuite.at:129: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:129: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SelectorANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:129 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SelectorANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SelectorANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:129"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_93
#AT_START_94
# 94. testsuite.at:130: SetANSITest
at_setup_line='testsuite.at:130'
at_func_banner 4
at_desc="SetANSITest"
$at_quiet $as_echo_n " 94: $at_desc                                    "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "94. testsuite.at:130: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:130: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SetANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:130 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:130"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_94
#AT_START_95
# 95. testsuite.at:131: SetFactoryANSITest
at_setup_line='testsuite.at:131'
at_func_banner 4
at_desc="SetFactoryANSITest"
$at_quiet $as_echo_n " 95: $at_desc                             "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "95. testsuite.at:131: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:131: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:131 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SetFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:131"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_95
#AT_START_96
# 96. testsuite.at:132: SortedCollectionANSITest
at_setup_line='testsuite.at:132'
at_func_banner 4
at_desc="SortedCollectionANSITest"
$at_quiet $as_echo_n " 96: $at_desc                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "96. testsuite.at:132: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:132: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:132 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:132"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_96
#AT_START_97
# 97. testsuite.at:133: SortedCollectionFactoryANSITest
at_setup_line='testsuite.at:133'
at_func_banner 4
at_desc="SortedCollectionFactoryANSITest"
$at_quiet $as_echo_n " 97: $at_desc                "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "97. testsuite.at:133: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:133: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:133 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SortedCollectionFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:133"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_97
#AT_START_98
# 98. testsuite.at:134: StringANSITest
at_setup_line='testsuite.at:134'
at_func_banner 4
at_desc="StringANSITest"
$at_quiet $as_echo_n " 98: $at_desc                                 "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "98. testsuite.at:134: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:134: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st StringANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:134 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:134"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_98
#AT_START_99
# 99. testsuite.at:135: StringFactoryANSITest
at_setup_line='testsuite.at:135'
at_func_banner 4
at_desc="StringFactoryANSITest"
$at_quiet $as_echo_n " 99: $at_desc                          "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "99. testsuite.at:135: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:135: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:135 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st StringFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:135"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_99
#AT_START_100
# 100. testsuite.at:136: SymbolANSITest
at_setup_line='testsuite.at:136'
at_func_banner 4
at_desc="SymbolANSITest"
$at_quiet $as_echo_n "100: $at_desc                                 "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "100. testsuite.at:136: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SymbolANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:136: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st SymbolANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:136 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SymbolANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SymbolANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st SymbolANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:136"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_100
#AT_START_101
# 101. testsuite.at:137: TranscriptANSITest
at_setup_line='testsuite.at:137'
at_func_banner 4
at_desc="TranscriptANSITest"
$at_quiet $as_echo_n "101: $at_desc                             "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "101. testsuite.at:137: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:137: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:137 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st TranscriptANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:137"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_101
#AT_START_102
# 102. testsuite.at:138: WarningANSITest
at_setup_line='testsuite.at:138'
at_func_banner 4
at_desc="WarningANSITest"
$at_quiet $as_echo_n "102: $at_desc                                "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "102. testsuite.at:138: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:138: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WarningANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:138 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:138"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_102
#AT_START_103
# 103. testsuite.at:139: WarningClassANSITest
at_setup_line='testsuite.at:139'
at_func_banner 4
at_desc="WarningClassANSITest"
$at_quiet $as_echo_n "103: $at_desc                           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "103. testsuite.at:139: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:139: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:139 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WarningClassANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:139"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_103
#AT_START_104
# 104. testsuite.at:140: WriteFileStreamANSITest
at_setup_line='testsuite.at:140'
at_func_banner 4
at_desc="WriteFileStreamANSITest"
$at_quiet $as_echo_n "104: $at_desc                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "104. testsuite.at:140: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:140: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:140 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteFileStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:140"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_104
#AT_START_105
# 105. testsuite.at:141: WriteStreamANSITest
at_setup_line='testsuite.at:141'
at_func_banner 4
at_desc="WriteStreamANSITest"
$at_quiet $as_echo_n "105: $at_desc                            "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "105. testsuite.at:141: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:141: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:141 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:141"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_105
#AT_START_106
# 106. testsuite.at:142: WriteStreamFactoryANSITest
at_setup_line='testsuite.at:142'
at_func_banner 4
at_desc="WriteStreamFactoryANSITest"
$at_quiet $as_echo_n "106: $at_desc                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "106. testsuite.at:142: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:142: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:142 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st WriteStreamFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:142"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_106
#AT_START_107
# 107. testsuite.at:143: ZeroDivideANSITest
at_setup_line='testsuite.at:143'
at_func_banner 4
at_desc="ZeroDivideANSITest"
$at_quiet $as_echo_n "107: $at_desc                             "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "107. testsuite.at:143: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:143: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:143 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:143"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_107
#AT_START_108
# 108. testsuite.at:144: ZeroDivideFactoryANSITest
at_setup_line='testsuite.at:144'
at_func_banner 4
at_desc="ZeroDivideFactoryANSITest"
$at_quiet $as_echo_n "108: $at_desc                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "108. testsuite.at:144: testing ..."
  $at_traceon




  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_builddir/gst.im" ;;
    *) image_path="-I $abs_builddir/gst.im" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:144: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:144 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_srcdir/AnsiRun.st ZeroDivideFactoryANSITest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:144"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_108
#AT_START_109
# 109. testsuite.at:147: Complex
at_setup_line='testsuite.at:147'
at_func_banner 5
at_desc="Complex"
$at_quiet $as_echo_n "109: $at_desc                                        "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "109. testsuite.at:147: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:147: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:147 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Complex); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:147"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_109
#AT_START_110
# 110. testsuite.at:148: Continuations
at_setup_line='testsuite.at:148'
at_func_banner 5
at_desc="Continuations"
$at_quiet $as_echo_n "110: $at_desc                                  "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "110. testsuite.at:148: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:148: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:148 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Continuations); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:148"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_110
#AT_START_111
# 111. testsuite.at:149: DBD-MySQL
at_setup_line='testsuite.at:149'
at_func_banner 5
at_desc="DBD-MySQL"
$at_quiet $as_echo_n "111: $at_desc                                      "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "111. testsuite.at:149: testing ..."
  $at_traceon



  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:149: test \"\$enable_mysql_tests\" != no || exit 77"
echo testsuite.at:149 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "test \"$enable_mysql_tests\" != no || exit 77"; then
  ( $at_traceon; test "$enable_mysql_tests" != no || exit 77 ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; test "$enable_mysql_tests" != no || exit 77 ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
at_func_diff_devnull "$at_stdout" || at_failed=:
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:149"

$at_failed && at_func_log_failure
$at_traceon; }


  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose $mysqlvars -p DBD-MySQL); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:149: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose \$mysqlvars -p DBD-MySQL); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:149 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose $mysqlvars -p DBD-MySQL); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose $mysqlvars -p DBD-MySQL); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose $mysqlvars -p DBD-MySQL); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:149"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_111
#AT_START_112
# 112. testsuite.at:150: DBD-SQLite
at_setup_line='testsuite.at:150'
at_func_banner 5
at_desc="DBD-SQLite"
$at_quiet $as_echo_n "112: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "112. testsuite.at:150: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DBD-SQLite
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:150: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p DBD-SQLite
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:150 >"$at_check_line_file"

if { echo 'Not enabling shell tracing (command contains an embedded newline)'
   false; }; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DBD-SQLite
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DBD-SQLite
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:150"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_112
#AT_START_113
# 113. testsuite.at:151: DebugTools
at_setup_line='testsuite.at:151'
at_func_banner 5
at_desc="DebugTools"
$at_quiet $as_echo_n "113: $at_desc                                     "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "113. testsuite.at:151: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:151: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:151 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DebugTools); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:151"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_113
#AT_START_114
# 114. testsuite.at:152: DhbNumericalMethods
at_setup_line='testsuite.at:152'
at_func_banner 5
at_desc="DhbNumericalMethods"
$at_quiet $as_echo_n "114: $at_desc                            "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "114. testsuite.at:152: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:152: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:152 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p DhbNumericalMethods); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:152"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_114
#AT_START_115
# 115. testsuite.at:153: Digest
at_setup_line='testsuite.at:153'
at_func_banner 5
at_desc="Digest"
$at_quiet $as_echo_n "115: $at_desc                                         "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "115. testsuite.at:153: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:153: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:153 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Digest); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:153"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_115
#AT_START_116
# 116. testsuite.at:154: GDBM
at_setup_line='testsuite.at:154'
at_func_banner 5
at_desc="GDBM"
$at_quiet $as_echo_n "116: $at_desc                                           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "116. testsuite.at:154: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p GDBM
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:154: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p GDBM
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:154 >"$at_check_line_file"

if { echo 'Not enabling shell tracing (command contains an embedded newline)'
   false; }; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p GDBM
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p GDBM
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:154"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_116
#AT_START_117
# 117. testsuite.at:155: Iconv
at_setup_line='testsuite.at:155'
at_func_banner 5
at_desc="Iconv"
$at_quiet $as_echo_n "117: $at_desc                                          "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "117. testsuite.at:155: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Iconv
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:155: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Iconv
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:155 >"$at_check_line_file"

if { echo 'Not enabling shell tracing (command contains an embedded newline)'
   false; }; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Iconv
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Iconv
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:155"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_117
#AT_START_118
# 118. testsuite.at:156: Magritte
at_setup_line='testsuite.at:156'
at_func_banner 5
at_desc="Magritte"
$at_quiet $as_echo_n "118: $at_desc                                       "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "118. testsuite.at:156: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Magritte); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:156: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Magritte); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:156 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Magritte); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Magritte); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Magritte); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:156"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_118
#AT_START_119
# 119. testsuite.at:157: ROE
at_setup_line='testsuite.at:157'
at_func_banner 5
at_desc="ROE"
$at_quiet $as_echo_n "119: $at_desc                                            "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "119. testsuite.at:157: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ROE
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:157: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p ROE
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:157 >"$at_check_line_file"

if { echo 'Not enabling shell tracing (command contains an embedded newline)'
   false; }; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ROE
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ROE
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:157"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_119
#AT_START_120
# 120. testsuite.at:158: Seaside-Core
at_setup_line='testsuite.at:158'
at_func_banner 5
at_desc="Seaside-Core"
$at_quiet $as_echo_n "120: $at_desc                                   "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "120. testsuite.at:158: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Seaside-Core); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:158: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Seaside-Core); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:158 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Seaside-Core); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Seaside-Core); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Seaside-Core); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:158"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_120
#AT_START_121
# 121. testsuite.at:159: Sport
at_setup_line='testsuite.at:159'
at_func_banner 5
at_desc="Sport"
$at_quiet $as_echo_n "121: $at_desc                                          "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "121. testsuite.at:159: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:159: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:159 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Sport); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:159"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_121
#AT_START_122
# 122. testsuite.at:160: Swazoo
at_setup_line='testsuite.at:160'
at_func_banner 5
at_desc="Swazoo"
$at_quiet $as_echo_n "122: $at_desc                                         "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "122. testsuite.at:160: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:160: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:160 >"$at_check_line_file"

if test -n "$at_traceon" \
  && at_func_check_newline "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit $? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p Swazoo); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:160"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_122
#AT_START_123
# 123. testsuite.at:161: ZLib
at_setup_line='testsuite.at:161'
at_func_banner 5
at_desc="ZLib"
$at_quiet $as_echo_n "123: $at_desc                                           "
at_xfail=no
echo "#                             -*- compilation -*-" >> "$at_group_log"
(
  $as_echo "123. testsuite.at:161: testing ..."
  $at_traceon





  case $AUTOTEST_PATH in
    tests) image_path="-I $abs_top_builddir/gst.im" ;;
    *) image_path="" ;;
  esac

  echo "{ (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ZLib
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode"
  { $at_traceoff
$as_echo "$at_srcdir/testsuite.at:161: { (cd \$abs_top_builddir && gst \$image_path -f \$abs_top_srcdir/scripts/Test.st --verbose  -p ZLib
    ret=\$?
    case \$ret in
      2) exit 77 ;;
      0|1) exit \$ret ;;
    esac); echo exit \$? > retcode; } | tr -d '\\r' | tee stdout; . ./retcode"
echo testsuite.at:161 >"$at_check_line_file"

if { echo 'Not enabling shell tracing (command contains an embedded newline)'
   false; }; then
  ( $at_traceon; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ZLib
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stder1"
  at_func_filter_trace $?
else
  ( :; { (cd $abs_top_builddir && gst $image_path -f $abs_top_srcdir/scripts/Test.st --verbose  -p ZLib
    ret=$?
    case $ret in
      2) exit 77 ;;
      0|1) exit $ret ;;
    esac); echo exit $? > retcode; } | tr -d '\r' | tee stdout; . ./retcode ) >"$at_stdout" 2>"$at_stderr"
fi
at_status=$?
at_failed=false
at_func_diff_devnull "$at_stderr" || at_failed=:
echo stdout:; cat "$at_stdout"
at_func_check_status 0 $at_status "$at_srcdir/testsuite.at:161"

$at_failed && at_func_log_failure
$at_traceon; }


    $at_traceoff
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 | eval $at_tee_pipe
at_status=`cat "$at_status_file"`
#AT_STOP_123
