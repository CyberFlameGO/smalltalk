/******************************** -*- C -*- ****************************
 *
 *	Byte Code definitions.
 *
 *
 ***********************************************************************/

/***********************************************************************
 *
 * Copyright 2003, 2006 Free Software Foundation, Inc.
 * Written by Paolo Bonzini.
 *
 * This file is part of GNU Smalltalk.
 *
 * GNU Smalltalk is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2, or (at your option) any later 
 * version.
 * 
 * Linking GNU Smalltalk statically or dynamically with other modules is
 * making a combined work based on GNU Smalltalk.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the Free Software Foundation
 * give you permission to combine GNU Smalltalk with free software
 * programs or libraries that are released under the GNU LGPL and with
 * independent programs running under the GNU Smalltalk virtual machine.
 *
 * You may copy and distribute such a system following the terms of the
 * GNU GPL for GNU Smalltalk and the licenses of the other code
 * concerned, provided that you include the source code of that other
 * code when and as the GNU GPL requires distribution of source code.
 *
 * Note that people who make modified versions of GNU Smalltalk are not
 * obligated to grant this special exception for their modified
 * versions; it is their choice whether to do so.  The GNU General
 * Public License gives permission to release a modified version without
 * this exception; this exception also makes it possible to release a
 * modified version which carries forward this exception.
 *
 * GNU Smalltalk is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * GNU Smalltalk; see the file COPYING.  If not, write to the Free Software
 * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  
 *
 ***********************************************************************/

/* This is C code which is wrapped within patterns; the patterns can
   be BEGIN/END a la awk, numbers, or ranges of numbers separated by
   ``..''.  Patterns don't fall through, unlike C's switch statements.

   There are special keywords: extract advances the instruction
   pointer and reads bits from it; dispatch goes to the named section
   of the MATCH_BYTECODES occurrence; break gets out of the
   MATCH_BYTECODES block; continue matches the next bytecode without
   executing anything in the MATCH_BYTECODES occurrence.

   In awk tradition, we also have a couple of predefined variables
   whose name is in uppercase... :-) these are IP which is the current
   instruction pointer (including the bytecodes that were dissected
   with extract), and IP0 which is the value of the instruction
   pointer on entrance to MATCH_BYTECODES (it is never changed, not
   even by continue statements).  You can see them used in the
   jump patterns below (40..43) */
   
/* Define the bytecodes and their arguments */
SEND_ARITH (n);
SEND_SPECIAL (n);
SEND (n, super, num_args);
SEND_IMMEDIATE (n, super);
PUSH_TEMPORARY_VARIABLE (n);
PUSH_OUTER_TEMP (n, scopes);
PUSH_LIT_VARIABLE (n);
PUSH_RECEIVER_VARIABLE (n);
STORE_TEMPORARY_VARIABLE (n);
STORE_OUTER_TEMP (n, scopes);
STORE_LIT_VARIABLE (n);
STORE_RECEIVER_VARIABLE (n);
JUMP (ofs);
POP_JUMP_TRUE (ofs);
POP_JUMP_FALSE (ofs);
PUSH_INTEGER (n);
PUSH_SELF;
PUSH_SPECIAL (n);
PUSH_LIT_CONSTANT (n);
POP_INTO_NEW_STACKTOP (n);
POP_STACK_TOP;
MAKE_DIRTY_BLOCK;
RETURN_METHOD_STACK_TOP;
RETURN_CONTEXT_STACK_TOP;
DUP_STACK_TOP;
EXIT_INTERPRETER;
LINE_NUMBER_BYTECODE (n);
INVALID (opcode, arg);

/* Automatically generated by superops.  Do not modify past this line!  */
/* PLUS_SPECIAL(*) */
0 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (0);
}

/* MINUS_SPECIAL(*) */
1 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (1);
}

/* LESS_THAN_SPECIAL(*) */
2 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (2);
}

/* GREATER_THAN_SPECIAL(*) */
3 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (3);
}

/* LESS_EQUAL_SPECIAL(*) */
4 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (4);
}

/* GREATER_EQUAL_SPECIAL(*) */
5 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (5);
}

/* EQUAL_SPECIAL(*) */
6 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (6);
}

/* NOT_EQUAL_SPECIAL(*) */
7 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (7);
}

/* TIMES_SPECIAL(*) */
8 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (8);
}

/* DIVIDE_SPECIAL(*) */
9 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (9);
}

/* REMAINDER_SPECIAL(*) */
10 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (10);
}

/* BIT_XOR_SPECIAL(*) */
11 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (11);
}

/* BIT_SHIFT_SPECIAL(*) */
12 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (12);
}

/* INTEGER_DIVIDE_SPECIAL(*) */
13 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (13);
}

/* BIT_AND_SPECIAL(*) */
14 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (14);
}

/* BIT_OR_SPECIAL(*) */
15 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_ARITH (15);
}

/* AT_SPECIAL(*) */
16 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (0);
}

/* AT_PUT_SPECIAL(*) */
17 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (1);
}

/* SIZE_SPECIAL(*) */
18 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (2);
}

/* CLASS_SPECIAL(*) */
19 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (3);
}

/* IS_NIL_SPECIAL(*) */
20 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (4);
}

/* NOT_NIL_SPECIAL(*) */
21 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (5);
}

/* VALUE_SPECIAL(*) */
22 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (6);
}

/* VALUE_COLON_SPECIAL(*) */
23 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (7);
}

/* SAME_OBJECT_SPECIAL(*) */
24 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (8);
}

/* SEND_SPECIAL(9) */
25 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (9);
}

/* SEND_SPECIAL(10) */
26 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (10);
}

/* invalid bytecode */
27 {
  extract opcode (8), arg_lsb (8);
  dispatch INVALID (27, arg | arg_lsb);
}

/* SEND(*) */
28 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND (arg >> 8, 0, arg_lsb);
}

/* SEND_SUPER(*) */
29 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND (arg >> 8, 1, arg_lsb);
}

/* SEND_IMMEDIATE(*) */
30 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* SEND_SUPER_IMMEDIATE(*) */
31 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 1);
}

/* PUSH_TEMPORARY_VARIABLE(*) */
32 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
}

/* PUSH_OUTER_TEMP(*) */
33 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_OUTER_TEMP (arg >> 8, arg_lsb);
}

/* PUSH_LIT_VARIABLE(*) */
34 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (arg | arg_lsb);
}

/* PUSH_RECEIVER_VARIABLE(*) */
35 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
}

/* STORE_TEMPORARY_VARIABLE(*) */
36 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (arg | arg_lsb);
}

/* STORE_OUTER_TEMP(*) */
37 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_OUTER_TEMP (arg >> 8, arg_lsb);
}

/* STORE_LIT_VARIABLE(*) */
38 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_LIT_VARIABLE (arg | arg_lsb);
}

/* STORE_RECEIVER_VARIABLE(*) */
39 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_RECEIVER_VARIABLE (arg | arg_lsb);
}

/* JUMP_BACK(*) */
40 {
  extract opcode (8), arg_lsb (8);
  dispatch JUMP (IP - IP0 - (arg | arg_lsb));
}

/* JUMP(*) */
41 {
  extract opcode (8), arg_lsb (8);
  dispatch JUMP (IP - IP0 + (arg | arg_lsb));
}

/* POP_JUMP_TRUE(*) */
42 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_JUMP_TRUE (IP - IP0 + (arg | arg_lsb));
}

/* POP_JUMP_FALSE(*) */
43 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_JUMP_FALSE (IP - IP0 + (arg | arg_lsb));
}

/* PUSH_INTEGER(*) */
44 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
}

/* PUSH_SPECIAL(*) */
45 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SPECIAL (arg | arg_lsb);
}

/* PUSH_LIT_CONSTANT(*) */
46 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
}

/* POP_INTO_NEW_STACKTOP(*) */
47 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_INTO_NEW_STACKTOP (arg | arg_lsb);
}

/* POP_STACK_TOP(*) */
48 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
}

/* MAKE_DIRTY_BLOCK(*) */
49 {
  extract opcode (8), arg_lsb (8);
  dispatch MAKE_DIRTY_BLOCK;
}

/* RETURN_METHOD_STACK_TOP(*) */
50 {
  extract opcode (8), arg_lsb (8);
  dispatch RETURN_METHOD_STACK_TOP;
}

/* RETURN_CONTEXT_STACK_TOP(*) */
51 {
  extract opcode (8), arg_lsb (8);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* DUP_STACK_TOP(*) */
52 {
  extract opcode (8), arg_lsb (8);
  dispatch DUP_STACK_TOP;
}

/* EXIT_INTERPRETER(*) */
53 {
  extract opcode (8), arg_lsb (8);
  dispatch EXIT_INTERPRETER;
}

/* LINE_NUMBER_BYTECODE(*) */
54 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
}

/* EXT_BYTE(*) */
55 {
  extract opcode (8), arg_lsb (8);
  arg = (arg | arg_lsb) << 8;
  continue;
}

/* PUSH_SELF(*) */
56 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
}

/* invalid bytecode */
57 {
  extract opcode (8), arg_lsb (8);
  dispatch INVALID (57, arg | arg_lsb);
}

/* invalid bytecode */
58 {
  extract opcode (8), arg_lsb (8);
  dispatch INVALID (58, arg | arg_lsb);
}

/* invalid bytecode */
59 {
  extract opcode (8), arg_lsb (8);
  dispatch INVALID (59, arg | arg_lsb);
}

/* invalid bytecode */
60 {
  extract opcode (8), arg_lsb (8);
  dispatch INVALID (60, arg | arg_lsb);
}

/* invalid bytecode */
61 {
  extract opcode (8), arg_lsb (8);
  dispatch INVALID (61, arg | arg_lsb);
}

/* invalid bytecode */
62 {
  extract opcode (8), arg_lsb (8);
  dispatch INVALID (62, arg | arg_lsb);
}

/* invalid bytecode */
63 {
  extract opcode (8), arg_lsb (8);
  dispatch INVALID (63, arg | arg_lsb);
}

/* EXT_BYTE(*)
   SEND(1) */
64 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND (arg | arg_lsb, 0, 1);
}

/* LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0) */
65 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
}

/* EXT_BYTE(*)
   SEND(0) */
66 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND (arg | arg_lsb, 0, 0);
}

/* PUSH_SELF(0)
   RETURN_CONTEXT_STACK_TOP(*) */
67 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0) */
68 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
}

/* PUSH_TEMPORARY_VARIABLE(0)
   SEND_IMMEDIATE(*) */
69 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_LIT_CONSTANT(*)
   MAKE_DIRTY_BLOCK(0) */
70 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch MAKE_DIRTY_BLOCK;
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_TEMPORARY_VARIABLE(0) */
71 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
}

/* EXT_BYTE(*)
   SEND(2) */
72 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND (arg | arg_lsb, 0, 2);
}

/* POP_STACK_TOP(0)
   DUP_STACK_TOP(*) */
73 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch DUP_STACK_TOP;
}

/* LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_SELF(0) */
74 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_SELF;
}

/* EXT_BYTE(*)
   PUSH_OUTER_TEMP(1) */
75 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_OUTER_TEMP (arg | arg_lsb, 1);
}

/* PUSH_SPECIAL(*)
   RETURN_CONTEXT_STACK_TOP(0) */
76 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SPECIAL (arg | arg_lsb);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* PUSH_INTEGER(*)
   PLUS_SPECIAL(0) */
77 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (0);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_LIT_VARIABLE(0) */
78 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_LIT_VARIABLE (0);
}

/* PUSH_TEMPORARY_VARIABLE(1)
   SEND_IMMEDIATE(*) */
79 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (1);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_SELF(0)
   SEND_IMMEDIATE(*) */
80 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_TEMPORARY_VARIABLE(0)
   SEND(*) */
81 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND (arg >> 8, 0, arg_lsb);
}

/* STORE_RECEIVER_VARIABLE(*)
   PUSH_SELF(0)
   RETURN_CONTEXT_STACK_TOP(0) */
82 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* IS_NIL_SPECIAL(0)
   POP_JUMP_FALSE(*) */
83 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (4);
  dispatch POP_JUMP_FALSE (IP - IP0 + (arg | arg_lsb));
}

/* PUSH_INTEGER(*)
   EQUAL_SPECIAL(0) */
84 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (6);
}

/* STORE_TEMPORARY_VARIABLE(*)
   POP_STACK_TOP(0) */
85 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
}

/* PUSH_TEMPORARY_VARIABLE(*)
   RETURN_CONTEXT_STACK_TOP(0) */
86 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* EXT_BYTE(*)
   SEND(3) */
87 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND (arg | arg_lsb, 0, 3);
}

/* PUSH_TEMPORARY_VARIABLE(0)
   EXT_BYTE(*)
   SEND(1) */
88 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND (arg | arg_lsb, 0, 1);
}

/* PUSH_TEMPORARY_VARIABLE(0)
   PUSH_TEMPORARY_VARIABLE(*) */
89 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
}

/* PUSH_INTEGER(*)
   MINUS_SPECIAL(0) */
90 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (1);
}

/* PUSH_INTEGER(*)
   AT_SPECIAL(0) */
91 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_SPECIAL (0);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_TEMPORARY_VARIABLE(1) */
92 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (1);
}

/* PUSH_SELF(0)
   EXT_BYTE(*)
   SEND(0) */
93 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch SEND (arg | arg_lsb, 0, 0);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   AT_SPECIAL(0) */
94 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_SPECIAL (0);
}

/* PUSH_LIT_VARIABLE(*)
   SEND_IMMEDIATE(84) */
95 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (arg | arg_lsb);
  dispatch SEND_IMMEDIATE (84, 0);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   SEND(0) */
96 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch SEND (0, 0, 0);
}

/* PUSH_LIT_CONSTANT(*)
   SEND_IMMEDIATE(36) */
97 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND_IMMEDIATE (36, 0);
}

/* SAME_OBJECT_SPECIAL(0)
   POP_JUMP_FALSE(*) */
98 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (8);
  dispatch POP_JUMP_FALSE (IP - IP0 + (arg | arg_lsb));
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_RECEIVER_VARIABLE(0) */
99 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_RECEIVER_VARIABLE (0);
}

/* DUP_STACK_TOP(0)
   POP_JUMP_FALSE(*) */
100 {
  extract opcode (8), arg_lsb (8);
  dispatch DUP_STACK_TOP;
  dispatch POP_JUMP_FALSE (IP - IP0 + (arg | arg_lsb));
}

/* PUSH_TEMPORARY_VARIABLE(*)
   PUSH_INTEGER(1)
   PLUS_SPECIAL(0) */
101 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch PUSH_INTEGER (1);
  dispatch SEND_ARITH (0);
}

/* POP_STACK_TOP(0)
   DUP_STACK_TOP(0)
   LINE_NUMBER_BYTECODE(*) */
102 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch DUP_STACK_TOP;
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_TEMPORARY_VARIABLE(2) */
103 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (2);
}

/* PUSH_SELF(0)
   SEND(*) */
104 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch SEND (arg >> 8, 0, arg_lsb);
}

/* PUSH_TEMPORARY_VARIABLE(0)
   EXT_BYTE(*)
   SEND(0) */
105 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND (arg | arg_lsb, 0, 0);
}

/* PUSH_LIT_CONSTANT(*)
   SEND_IMMEDIATE(38) */
106 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND_IMMEDIATE (38, 0);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   SIZE_SPECIAL(0) */
107 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_SPECIAL (2);
}

/* EXT_BYTE(*)
   STORE_OUTER_TEMP(1) */
108 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_OUTER_TEMP (arg | arg_lsb, 1);
}

/* PUSH_INTEGER(*)
   SEND_IMMEDIATE(32) */
109 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_IMMEDIATE (32, 0);
}

/* PUSH_LIT_CONSTANT(*)
   EQUAL_SPECIAL(0) */
110 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND_ARITH (6);
}

/* LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_TEMPORARY_VARIABLE(0) */
111 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (0);
}

/* PUSH_LIT_CONSTANT(*)
   MAKE_DIRTY_BLOCK(0)
   SEND_IMMEDIATE(76) */
112 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch MAKE_DIRTY_BLOCK;
  dispatch SEND_IMMEDIATE (76, 0);
}

/* PUSH_TEMPORARY_VARIABLE(2)
   SEND_IMMEDIATE(*) */
113 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (2);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_RECEIVER_VARIABLE(1) */
114 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_RECEIVER_VARIABLE (1);
}

/* PUSH_LIT_CONSTANT(*)
   EXT_BYTE(1)
   SEND(1) */
115 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND (1, 0, 1);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   PLUS_SPECIAL(0) */
116 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (0);
}

/* POP_STACK_TOP(0)
   LINE_NUMBER_BYTECODE(*) */
117 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
}

/* POP_STACK_TOP(0)
   SEND_IMMEDIATE(*) */
118 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_INTEGER(1)
   STORE_TEMPORARY_VARIABLE(*) */
119 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (1);
  dispatch STORE_TEMPORARY_VARIABLE (arg | arg_lsb);
}

/* PUSH_TEMPORARY_VARIABLE(1)
   EXT_BYTE(*)
   SEND(1) */
120 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (1);
  dispatch SEND (arg | arg_lsb, 0, 1);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   VALUE_SPECIAL(0) */
121 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_SPECIAL (6);
}

/* PUSH_LIT_CONSTANT(1)
   SEND_IMMEDIATE(*) */
122 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (1);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   TIMES_SPECIAL(0) */
123 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (8);
}

/* PUSH_INTEGER(*)
   GREATER_THAN_SPECIAL(0) */
124 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (3);
}

/* LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_TEMPORARY_VARIABLE(1) */
125 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (1);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   MINUS_SPECIAL(0) */
126 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (1);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_OUTER_TEMP(1) */
127 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_OUTER_TEMP (0, 1);
}

/* DUP_STACK_TOP(0)
   POP_JUMP_TRUE(*) */
128 {
  extract opcode (8), arg_lsb (8);
  dispatch DUP_STACK_TOP;
  dispatch POP_JUMP_TRUE (IP - IP0 + (arg | arg_lsb));
}

/* STORE_TEMPORARY_VARIABLE(1)
   LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0) */
129 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (1);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
}

/* PUSH_TEMPORARY_VARIABLE(*)
   AT_PUT_SPECIAL(0) */
130 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_SPECIAL (1);
}

/* PUSH_LIT_CONSTANT(0)
   SEND_IMMEDIATE(*) */
131 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (0);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_TEMPORARY_VARIABLE(3)
   SEND_IMMEDIATE(*) */
132 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (3);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* POP_STACK_TOP(0)
   JUMP_BACK(*) */
133 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch JUMP (IP - IP0 - (arg | arg_lsb));
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_RECEIVER_VARIABLE(2) */
134 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_RECEIVER_VARIABLE (2);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   PUSH_TEMPORARY_VARIABLE(0) */
135 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch PUSH_TEMPORARY_VARIABLE (0);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_LIT_CONSTANT(0) */
136 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_LIT_CONSTANT (0);
}

/* PUSH_SELF(0)
   SIZE_SPECIAL(*) */
137 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch SEND_SPECIAL (2);
}

/* PUSH_INTEGER(*)
   TIMES_SPECIAL(0) */
138 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (8);
}

/* IS_NIL_SPECIAL(0)
   POP_JUMP_TRUE(*) */
139 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (4);
  dispatch POP_JUMP_TRUE (IP - IP0 + (arg | arg_lsb));
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_RECEIVER_VARIABLE(3) */
140 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_RECEIVER_VARIABLE (3);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_LIT_VARIABLE(1) */
141 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_LIT_VARIABLE (1);
}

/* STORE_RECEIVER_VARIABLE(*)
   POP_STACK_TOP(0) */
142 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
}

/* PUSH_INTEGER(*)
   LESS_THAN_SPECIAL(0) */
143 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (2);
}

/* PUSH_LIT_CONSTANT(*)
   EXT_BYTE(2)
   SEND(1) */
144 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND (2, 0, 1);
}

/* EXT_BYTE(*)
   PUSH_OUTER_TEMP(2) */
145 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_OUTER_TEMP (arg | arg_lsb, 2);
}

/* PUSH_RECEIVER_VARIABLE(*)
   SIZE_SPECIAL(0) */
146 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch SEND_SPECIAL (2);
}

/* POP_STACK_TOP(0)
   PUSH_TEMPORARY_VARIABLE(*) */
147 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   PUSH_INTEGER(1)
   MINUS_SPECIAL(0) */
148 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch PUSH_INTEGER (1);
  dispatch SEND_ARITH (1);
}

/* POP_STACK_TOP(0)
   DUP_STACK_TOP(0)
   PUSH_TEMPORARY_VARIABLE(*)
   PUSH_INTEGER(1)
   PLUS_SPECIAL(0) */
149 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch DUP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch PUSH_INTEGER (1);
  dispatch SEND_ARITH (0);
}

/* NOT_NIL_SPECIAL(0)
   POP_JUMP_FALSE(*) */
150 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (5);
  dispatch POP_JUMP_FALSE (IP - IP0 + (arg | arg_lsb));
}

/* STORE_TEMPORARY_VARIABLE(1)
   LINE_NUMBER_BYTECODE(*) */
151 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (1);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
}

/* LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_TEMPORARY_VARIABLE(2) */
152 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (2);
}

/* DUP_STACK_TOP(0)
   LINE_NUMBER_BYTECODE(*) */
153 {
  extract opcode (8), arg_lsb (8);
  dispatch DUP_STACK_TOP;
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
}

/* LINE_NUMBER_BYTECODE(*)
   EXT_BYTE(1)
   PUSH_OUTER_TEMP(1) */
154 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_OUTER_TEMP (1, 1);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   SEND_IMMEDIATE(84) */
155 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch SEND_IMMEDIATE (84, 0);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   PUSH_TEMPORARY_VARIABLE(0)
   SEND(1) */
156 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND (0, 0, 1);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_TEMPORARY_VARIABLE(3) */
157 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (3);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   EQUAL_SPECIAL(0) */
158 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (6);
}

/* PUSH_INTEGER(*)
   RETURN_CONTEXT_STACK_TOP(0) */
159 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* STORE_TEMPORARY_VARIABLE(2)
   LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0) */
160 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (2);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
}

/* PUSH_TEMPORARY_VARIABLE(0)
   PUSH_TEMPORARY_VARIABLE(1)
   SEND(*) */
161 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch PUSH_TEMPORARY_VARIABLE (1);
  dispatch SEND (arg >> 8, 0, arg_lsb);
}

/* PUSH_RECEIVER_VARIABLE(*)
   SEND(0) */
162 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch SEND (0, 0, 0);
}

/* PUSH_SELF(0)
   PUSH_TEMPORARY_VARIABLE(*) */
163 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
}

/* STORE_TEMPORARY_VARIABLE(0)
   LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0) */
164 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (0);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
}

/* STORE_TEMPORARY_VARIABLE(1)
   LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_SELF(0) */
165 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (1);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_SELF;
}

/* PUSH_TEMPORARY_VARIABLE(*)
   VALUE_COLON_SPECIAL(0) */
166 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_SPECIAL (7);
}

/* PUSH_RECEIVER_VARIABLE(1)
   SEND_IMMEDIATE(*) */
167 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (1);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_LIT_CONSTANT(1)
   MAKE_DIRTY_BLOCK(0)
   SEND_IMMEDIATE(*) */
168 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (1);
  dispatch MAKE_DIRTY_BLOCK;
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_INTEGER(*)
   BIT_AND_SPECIAL(0) */
169 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (14);
}

/* PUSH_LIT_CONSTANT(2)
   SEND_IMMEDIATE(*) */
170 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (2);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_TEMPORARY_VARIABLE(1)
   PUSH_TEMPORARY_VARIABLE(*) */
171 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (1);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
}

/* POP_STACK_TOP(0)
   LINE_NUMBER_BYTECODE(*)
   SEND_IMMEDIATE(37) */
172 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch SEND_IMMEDIATE (37, 0);
}

/* PUSH_LIT_CONSTANT(*)
   SAME_OBJECT_SPECIAL(0) */
173 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND_SPECIAL (8);
}

/* PUSH_INTEGER(*)
   INTEGER_DIVIDE_SPECIAL(0) */
174 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (13);
}

/* PUSH_LIT_CONSTANT(*)
   AT_PUT_SPECIAL(0) */
175 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND_SPECIAL (1);
}

/* PUSH_RECEIVER_VARIABLE(*)
   RETURN_CONTEXT_STACK_TOP(0) */
176 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* PUSH_LIT_VARIABLE(0)
   SEND_IMMEDIATE(*) */
177 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (0);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_LIT_CONSTANT(*)
   MAKE_DIRTY_BLOCK(0)
   EXT_BYTE(2)
   SEND(1) */
178 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch MAKE_DIRTY_BLOCK;
  dispatch SEND (2, 0, 1);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   SEND_IMMEDIATE(40) */
179 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch SEND_IMMEDIATE (40, 0);
}

/* STORE_TEMPORARY_VARIABLE(2)
   LINE_NUMBER_BYTECODE(*) */
180 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (2);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
}

/* PUSH_RECEIVER_VARIABLE(*)
   MINUS_SPECIAL(0) */
181 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (1);
}

/* PUSH_LIT_CONSTANT(*)
   LESS_THAN_SPECIAL(0) */
182 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND_ARITH (2);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_LIT_VARIABLE(0)
   SEND_IMMEDIATE(84) */
183 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_LIT_VARIABLE (0);
  dispatch SEND_IMMEDIATE (84, 0);
}

/* PUSH_TEMPORARY_VARIABLE(2)
   EXT_BYTE(*)
   SEND(1) */
184 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (2);
  dispatch SEND (arg | arg_lsb, 0, 1);
}

/* PUSH_LIT_CONSTANT(*)
   MAKE_DIRTY_BLOCK(0)
   EXT_BYTE(3)
   SEND(1) */
185 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch MAKE_DIRTY_BLOCK;
  dispatch SEND (3, 0, 1);
}

/* POP_STACK_TOP(0)
   PUSH_RECEIVER_VARIABLE(*) */
186 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
}

/* PUSH_RECEIVER_VARIABLE(*)
   TIMES_SPECIAL(0) */
187 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (8);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_LIT_VARIABLE(0)
   RETURN_CONTEXT_STACK_TOP(0) */
188 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_LIT_VARIABLE (0);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* STORE_TEMPORARY_VARIABLE(0)
   LINE_NUMBER_BYTECODE(*) */
189 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (0);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
}

/* PUSH_SELF(0)
   EXT_BYTE(*)
   SEND(1) */
190 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch SEND (arg | arg_lsb, 0, 1);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   PUSH_LIT_CONSTANT(0) */
191 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch PUSH_LIT_CONSTANT (0);
}

/* PUSH_LIT_VARIABLE(2)
   SEND_IMMEDIATE(*) */
192 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (2);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_LIT_VARIABLE(*)
   PUSH_TEMPORARY_VARIABLE(0) */
193 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_TEMPORARY_VARIABLE(0)
   SEND(0) */
194 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND (0, 0, 0);
}

/* STORE_TEMPORARY_VARIABLE(0)
   LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_SELF(0) */
195 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (0);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_SELF;
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   CLASS_SPECIAL(0) */
196 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch SEND_SPECIAL (3);
}

/* PUSH_LIT_VARIABLE(1)
   SEND_IMMEDIATE(*) */
197 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (1);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_LIT_CONSTANT(*)
   EXT_BYTE(3)
   SEND(1) */
198 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND (3, 0, 1);
}

/* PUSH_RECEIVER_VARIABLE(*)
   PLUS_SPECIAL(0) */
199 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (0);
}

/* PUSH_LIT_CONSTANT(*)
   RETURN_CONTEXT_STACK_TOP(0) */
200 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* EXT_BYTE(*)
   STORE_OUTER_TEMP(1)
   RETURN_CONTEXT_STACK_TOP(0) */
201 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_OUTER_TEMP (arg | arg_lsb, 1);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* PUSH_SELF(0)
   CLASS_SPECIAL(*) */
202 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch SEND_SPECIAL (3);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_RECEIVER_VARIABLE(4) */
203 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_RECEIVER_VARIABLE (4);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_RECEIVER_VARIABLE(5) */
204 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_RECEIVER_VARIABLE (5);
}

/* LINE_NUMBER_BYTECODE(*)
   EXT_BYTE(2)
   PUSH_OUTER_TEMP(1) */
205 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_OUTER_TEMP (2, 1);
}

/* PUSH_OUTER_TEMP(1)
   SEND_IMMEDIATE(*) */
206 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_OUTER_TEMP (0, 1);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_RECEIVER_VARIABLE(0)
   SEND_IMMEDIATE(*) */
207 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (0);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_TEMPORARY_VARIABLE(4)
   SEND_IMMEDIATE(*) */
208 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (4);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* STORE_TEMPORARY_VARIABLE(3)
   LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0) */
209 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (3);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   SEND_IMMEDIATE(130) */
210 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch SEND_IMMEDIATE (130, 0);
}

/* PUSH_LIT_CONSTANT(*)
   MAKE_DIRTY_BLOCK(0)
   EXT_BYTE(1)
   SEND(1) */
211 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch MAKE_DIRTY_BLOCK;
  dispatch SEND (1, 0, 1);
}

/* EXT_BYTE(*)
   SEND(5) */
212 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND (arg | arg_lsb, 0, 5);
}

/* EXT_BYTE(*)
   SEND(4) */
213 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND (arg | arg_lsb, 0, 4);
}

/* PUSH_SPECIAL(*)
   RETURN_METHOD_STACK_TOP(0) */
214 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SPECIAL (arg | arg_lsb);
  dispatch RETURN_METHOD_STACK_TOP;
}

/* PUSH_LIT_CONSTANT(*)
   EXT_BYTE(2)
   SEND(2) */
215 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND (2, 0, 2);
}

/* PUSH_TEMPORARY_VARIABLE(1)
   SEND(*) */
216 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (1);
  dispatch SEND (arg >> 8, 0, arg_lsb);
}

/* PUSH_INTEGER(*)
   DIVIDE_SPECIAL(0) */
217 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (9);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_INTEGER(1) */
218 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_INTEGER (1);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SPECIAL(0)
   RETURN_CONTEXT_STACK_TOP(0) */
219 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SPECIAL (0);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_INTEGER(0) */
220 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_INTEGER (0);
}

/* PUSH_OUTER_TEMP(1)
   EXT_BYTE(*)
   SEND(1) */
221 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_OUTER_TEMP (0, 1);
  dispatch SEND (arg | arg_lsb, 0, 1);
}

/* PUSH_TEMPORARY_VARIABLE(2)
   PUSH_TEMPORARY_VARIABLE(*) */
222 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (2);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
}

/* PUSH_SPECIAL(0)
   STORE_RECEIVER_VARIABLE(*) */
223 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SPECIAL (0);
  dispatch STORE_RECEIVER_VARIABLE (arg | arg_lsb);
}

/* DUP_STACK_TOP(0)
   PUSH_LIT_CONSTANT(*)
   SEND_IMMEDIATE(36) */
224 {
  extract opcode (8), arg_lsb (8);
  dispatch DUP_STACK_TOP;
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch SEND_IMMEDIATE (36, 0);
}

/* POP_STACK_TOP(0)
   DUP_STACK_TOP(0)
   LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0) */
225 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch DUP_STACK_TOP;
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
}

/* SAME_OBJECT_SPECIAL(0)
   POP_JUMP_TRUE(*) */
226 {
  extract opcode (8), arg_lsb (8);
  dispatch SEND_SPECIAL (8);
  dispatch POP_JUMP_TRUE (IP - IP0 + (arg | arg_lsb));
}

/* PUSH_TEMPORARY_VARIABLE(0)
   EXT_BYTE(*)
   SEND(2) */
227 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND (arg | arg_lsb, 0, 2);
}

/* STORE_TEMPORARY_VARIABLE(2)
   LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_SELF(0) */
228 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_TEMPORARY_VARIABLE (2);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_SELF;
}

/* DUP_STACK_TOP(0)
   PUSH_TEMPORARY_VARIABLE(*)
   PUSH_INTEGER(1)
   PLUS_SPECIAL(0) */
229 {
  extract opcode (8), arg_lsb (8);
  dispatch DUP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch PUSH_INTEGER (1);
  dispatch SEND_ARITH (0);
}

/* PUSH_LIT_CONSTANT(*)
   PUSH_TEMPORARY_VARIABLE(0)
   AT_PUT_SPECIAL(0) */
230 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND_SPECIAL (1);
}

/* PUSH_INTEGER(*)
   AT_PUT_SPECIAL(0) */
231 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_SPECIAL (1);
}

/* POP_STACK_TOP(0)
   LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0) */
232 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_SELF(0)
   EXT_BYTE(1)
   SEND(0) */
233 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch SEND (1, 0, 0);
}

/* PUSH_LIT_VARIABLE(3)
   SEND_IMMEDIATE(*) */
234 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (3);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_LIT_CONSTANT(*)
   MAKE_DIRTY_BLOCK(0)
   EXT_BYTE(5)
   SEND(1) */
235 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch MAKE_DIRTY_BLOCK;
  dispatch SEND (5, 0, 1);
}

/* PUSH_LIT_CONSTANT(*)
   MAKE_DIRTY_BLOCK(0)
   SEND_IMMEDIATE(52) */
236 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (arg | arg_lsb);
  dispatch MAKE_DIRTY_BLOCK;
  dispatch SEND_IMMEDIATE (52, 0);
}

/* DUP_STACK_TOP(0)
   SEND_IMMEDIATE(*) */
237 {
  extract opcode (8), arg_lsb (8);
  dispatch DUP_STACK_TOP;
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_RECEIVER_VARIABLE(*)
   DIVIDE_SPECIAL(0) */
238 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_RECEIVER_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (9);
}

/* PUSH_LIT_VARIABLE(*)
   PUSH_TEMPORARY_VARIABLE(1) */
239 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (1);
}

/* POP_STACK_TOP(0)
   DUP_STACK_TOP(0)
   SEND_IMMEDIATE(*) */
240 {
  extract opcode (8), arg_lsb (8);
  dispatch POP_STACK_TOP;
  dispatch DUP_STACK_TOP;
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_SELF(0)
   PUSH_TEMPORARY_VARIABLE(0)
   SEND_IMMEDIATE(*) */
241 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* PUSH_TEMPORARY_VARIABLE(*)
   DIVIDE_SPECIAL(0) */
242 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (arg | arg_lsb);
  dispatch SEND_ARITH (9);
}

/* STORE_LIT_VARIABLE(*)
   PUSH_SELF(0)
   RETURN_CONTEXT_STACK_TOP(0) */
243 {
  extract opcode (8), arg_lsb (8);
  dispatch STORE_LIT_VARIABLE (arg | arg_lsb);
  dispatch PUSH_SELF;
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_TEMPORARY_VARIABLE(0)
   RETURN_CONTEXT_STACK_TOP(0) */
244 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* PUSH_TEMPORARY_VARIABLE(3)
   EXT_BYTE(*)
   SEND(0) */
245 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_TEMPORARY_VARIABLE (3);
  dispatch SEND (arg | arg_lsb, 0, 0);
}

/* PUSH_INTEGER(*)
   SEND(1) */
246 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND (0, 0, 1);
}

/* PUSH_INTEGER(*)
   GREATER_EQUAL_SPECIAL(0) */
247 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (arg | arg_lsb);
  dispatch SEND_ARITH (5);
}

/* PUSH_SELF(0)
   PUSH_TEMPORARY_VARIABLE(0)
   SEND(*) */
248 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_SELF;
  dispatch PUSH_TEMPORARY_VARIABLE (0);
  dispatch SEND (arg >> 8, 0, arg_lsb);
}

/* PUSH_LIT_VARIABLE(0)
   EXT_BYTE(*)
   SEND(0) */
249 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_VARIABLE (0);
  dispatch SEND (arg | arg_lsb, 0, 0);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_TEMPORARY_VARIABLE(4) */
250 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_TEMPORARY_VARIABLE (4);
}

/* LINE_NUMBER_BYTECODE(*)
   PUSH_LIT_VARIABLE(1)
   EXT_BYTE(2)
   SEND(0) */
251 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch PUSH_LIT_VARIABLE (1);
  dispatch SEND (2, 0, 0);
}

/* PUSH_LIT_CONSTANT(3)
   SEND_IMMEDIATE(*) */
252 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_LIT_CONSTANT (3);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

/* LINE_NUMBER_BYTECODE(*)
   POP_STACK_TOP(0)
   PUSH_TEMPORARY_VARIABLE(1)
   RETURN_CONTEXT_STACK_TOP(0) */
253 {
  extract opcode (8), arg_lsb (8);
  dispatch LINE_NUMBER_BYTECODE (arg | arg_lsb);
  dispatch POP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (1);
  dispatch RETURN_CONTEXT_STACK_TOP;
}

/* DUP_STACK_TOP(*)
   PUSH_TEMPORARY_VARIABLE(1) */
254 {
  extract opcode (8), arg_lsb (8);
  dispatch DUP_STACK_TOP;
  dispatch PUSH_TEMPORARY_VARIABLE (1);
}

/* PUSH_INTEGER(0)
   SEND_IMMEDIATE(*) */
255 {
  extract opcode (8), arg_lsb (8);
  dispatch PUSH_INTEGER (0);
  dispatch SEND_IMMEDIATE (arg | arg_lsb, 0);
}

